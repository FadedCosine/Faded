<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhixian Yang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fadedcosine.github.io/"/>
  <updated>2020-04-20T16:53:41.161Z</updated>
  <id>https://fadedcosine.github.io/</id>
  
  <author>
    <name>Zhixian Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020拼多多算法实习生笔试、面试记录</title>
    <link href="https://fadedcosine.github.io/2020/04/16/The-Entrance-Test-and-Interview-of-Pinduoduo/"/>
    <id>https://fadedcosine.github.io/2020/04/16/The-Entrance-Test-and-Interview-of-Pinduoduo/</id>
    <published>2020-04-16T06:24:11.000Z</published>
    <updated>2020-04-20T16:53:41.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>拼多多笔试两小时四道题，做出来三道，最后一道题未果，后寻得答案。</p><blockquote><p>N个方块涂有颜色，玩家可以从所有的方块中任意移除最多k个方块，使得在剩余的方块中，连续相同的颜色的方块长度最长。问通过移动，可以得到的相同颜色的方块最长多长。</p></blockquote><a id="more"></a><p>起初以为是用dp来做，不过确实能做：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dp[i][j]表示以[i]结尾，移动j个方块所能得到的最长长度；</span></span><br><span class="line"><span class="comment">//状态转移方程为：</span></span><br><span class="line"><span class="keyword">if</span>(a[i] == a[i<span class="number">-1</span>])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i<span class="number">-1</span>][j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = max(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过这种做法，需要的时间复杂度为O(nk)，超时了，显然不能满分。</p><p>实际上，正确的解法为使用滑动窗口的技巧，对于初始情况下的每一块相同颜色的色块，以该色块颜色为当前的目标颜色，维护最大<strong>移除长度</strong>为k的滑动窗口（即最多跳过k个不相同的颜色方块），记录当前窗口内，通过移除可得的最大相同长度，在依此更新全局的最大长度。不过，我寻思这样做时间复杂度也是O(nk)，只不过可能常数要小一些而已。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cicada[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cicada[i];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i + <span class="number">1</span> &lt; n &amp;&amp; cicada[i] == cicada[i+<span class="number">1</span>]) <span class="comment">//维护初始色块</span></span><br><span class="line">&#123;</span><br><span class="line">i++, len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i + t &lt; n - <span class="number">1</span> &amp;&amp; count &lt; k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cicada[i] == cicada[i + t]) len++;</span><br><span class="line"><span class="keyword">else</span> count++;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i + t &lt; n &amp;&amp; cicada[i] == cicada[i + t])</span><br><span class="line">&#123;</span><br><span class="line">t++, len++;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(anx, len);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>面试官是一个和蔼的叔叔（真滴好和蔼呀，整个面试的过程都轻松了很多呢）太和蔼了，好感度+10，终于不会被庄小姐杀死而潜伏失败了。<br>令我吃惊的是，面试官先向我做了一个自我介绍，他是拼多多图像组的组长，工作内容是拼多多内部或者产品的一些人脸识别、图像搜索等内容。之后，大抵寻常的过程，我做了自我介绍，而他针对我的项目问了很多问题，以下作为记录：</p><ul><li><p>问：你的这篇论文工作是在哪里一些改进呢？你说是系统的响应时间，怎么看着你们使用社交网络的维度是在推荐系统的效果上做出了一些改进呢？</p><p>答：是的，考虑社交网络关系对于用户查询的影响的确能够在推荐系统的推荐效果上给用户以更好的对象推荐，那我所说的在响应时间上的改进是得益于我们使用用户的社交网络影响进行了一些剪枝算法的设计。首先我们使用图嵌入算法得到用户特征向量之后，使用用户之间的相似度对于用户朋友对于每个索引节点的访问次数进行加权求和之后归一化，得到用户受其社交关系的影响因子，并设定一个阈值，我们认为低于这个阈值的索引节点是在社交与当前用户不相关的节点，就剪枝掉，从而节省了很多对于不相关节点的访问时间。</p></li><li><p>问：你的鸟类图像分类这个项目中为什么要做边缘检测、去背景，难道去背景之后效果会更好嘛？</p><p>答：我们拿到的图片中，有些鸟类主体只占图片的非常小的一部分，我们觉得去除多余的背景，可以去除一些冗余的信息，可能会提高模型的效果。</p><p>问：那你去了背景之后模型效果提高了多少。</p><p>答：我没做对比实验</p><p>之后，尬住。。</p></li><li><p>问：你毕设项目中的这个验证器是什么？能具体介绍一下嘛？</p><p>答：</p></li><li><p>问：介绍一下CycleGAN。</p><p>答：我大概说了一下，这里记录一下自己说错的一点。实际上，Cycle Consistencey Loss包括的是x -&gt; G(x) -&gt;  F(G(x))中F(G(x))相对于x的loss（这个叫forward cycle consistency），还包括y -&gt; F(y) -&gt; G(F(y))中G(F(y))相对于y的loss（这个叫backward cycle consistency）。两者之和才是cycle consistency loss。</p></li><li><p>问：你的deblur项目中改进了CycleGAN模型的什么网络结构？</p><p>答：我们改进了CycleGAN的生成器网络，用了类似于Amulet的方法，使用多层次的特征提取，把低层次的卷积特征通过上采样的一些反卷积的操作，和后一层的feature map做concat操作。这样做就是希望一些低分辨率的粗糙去模糊图片引导高分辨率的去模糊图片的生成。</p></li><li><p>（我自己）问：什么是反卷积？</p><p>（知乎）答：在应用在计算机视觉的深度学习领域，由于输入图像通过卷积神经网络(CNN)提取特征后，输出的尺寸往往会变小，而有时我们需要将图像恢复到原来的尺寸以便进行进一步的计算，这个采用扩大图像尺寸，实现图像由小分辨率到大分辨率的映射的操作，叫做上采样。而反卷积是一个常用的上采样方法，那反卷积是一种特殊的正向卷积，先按照一定的比例通过补0来扩大输入图像的尺寸，再进行正向卷积（也就是根据要上采样到的图片大小，进行补0，在对补0之后的矩阵做正向卷积）所以反卷积只能恢复尺寸，而不能恢复数值。</p></li><li><p>问：SSIM loss是什么？</p><p>答：SSIM loss是基于样本x和y之间三个方面的比较，分别是亮度、对比度和结构，SSIM loss改进了MSE不能衡量图像结构相似性的缺陷（SSIM越大，两个图像之间的差距越小）。</p></li><li><p>问：介绍一下3D表面重建的Matching Cube算法。</p><p>答：首先我们这个点云空间被分为k <em> k </em> k个小方块，也就是所谓的体素，存在模型点的体素，我们称为实体素，不存在的成为虚体素。定义体元是由8个相邻的体素所构成的正方体。而我们要做的3D表面重建就是在做3D模型表面的三角形面片的重建。那位于3D模型表面的体元的8个体素点都可能是实体素点或者虚体素点，那只有一共有2的8次方种情况，也就是256种情况。Matching Cube的思想就是利用这256种可枚举的情况来进行体元内3D模型表面的抽取。那这么抽取呢，举个例子，如果在边界体元中，A体素是实体素，B体素是虚体素，那这个表面就一定经过A和B的中点位置。也就是根据这样的表面划分方法，通过关注边界的体元，我们就能进行3D模型的表面重建。</p></li><li><p>问：我看你都是在做一些深度学习的内容，你对传统的机器学习了解吗。介绍一下GBDT。</p></li><li><p>问：介绍一下决策树的种类。（我并不是很懂这个问题，于是说了决策树的生成过程，这里试着回答这个问题。）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;笔试&quot;&gt;&lt;a href=&quot;#笔试&quot; class=&quot;headerlink&quot; title=&quot;笔试&quot;&gt;&lt;/a&gt;笔试&lt;/h2&gt;&lt;p&gt;拼多多笔试两小时四道题，做出来三道，最后一道题未果，后寻得答案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;N个方块涂有颜色，玩家可以从所有的方块中任意移除最多k个方块，使得在剩余的方块中，连续相同的颜色的方块长度最长。问通过移动，可以得到的相同颜色的方块最长多长。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="世若秋水一般凉" scheme="https://fadedcosine.github.io/categories/%E4%B8%96%E8%8B%A5%E7%A7%8B%E6%B0%B4%E4%B8%80%E8%88%AC%E5%87%89/"/>
    
    
      <category term="笔试" scheme="https://fadedcosine.github.io/tags/%E7%AC%94%E8%AF%95/"/>
    
      <category term="面经" scheme="https://fadedcosine.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>广告文本多分类——2020腾讯游戏安全技术决赛反思</title>
    <link href="https://fadedcosine.github.io/2020/04/14/The-introspection-of-Tencent-game-security-technology-competition/"/>
    <id>https://fadedcosine.github.io/2020/04/14/The-introspection-of-Tencent-game-security-technology-competition/</id>
    <published>2020-04-14T12:12:31.000Z</published>
    <updated>2020-04-18T12:12:36.726Z</updated>
    
    <content type="html"><![CDATA[<p>四月初的天气时常阴晴未定。</p><p>由于好兄弟去年参加了这个比赛的缘故（见<a href="https://blog.csdn.net/Code_Tookie/article/details/88819298" target="_blank" rel="noopener">他的博客</a>），我今年也尝试报名参赛，并也进入决赛，不过可惜只拿到优秀奖。我自己甚是失望，故属文于此，记录下整个答题过程和反思。</p><h3 id="1-数据分析"><a href="#1-数据分析" class="headerlink" title="1. 数据分析"></a>1. 数据分析</h3><p>赛事方提供的游戏部分公开言语数据（中文），每条记录包括了言语内容本身和对应的细分类标签（正常和4种广告细分类，共5个分类）。首先我对数据进行初步分析，得到数据的数量分布以及对应的标签含义如下表：</p><div class="table-container"><table><thead><tr><th><strong>数据标签</strong></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th></tr></thead><tbody><tr><td><strong>数量/条</strong></td><td>73034</td><td>25466</td><td>500</td><td>1000</td><td>2000</td></tr><tr><td><strong>标签含义</strong></td><td>普通非广告文本</td><td>出资源广告</td><td>退款广告</td><td>社交广告</td><td>代练广告</td></tr></tbody></table></div><p>​    由此可见，各类标签的数据十分不均衡，因此我做了以下两种数据增强操作。</p><a id="more"></a><p>1)   分词数据增强：我首先设定均衡的数据分布比例为4:1:1:1:1，而后我使用jieba分词将文本进行分词操作。分词之后，对于文本的分词进行两种操作，一是随机地进行删除，二是 shuffle, 即打乱词序，得到通过分词进行数据增强之后的训练集；</p><p>2)   反向翻译数据增强：反向翻译的主要思想是先将机器翻译成另一种语言，再从另一种语言的文本翻译回原先语言，从而进行数据增强。我按照设定的数据分布比例，使用腾讯AI开放平台提供的文本翻译（翻译君）API进行反向翻译数据增强。</p><p>经过数据增强，各标签数据的比例大约在4:1:1:1:1，总的数据量到达了293490条。</p><h3 id="2-模型建立"><a href="#2-模型建立" class="headerlink" title="2. 模型建立"></a>2. 模型建立</h3><p>我实际上实现了两个模型，BERT与TextCNN。</p><p>因为Pytorch和Transformers的框架下，就已经有了文本分类的API，用BERT的中文分词器处理完数据之后就可以很简单的直接训练，具体可以参考我滴好兄弟的<a href="https://blog.csdn.net/Code_Tookie/article/details/104944888" target="_blank" rel="noopener">另一篇博客</a>。</p><p>而TextCNN则十分常规的embedding+convd+maxpooling+output的网络结构，实现起来也轻而易举，分词则是用jieba这个分词库。</p><p>以上就是就是我模型的建立，由于本文重点在反思部分，故此处便不再叨唠。</p><h3 id="3-测试效果"><a href="#3-测试效果" class="headerlink" title="3. 测试效果"></a>3. 测试效果</h3><p>BERT的多分类模型，在我9:1划分的测试集上的结果如下：</p><div class="table-container"><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>Precision</strong></th><th><strong>Recall</strong></th><th><strong>F1</strong></th></tr></thead><tbody><tr><td>97.5926%</td><td>97.76%</td><td>97.80%</td><td>97.71%</td></tr></tbody></table></div><p>看着这么高的表现只不过是镜花水月。实际上我得知自己只有优秀奖之后向赛事方寻求了测试集的部分数据，其数据的数量分布如下：</p><div class="table-container"><table><thead><tr><th><strong>数据标签</strong></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th></tr></thead><tbody><tr><td><strong>数量/条</strong></td><td>12110</td><td>2447</td><td>287</td><td>620</td><td>1269</td></tr></tbody></table></div><p>可以发现，测试集的数据分布其实和训练集是十分接近的，而我训练的BERT模型在测试集上的测试效果则不堪入目：</p><div class="table-container"><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>Precision</strong></th><th><strong>Recall</strong></th><th><strong>F1</strong></th></tr></thead><tbody><tr><td>87.0805%</td><td>27.85%</td><td>17.23%</td><td>21.78%</td></tr></tbody></table></div><p>而TextCNN的模型在测试集上却有不错的效果：</p><div class="table-container"><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>Precision</strong></th><th><strong>Recall</strong></th><th><strong>F1</strong></th></tr></thead><tbody><tr><td>86.85%</td><td>88.87%</td><td>60.31%</td><td>79.46%</td></tr></tbody></table></div><p>认真debug一晚上之后，发现是在BERT模型中做预测时，调用forward的时候少传了一个参数，预测部分的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">..........</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step, batch <span class="keyword">in</span> enumerate(test_dataloader):</span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">40</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> step == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'  Batch &#123;:&gt;5,&#125;  of  &#123;:&gt;5,&#125;.'</span>.format(step, len(test_dataloader)))</span><br><span class="line">        batch = tuple(t.to(device) <span class="keyword">for</span> t <span class="keyword">in</span> batch)</span><br><span class="line">        <span class="comment"># b_input_ids, b_input_mask = batch</span></span><br><span class="line">        b_input_ids, b_input_mask, b_labels = batch</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            outputs = model(b_input_ids,</span><br><span class="line">                    token_type_ids=<span class="literal">None</span>,</span><br><span class="line">                    attention_mask=b_input_mask <span class="comment">#在提交答卷时少传了这个attention_mask</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">        logits = outputs[<span class="number">0</span>]</span><br><span class="line">        logits = logits.detach().cpu().numpy()</span><br><span class="line">        label_ids = b_labels.to(<span class="string">'cpu'</span>).numpy()</span><br><span class="line"></span><br><span class="line">.............</span><br></pre></td></tr></table></figure><p>attention_mask的作用是用于指示输入的文本，如果是PAD符号则是0，否则就是1。无论在训练还是预测，这都是一个十分重要的参数，我竟然漏了这个参数，实属nt。还有一个很重要的原因是，由于本地GPU不够跑BERT，而我又暂时没有服务器，只能在colab上跑程序，当时做预测时，只用了非常小（10行）的一个测试集，发现都正确之后便没有再检查了。出现如此低级错误，实在是不能接受。</p><p>不过现在的懊恼都已经弃我去者，昨日之日不可留了。希望以此为戒，乞求拜托今日之日的烦忧。</p><p>debug之后，BERT模型正确的测试代码的测试结果如下：</p><div class="table-container"><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>Precision</strong></th><th><strong>Recall</strong></th><th><strong>F1</strong></th></tr></thead><tbody><tr><td>87.08%</td><td>88.20%</td><td>61.57%</td><td>79.60%</td></tr></tbody></table></div><p>相比于TextCNN只有一点点的提升。考虑到测试文本中存在很多的非中文噪声，如：（该例子为我手动杜撰的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4t把恩dsaiuhf223daf2元十万钻</span><br></pre></td></tr></table></figure><p>实际上这个广告文本的内容就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2元十万钻</span><br></pre></td></tr></table></figure><p>所以我清洗了文本中的非中文字符。注意，可能存在其他正常的文本中本就出现非中文字符，所以这种清洗方式可能并不是最合适的。清洗之后BERT模型的表现略有上升：</p><div class="table-container"><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>Precision</strong></th><th><strong>Recall</strong></th><th><strong>F1</strong></th></tr></thead><tbody><tr><td>87.33%</td><td>88.61%</td><td>62.35%</td><td>80.17%</td></tr></tbody></table></div><p>以上，这次大赛的工作就告一段落了。之后，我向主办方了解到广告文本多分类第一名的F1达到了89.3%，确实存在比较大的差距。总结来说我觉得自己的工作可以改进的部分如下：</p><ol><li>对于文本多分类问题，还只是用了最基础的BERT预训练模型加上一层decoder，可能忽略了其他一些重要的信息，decoder可能过于简单，也许可以参考最近的论文做更多设计。</li><li>可能数据的预处理部分存在问题，数据增强部分设定的数据分布比例可能必不合理，相反强行拉成4:1:1:1:1可能造成模型从这个数据分布获取了一些其他并不准确的特征信息。另外，数据清洗部分的做法也有待考虑。</li><li>我以后一定要换一台本地可以跑BERT的代码，或者自己有一张卡，不愿上colab薅资本主义恶臭的的羊毛（其实是因为colab老是断开连接，GPU用久了还给我限额）。</li></ol><hr><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>在听 Jony J 的 My Man 时收到了腾讯面试官的来电，便开始了一次忽如而至的面试，听声音面试官是个和蔼的靓仔。</p><p>面试的流程大抵寻常，自我介绍、项目介绍、针对项目进行提问。</p><p>我介绍完自己用ALBERT做的机器阅读理解的毕业设计之后，他问了我一些问题：</p><ul><li><p>问：ALBERT相较于BERT的改进。</p><p>答：极大程度地减少了参数量；</p></li><li><p>问：Multi-Head Attention的作用。</p><p>答：让模型去关注不同方面的信息，比如说一些底层的Head去关注一次低层的识别，如关注位置信息、关注语法信息、关注罕见词，而高层的Head去对整个句子做一些高层次的理解；</p></li><li><p>问：前馈神经网络的作用。</p><p>答：其实就是全连接层的作用，Multi-Head Attention/卷积对数据进行处理后得到了数据的局部特征，而前馈神经网络/全连接层的作用就是把之前的局部特征通过权值矩阵进行整合，方便进行后续下游任务的处理；</p></li><li><p>问：你为什么认为BERT这些预训练模型不能提取文本信息中的句法和语义信息？</p><p>答：我是从BERT模型的训练方式MLM和Next Sentence Prediction，说明其只能对上下文信息做比较好的提取，而没有显性考虑文本中的语义和句法信息；</p></li><li><p>问：怎么理解语义？你对语义是怎么处理的？</p></li><li><p>问：你们又是怎么处理句法的呢？</p></li><li><p>问：你说用了斯坦福的句法依存分析的API，介绍一下这个句法依存分析的原理：</p></li><li><p>问：句法和语义信息中的位置信息你们是怎么处理的呢？</p></li></ul><p>接着又让我介绍了一下我的论文工作，针对我的论文问的问题我大多都回答得不错，其中有些印象深刻的问题：</p><ul><li><p>问：对于推荐系统中的冷启动问题，你们是怎么处理的？</p><p>答：（其实没有处理）emmm，确实存在冷启动问题，那我们使用的解决冷启动问题的方法是设定了一个地理位置信息对象的种类熵，也就是把熵的概念应用在店铺的种类分布之下，把这个种类熵作为基于索引的搜索过程中的一种评价指标，熵越大表示当前索引节点下的店铺种类越多，而这样的做法恰恰也是倾向于给用户提供多样性的选择，也就是推荐系统当中一种常用的解决冷启动问题的方法。</p></li><li><p>问：相对于Baseline，你们的模型取得了怎么样的提升？</p><p>答：从响应时间上对比，100条真实的搜索，我们的平均响应时间为15秒，也就是平均每条0.15秒。另外我们实现了传统的Spatial Keywords Query中的IR树模型作为baseline，而这个模型的响应时间，100条真实的搜索，平均响应时间为30秒，也就是平均每条0.3秒。也就是说我们的模型快乐以北，那作为trade-off，由于我们的模型引入了新的维度的特征，在索引的大小上有了一定度的增大。</p></li></ul><p>最后让我介绍了这次大赛的工作，我主要说了自己做的数据增强工作（说出来其实很水），接着面试官小哥问了一些问题：</p><ul><li><p>问：如何对文本是如何做分词的呢？</p><p>答：我说用BERT原来的中文tokenization，但实际上原来的tokenization并不是传统意义上的分词，而是把文本分成一个个单字，而BERT就是基于单字的表示，也就相当于BERT模型并没有做中文的分词；另一个textcnn的模型倒是用了分词，用jieba分词之后，而后使用随机词向量输入到textcnn模型中。</p></li></ul><p>以上便是对这次面试的大多印象，这个实习岗位是在腾讯深圳总部，工作内容是关于非法信息识别（祖安人亲妈）。希望能顺利拿到offer。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;四月初的天气时常阴晴未定。&lt;/p&gt;
&lt;p&gt;由于好兄弟去年参加了这个比赛的缘故（见&lt;a href=&quot;https://blog.csdn.net/Code_Tookie/article/details/88819298&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;他的博客&lt;/a&gt;），我今年也尝试报名参赛，并也进入决赛，不过可惜只拿到优秀奖。我自己甚是失望，故属文于此，记录下整个答题过程和反思。&lt;/p&gt;
&lt;h3 id=&quot;1-数据分析&quot;&gt;&lt;a href=&quot;#1-数据分析&quot; class=&quot;headerlink&quot; title=&quot;1. 数据分析&quot;&gt;&lt;/a&gt;1. 数据分析&lt;/h3&gt;&lt;p&gt;赛事方提供的游戏部分公开言语数据（中文），每条记录包括了言语内容本身和对应的细分类标签（正常和4种广告细分类，共5个分类）。首先我对数据进行初步分析，得到数据的数量分布以及对应的标签含义如下表：&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;数据标签&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;数量/条&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;73034&lt;/td&gt;
&lt;td&gt;25466&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;标签含义&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;普通非广告文本&lt;/td&gt;
&lt;td&gt;出资源广告&lt;/td&gt;
&lt;td&gt;退款广告&lt;/td&gt;
&lt;td&gt;社交广告&lt;/td&gt;
&lt;td&gt;代练广告&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;​    由此可见，各类标签的数据十分不均衡，因此我做了以下两种数据增强操作。&lt;/p&gt;
    
    </summary>
    
      <category term="人如春色三分淡" scheme="https://fadedcosine.github.io/categories/%E4%BA%BA%E5%A6%82%E6%98%A5%E8%89%B2%E4%B8%89%E5%88%86%E6%B7%A1/"/>
    
    
      <category term="NLP" scheme="https://fadedcosine.github.io/tags/NLP/"/>
    
      <category term="竞赛" scheme="https://fadedcosine.github.io/tags/%E7%AB%9E%E8%B5%9B/"/>
    
      <category term="预训练模型" scheme="https://fadedcosine.github.io/tags/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>The Odyssey of DP —— NOI题集拾遗</title>
    <link href="https://fadedcosine.github.io/2020/02/12/The-Odyssey-of-DP-2/"/>
    <id>https://fadedcosine.github.io/2020/02/12/The-Odyssey-of-DP-2/</id>
    <published>2020-02-12T11:05:23.000Z</published>
    <updated>2020-04-16T07:02:18.056Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://noi.openjudge.cn/ch0206/162/" target="_blank" rel="noopener">NOI 162:Post Office</a></p><blockquote><p>在一条直线坐标轴上有V个村庄，P个邮局，邮局建在村庄上，求一种建法，让V个村庄到最近邮局的距离之和最小。<br>输入：第一行包括两个整数， 1 &lt;= V &lt;= 300，1 &lt;= P &lt;= 30；第二行输入有序的村庄的位置a[i]<br>输出：输出最小的V个村庄到最近邮局的距离之和<br><strong>输入</strong><br>10 5<br>1 2 3 6 7 9 11 22 44 50<br><strong>输出</strong><br>8</p></blockquote><p>首先需要考虑到，如果对$[0, \cdots , i]$的村庄只建一座邮局，那一定是把邮局建在中央的村庄[i/2]中使得到邮局的距离和最小。以下给出证明：<br>设对于$[0, \cdots , i]$的村庄，将邮局建在$[i/2]$中得到的距离和为S，下标为i的村庄的位置为a[i]。假设只建一座邮局时，邮局建筑的最优位置为$[j]（j \ne i）$，则邮局建在[j]的距离和为$S+ abs(a[i/2] - a[j]) \times (i - i/2  -  j)$，因为 $S+ abs(a[i/2] - a[j]) \times (i - i/2  -  j)  &gt; S$，与 [j]为最优位置矛盾，所以 j = i / 2，即得证。<br>我们可以设置$dp[i][j] := [0, \cdots , i]$村庄中建j座村庄的距离和最小值。由之前证得的定理很容易得到状态转移方程：(min_distance(i,j)表示在$[i, \cdots, j]$建一座邮局的距离和最小值)</p><script type="math/tex; mode=display">dp[i][j] = \min \{ dp[m][j-1] + min\_distance(m+1, i)\} | 0 \le m <  i</script><a id="more"></a><p>即对$0 \le m &lt;  i ，[0, \cdots, m]$的村庄建j-1个邮局，$[m+1, \cdots, i]$的村庄建一个邮局，遍历m，得到距离和最小值。代码如下，时间复杂度为$O(n^3)$：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p, v;</span><br><span class="line"><span class="keyword">int</span> villages[<span class="number">310</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">310</span>][<span class="number">31</span>];<span class="comment">// dp[i][j] 表示[0, ... , i]中j个post office的cost</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_distance</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = villages[(i + j) / <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; k++)</span><br><span class="line">&#123;</span><br><span class="line">ans += <span class="built_in">abs</span>(villages[k] - mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NOI_2_6_162</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v, &amp;p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">310</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">31</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][k] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;villages[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">1</span>] = min_distance(<span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= p; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; i; m++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][k] = min(dp[i][k], dp[m][k - <span class="number">1</span>] + min_distance(m + <span class="number">1</span>, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[v<span class="number">-1</span>][p]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://noi.openjudge.cn/ch0206/7627/" target="_blank" rel="noopener">NOI 7627:鸡蛋的硬度</a></p><blockquote><p>有n层楼，m个鸡蛋，如果鸡蛋从第a层摔下来没摔破，但是从a+1层摔下来时摔破了，那么就说这个鸡蛋的硬度是a。这些鸡蛋硬度相同，在求鸡蛋的硬度下问使用最优策略在最坏情况下所需要的扔鸡蛋次数。<br><strong>输入</strong><br>100 1<br>100 2<br><strong>输出</strong><br>100<br>14</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://noi.openjudge.cn/ch0206/162/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NOI 162:Post Office&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一条直线坐标轴上有V个村庄，P个邮局，邮局建在村庄上，求一种建法，让V个村庄到最近邮局的距离之和最小。&lt;br&gt;输入：第一行包括两个整数， 1 &amp;lt;= V &amp;lt;= 300，1 &amp;lt;= P &amp;lt;= 30；第二行输入有序的村庄的位置a[i]&lt;br&gt;输出：输出最小的V个村庄到最近邮局的距离之和&lt;br&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;br&gt;10 5&lt;br&gt;1 2 3 6 7 9 11 22 44 50&lt;br&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;br&gt;8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先需要考虑到，如果对$[0, \cdots , i]$的村庄只建一座邮局，那一定是把邮局建在中央的村庄[i/2]中使得到邮局的距离和最小。以下给出证明：&lt;br&gt;设对于$[0, \cdots , i]$的村庄，将邮局建在$[i/2]$中得到的距离和为S，下标为i的村庄的位置为a[i]。假设只建一座邮局时，邮局建筑的最优位置为$[j]（j \ne i）$，则邮局建在[j]的距离和为$S+ abs(a[i/2] - a[j]) \times (i - i/2  -  j)$，因为 $S+ abs(a[i/2] - a[j]) \times (i - i/2  -  j)  &amp;gt; S$，与 [j]为最优位置矛盾，所以 j = i / 2，即得证。&lt;br&gt;我们可以设置$dp[i][j] := [0, \cdots , i]$村庄中建j座村庄的距离和最小值。由之前证得的定理很容易得到状态转移方程：(min_distance(i,j)表示在$[i, \cdots, j]$建一座邮局的距离和最小值)&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;dp[i][j] = \min \{ dp[m][j-1] + min\_distance(m+1, i)\} | 0 \le m &lt;  i&lt;/script&gt;
    
    </summary>
    
      <category term="千里怀思月在峰" scheme="https://fadedcosine.github.io/categories/%E5%8D%83%E9%87%8C%E6%80%80%E6%80%9D%E6%9C%88%E5%9C%A8%E5%B3%B0/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="DP" scheme="https://fadedcosine.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>The Odyssey of DP —— 最大子矩阵</title>
    <link href="https://fadedcosine.github.io/2020/01/16/The-Odyssey-of-DP-1/"/>
    <id>https://fadedcosine.github.io/2020/01/16/The-Odyssey-of-DP-1/</id>
    <published>2020-01-16T03:29:46.000Z</published>
    <updated>2020-01-16T04:31:59.587Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-最大连续子序列和"><a href="#1-最大连续子序列和" class="headerlink" title="1. 最大连续子序列和"></a>1. 最大连续子序列和</h4><blockquote><p>给定一个数字序列 $A_{1}, A_{2}, \cdots, A_{n}$，求i，j（1$\le i \le j \le n$），使得$A_{i} + \cdots + A_{j} $最大，输出这个最大和。</p></blockquote><p> 样例：</p><blockquote><p>-2 11 -4 13 -5 -2</p><p>显然 11+(-4)+13=20为和最大的选取情况，因此最大和为20</p></blockquote><p>使用动态规划，复杂度为O(n)的做法：设置dp[i]表示以A[i]作为末尾的连续序列的最大和，如此一来，要求的最大和其实就算dp[0]，dp[1]，$\cdots$，dp[n-1]中的最大值，下面想办法求解dp数组。</p><p>因为dp[i]要求必须是以A[i]作为末尾的连续序列的最大和，那么只有两种情况：</p><ul><li>这个最大和的连续序列只有一个元素，即A[i];</li><li>这个最大和的连续序列有多个元素，即从前面某处A[p]开始（p&lt;i），一直到A[i]结尾。</li></ul><p>对于第一种情况，最大和就是A[i]本身。对于第二种情况，最大和是dp[i-1]+A[i]。于是得到状态转移方程</p><script type="math/tex; mode=display">dp[i] = max\{A[i], dp[i-1] + A[i]\}</script><a id="more"></a><p>依此写出代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxn], dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">    dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    dp[i] = max(A[i], dp[i<span class="number">-1</span>] + A[i]);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i] &gt; dp[k])</span><br><span class="line">            k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[k]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要记录每个index的连续序列的最大和时可以写成以下简洁的形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span><span class="comment">//一维数组的最大连续子序列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!a || n &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> themax = a[<span class="number">0</span>], curmax = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">curmax = max(a[i], curmax + a[i]);</span><br><span class="line">themax = max(themax, curmax);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> themax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-最大子矩阵和"><a href="#2-最大子矩阵和" class="headerlink" title="2. 最大子矩阵和"></a>2. 最大子矩阵和</h4><blockquote><p>已知矩阵的大小定义为矩阵中所有元素的和。<br>第一行输入一个方阵的行数n，之后的n行输入方阵的每个元素，你的任务是找到最大的非空(大小至少是1 * 1)子矩阵。<br>n<br>0 -2 -7 0<br>9 2 -6 2<br>-4 1 -4 1<br>-1 8 0 -2<br>的最大子矩阵是<br>9 2<br>-4 1<br>-1 8<br>这个子矩阵的大小是15。</p></blockquote><p>直觉上来看，这个问题就是上述最大连续子序列和拓展到二维的情况。那么关键在于如何将两者联系起来。首先我们知道<strong>一定存在0$\le i \le j \le n-1$，最优解就在第i行和第j行之间，剩下的就是去确定两个列</strong>，我们可以通过遍历所有i, j的情况，针对一对确定的i, j，我们将每一列的[i, j]行之间的数各自相加。得到一个一维数组，$a[i][0] + $\cdots$ + a[j][0], $\cdots$, a[i][n-1] + $\cdots$ + a[j][n-1]$，而后对这个一维的和数组求最大连续子序列和。最后求出上述每个i, j的最大连续子序列和的最大值即为最大子矩阵和。得到一个$O(n^3)$的算法。<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> matrix[MAXV][MAXV];</span><br><span class="line"><span class="keyword">int</span> tmp[MAXV]; <span class="comment">//用于保存\[i, j\]行之间的数各自相加的一维数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MaxSubMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matrix[i][j]);</span><br><span class="line"><span class="keyword">int</span> tmpsum, themax = <span class="number">-1000000000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">fill(tmp, tmp + n, <span class="number">0</span>);<span class="comment">//每次移动i的时候tmp数组清零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++)<span class="comment">//遍历所有i, j的情况</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line">tmp[k] += matrix[j][k];<span class="comment">//重复利用tmp，因为对于i, j的遍历是先固定i，递增j，所以当j从p变为p+1时，可以利用$tmp_p$加上第p+1行的元素即可</span></span><br><span class="line">&#125;</span><br><span class="line">tmpsum = maxSubArray(tmp, n); <span class="comment">//上述的最大连续序列和</span></span><br><span class="line">themax = max(themax, tmpsum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, themax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-最大连续子序列和&quot;&gt;&lt;a href=&quot;#1-最大连续子序列和&quot; class=&quot;headerlink&quot; title=&quot;1. 最大连续子序列和&quot;&gt;&lt;/a&gt;1. 最大连续子序列和&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个数字序列 $A_{1}, A_{2}, \cdots, A_{n}$，求i，j（1$\le i \le j \le n$），使得$A_{i} + \cdots + A_{j} $最大，输出这个最大和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 样例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-2 11 -4 13 -5 -2&lt;/p&gt;
&lt;p&gt;显然 11+(-4)+13=20为和最大的选取情况，因此最大和为20&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用动态规划，复杂度为O(n)的做法：设置dp[i]表示以A[i]作为末尾的连续序列的最大和，如此一来，要求的最大和其实就算dp[0]，dp[1]，$\cdots$，dp[n-1]中的最大值，下面想办法求解dp数组。&lt;/p&gt;
&lt;p&gt;因为dp[i]要求必须是以A[i]作为末尾的连续序列的最大和，那么只有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个最大和的连续序列只有一个元素，即A[i];&lt;/li&gt;
&lt;li&gt;这个最大和的连续序列有多个元素，即从前面某处A[p]开始（p&amp;lt;i），一直到A[i]结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于第一种情况，最大和就是A[i]本身。对于第二种情况，最大和是dp[i-1]+A[i]。于是得到状态转移方程&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp[i] = max\{A[i], dp[i-1] + A[i]\}&lt;/script&gt;
    
    </summary>
    
      <category term="千里怀思月在峰" scheme="https://fadedcosine.github.io/categories/%E5%8D%83%E9%87%8C%E6%80%80%E6%80%9D%E6%9C%88%E5%9C%A8%E5%B3%B0/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="DP" scheme="https://fadedcosine.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>二分法——《算法笔记》</title>
    <link href="https://fadedcosine.github.io/2020/01/06/The-Binary-Search/"/>
    <id>https://fadedcosine.github.io/2020/01/06/The-Binary-Search/</id>
    <published>2020-01-06T12:30:06.000Z</published>
    <updated>2020-01-06T13:10:51.689Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-二分法适用范围"><a href="#1-二分法适用范围" class="headerlink" title="1. 二分法适用范围"></a>1. 二分法适用范围</h4><p>二分法适用在一个<strong>严格单调序列</strong>中找到给定的某个数。</p><h4 id="2-二分法模板提要"><a href="#2-二分法模板提要" class="headerlink" title="2. 二分法模板提要"></a>2. 二分法模板提要</h4><p>首先，在<algorithm>库中的有lower_bound()和upper_bound()两个函数，对于lower_bound()来说，它是寻找第一个满足条件“值大于等于x”的元素的位置；而对于upper_bound()来说，它是寻找第一个满足条件“值大于x”的元素的位置。对于此类<strong>寻找有序序列中第一个满足某条件的元素的位置</strong>的问题，有固定的模板，如下：</algorithm></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分区间位左闭右闭的[left, right]，初值必须能覆盖解的所有可能取值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) <span class="comment">//对于[left, right]来说，left == right意味着找到唯一位置</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (条件成立) <span class="comment">//条件成立，第一个满足条件的元素的位置&lt;=mid</span></span><br><span class="line">&#123;</span><br><span class="line">right = mid; <span class="comment">//往左子区间[left, mid]寻找</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="comment">//条件不成立，则第一个满足该条件的元素的位置&gt;mid</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;<span class="comment">//往右子区间[mid+1, right]寻找</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left; <span class="comment">//返回最终确定的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>另外，如果想要寻找最后一个满足”条件C“的元素的位置，则可以先求第一个满足”条件!C“的元素的位置，然后将该位置减1即可。我们也可以把上述模板改成左开右闭的二分区间来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分区间位左开右闭的(left, right]，初值必须能覆盖解的所有可能取值，并且left比最小值小1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) <span class="comment">//对于(left, right]来说，left + 1== right意味着找到唯一位置</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (条件成立) <span class="comment">//条件成立，第一个满足条件的元素的位置&lt;=mid</span></span><br><span class="line">&#123;</span><br><span class="line">right = mid; <span class="comment">//往左子区间(left, mid]寻找</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="comment">//条件不成立，则第一个满足该条件的元素的位置&gt;mid</span></span><br><span class="line">&#123;</span><br><span class="line">left = mid ;<span class="comment">//往右子区间(mid, right]寻找</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right; <span class="comment">//返回最终确定的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-模板题"><a href="#3-模板题" class="headerlink" title="3. 模板题"></a>3. 模板题</h4><h5 id="3-1-木棒切割问题"><a href="#3-1-木棒切割问题" class="headerlink" title="3.1 木棒切割问题"></a>3.1 木棒切割问题</h5><blockquote><p>给出长度已知的 n 根木棒，每根木棒的长度可能不同，现在希望通过切割它们得到至少 k 段长度相等的木棒（长度必须为整数），问这些长度相等的木棒最长能有多长。</p></blockquote><p>根据题意可知，长度相等的木棒的长度 L 越长，可得到的长度相等的木棒的段数越少，因此这是一个单调的情况，可以二分木棒长度 L ，当最后刚好可得到 k 段木棒时的 L 值即为所求最大长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> len[<span class="number">100</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; len[i];</span><br><span class="line"><span class="keyword">if</span> (len[i] &gt; right) right = len[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>; right++;</span><br><span class="line"><span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">t += len[i] / mid;</span><br><span class="line"><span class="keyword">if</span> (t &lt; k) right = mid;</span><br><span class="line"><span class="keyword">else</span> left = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; right - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h5 id="3-2-凸多边形的最大外接圆"><a href="#3-2-凸多边形的最大外接圆" class="headerlink" title="3.2 凸多边形的最大外接圆"></a>3.2 凸多边形的最大外接圆</h5><blockquote><p>给出 n 个线段的长度，试将他们头尾相接（顺序任意）地组合成一个凸多边形，使得该凸多边形的外接圆（即能使凸多边形的所有顶点都在圆周上的圆）的半径最大，求该最大半径。n 不超过 $10^{5}$，线段长度均不超过100，要求算法中不涉及坐标的计算。</p></blockquote><p>对于要求的半径，当半径过小时，所有线段首位相连放在圆里面形成 n 个弦，弦所对的圆心角之和大于 360°，而当半径过大时，弦所对的圆心角之和小于360°。仔细思考，圆心角之和与对应半径是一个单调的关系，因此可以采用二分法解决。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> m[<span class="number">100005</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> min = <span class="number">101</span>, max = <span class="number">0</span>, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m[i];</span><br><span class="line"><span class="keyword">if</span> (m[i] &lt; min) min = m[i];</span><br><span class="line">max += m[i];</span><br><span class="line">&#125;</span><br><span class="line">min /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (min &lt; max) &#123; <span class="comment">//左闭右闭</span></span><br><span class="line">r = (min + max) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> degree = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (m[i] &gt; <span class="number">2</span> * r) &#123;</span><br><span class="line">degree = pi + <span class="number">1</span>;  <span class="comment">//存在一条弦的长度大于两倍半径，这种情况不可能发生，所以当前的半径r过小，要到其右子区间进行搜索</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> degree += <span class="built_in">asin</span>(m[i] / <span class="number">2</span> / r); <span class="comment">//求得所有弦对应的圆心角之和</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">fabs</span>(degree - pi) &lt; eps) <span class="keyword">break</span>; <span class="comment">//若圆心角之和等于360°，此时的r即为正确答案</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (degree &gt; pi) min = r;<span class="comment">//大于360°，要到其右子区间[r, max]进行搜索</span></span><br><span class="line"><span class="keyword">else</span> max = r; <span class="comment">//否则，要到其左子区间[min, r]进行搜索。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-二分法适用范围&quot;&gt;&lt;a href=&quot;#1-二分法适用范围&quot; class=&quot;headerlink&quot; title=&quot;1. 二分法适用范围&quot;&gt;&lt;/a&gt;1. 二分法适用范围&lt;/h4&gt;&lt;p&gt;二分法适用在一个&lt;strong&gt;严格单调序列&lt;/strong&gt;中找到给定的某个数。&lt;/p&gt;
&lt;h4 id=&quot;2-二分法模板提要&quot;&gt;&lt;a href=&quot;#2-二分法模板提要&quot; class=&quot;headerlink&quot; title=&quot;2. 二分法模板提要&quot;&gt;&lt;/a&gt;2. 二分法模板提要&lt;/h4&gt;&lt;p&gt;首先，在&lt;algorithm&gt;库中的有lower_bound()和upper_bound()两个函数，对于lower_bound()来说，它是寻找第一个满足条件“值大于等于x”的元素的位置；而对于upper_bound()来说，它是寻找第一个满足条件“值大于x”的元素的位置。对于此类&lt;strong&gt;寻找有序序列中第一个满足某条件的元素的位置&lt;/strong&gt;的问题，有固定的模板，如下：&lt;/algorithm&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//二分区间位左闭右闭的[left, right]，初值必须能覆盖解的所有可能取值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (left &amp;lt; right) &lt;span class=&quot;comment&quot;&gt;//对于[left, right]来说，left == right意味着找到唯一位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mid = (left + right) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (条件成立) &lt;span class=&quot;comment&quot;&gt;//条件成立，第一个满足条件的元素的位置&amp;lt;=mid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			right = mid; &lt;span class=&quot;comment&quot;&gt;//往左子区间[left, mid]寻找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//条件不成立，则第一个满足该条件的元素的位置&amp;gt;mid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			left = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//往右子区间[mid+1, right]寻找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left; &lt;span class=&quot;comment&quot;&gt;//返回最终确定的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="二分" scheme="https://fadedcosine.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>划分、解决、合并：分治法——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/07/04/Divide-and-Conquer-Code-Challenging/"/>
    <id>https://fadedcosine.github.io/2019/07/04/Divide-and-Conquer-Code-Challenging/</id>
    <published>2019-07-04T11:51:30.000Z</published>
    <updated>2019-07-05T04:33:25.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-6-1-数列上的分治法"><a href="#4-6-1-数列上的分治法" class="headerlink" title="4.6.1 数列上的分治法"></a>4.6.1 数列上的分治法</h3><blockquote><p>给定一个1~n的排列<script type="math/tex">a_0,a_1,\cdots, a_{n-1}</script>，求这个数列中的逆序数对。</p></blockquote><p>我们可以把一个大的数列A分成左右两个子数列B、C，那么数列A中所有的逆序对必定来自于以下三者其一：<br>(1) i,j都属于左子数列B的逆序对(i,j);<br>(2) i,j都属于右子数列C的逆序对(i,j);<br>(3) i属于B而j属于C</p><p>对于这(1)和(2)，可以通过递归求得，对于(3)，我们可以对数列C中的每个数字，统计数列B中比它大的数字的个数，再把结果加起来就好。代码如下，复杂度为$O(n\log n)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line"><span class="function">ll <span class="title">merge_count</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = a.size();</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ll cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(a.begin(), a.begin()+n/<span class="number">2</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c(a.begin() + n/<span class="number">2</span>, a.end());</span><br><span class="line"></span><br><span class="line">cnt += merge_count(b); <span class="comment">//(1)</span></span><br><span class="line">cnt += merge_count(c); <span class="comment">//(2)</span></span><br><span class="line"><span class="comment">//此时b和c就已经分别排好序了</span></span><br><span class="line"><span class="comment">//(3)</span></span><br><span class="line"><span class="keyword">int</span> ai = <span class="number">0</span>, bi = <span class="number">0</span>, ci = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ai &lt; n)s</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bi &lt; b.size() &amp;&amp; (ci == c.size() || b[bi] &lt;= c[ci])) <span class="comment">//ci == c.size()这个判断是，如果c数列已经全部找完了，剩下的全是b数列里的树，就不能看在有逆序数的存在</span></span><br><span class="line">&#123;</span><br><span class="line">a[ai++] = b[bi++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cnt += (n/<span class="number">2</span> -bi);</span><br><span class="line">a[ai++] = c[ci++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, merge_count(A));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-6-3-平面上的分治法"><a href="#4-6-3-平面上的分治法" class="headerlink" title="4.6.3 平面上的分治法"></a>4.6.3 平面上的分治法</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;4-6-1-数列上的分治法&quot;&gt;&lt;a href=&quot;#4-6-1-数列上的分治法&quot; class=&quot;headerlink&quot; title=&quot;4.6.1 数列上的分治法&quot;&gt;&lt;/a&gt;4.6.1 数列上的分治法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个1~n的排列&lt;sc
      
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="分治法" scheme="https://fadedcosine.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>双端队列的运用——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/07/04/The-Usage-of-Deque-Code-Challenging/"/>
    <id>https://fadedcosine.github.io/2019/07/04/The-Usage-of-Deque-Code-Challenging/</id>
    <published>2019-07-04T08:56:12.000Z</published>
    <updated>2019-07-04T09:45:03.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>滑动最小值<br>给定一个长度为n的数列<script type="math/tex">a_0, a_1, \cdots, a_{n-1}</script>和一个整数k。求数列$b<em>i = \min{a_i,a</em>{i+1},\cdots,a_{i+k-1} }(i=0,1,\cdots,n-k)。<br>限制条件：<br>$1\le k \le n \le 10^6$, $0 \le a_i \le 10^9$</p></blockquote><p>使用双端队列可以在O(n)时间内解决这个问题。最开始时双端队列为空，然后不断维护双端队列使它按照下面的顺序，存储用于计算后面的最小值a的元素的下标。</p><script type="math/tex; mode=display">设双端队列从头部开始的元素的值为x_i，则x_i < x_{i+1}且a_i < a_{i+1}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[MAX_N]; <span class="comment">//保存答案的数组</span></span><br><span class="line"><span class="keyword">int</span> deq[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>, t = <span class="number">0</span>; <span class="comment">//双端队列的头部和尾部</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(s&lt;t &amp;&amp; a[deq[t<span class="number">-1</span>]] &gt;= a[i]) t--;</span><br><span class="line">deq[t++] = i;</span><br><span class="line"><span class="keyword">if</span>(i-k+<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[i-k+<span class="number">1</span>] = a[deq[s]];</span><br><span class="line"><span class="keyword">if</span>(deq[s] == i-k+<span class="number">1</span>)</span><br><span class="line">&#123;<span class="comment">//从双端队列的头部删除元素</span></span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n-k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%c"</span>,b[i],i==n-k?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;滑动最小值&lt;br&gt;给定一个长度为n的数列&lt;script type=&quot;math/tex&quot;&gt;a_0, a_1, \cdots, a_{n-1}&lt;/script&gt;和一个整数k。求数列$b&lt;em&gt;i = \min{a_i,a&lt;/em&gt;{i+1},\cdot
      
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="双端队列" scheme="https://fadedcosine.github.io/tags/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈的运用——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/07/03/The-Usage-of-Stack-Code-Challenging/"/>
    <id>https://fadedcosine.github.io/2019/07/03/The-Usage-of-Stack-Code-Challenging/</id>
    <published>2019-07-03T03:14:46.000Z</published>
    <updated>2019-07-03T09:05:09.673Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=2559" target="_blank" rel="noopener">POJ 2559: Largest Rectangle in a Histogram</a></p><blockquote><p>给定从左到右n个矩形，已知这此矩形的宽度都为1，长度不完全相等，为$h_1,h_2, \cdots, h_n$。这些矩形相连排成一排，求在这些矩形包括的范围内能得到的面积最大的矩形，打印出该面积。所求矩形可以横跨多个矩形，但不能超出原有矩形所确定的范围。<br>$1\le n \le 100000$<br><strong>输入</strong><br>7 2 1 4 5 1 3 3<br><strong>输出</strong><br>8</p></blockquote><a id="more"></a><p><img src="//fadedcosine.github.io/2019/07/03/The-Usage-of-Stack-Code-Challenging/2559_1.jpg" alt></p><p>从微软面试时学到的道理，拿到一个题目想想出最简单的算法，并能让这个算法能够成功地work。首先如果确定了长方形的左端点L和右端点R，那么最大可能的高度就是<script type="math/tex">\min \{ h_i | L \le i <R \}</script>。这样我们遍历L和R，在$[L,R)$中找最小的$h_i$这样naive的算法是$O(n^3)$的复杂度。对于区间的最小值做优化，比如说用尺取法那么就可以把复杂度降为$O(n^2)$。即使这样还是不能满足这道题的数据范围。</p><p>假设最大的长方形的左端是L，右端是R（左闭右开），高度是H，那么一定有<script type="math/tex">h_{L-1} <H</script>和$h_R&lt;H$，并且高度<script type="math/tex">H = \min \{h_i | L \le i < R \}</script>。因此，我们可以每次固定i，找到L和R，最后再遍历一遍找到$(R-L)\times H$的最大值。即我们维护两个数组L[i]和R[i],</p><ul><li>L[i] 是从i向左找，找到第一个小于h[i]的index，而后将这个index+1的值</li><li>R[i]是从i向右找，找到第一个小于h[i]的index （因为右边是开的，所以这个index不用减一）</li></ul><p>使用单调栈可以非常高效地求解这个问题。考虑计算L的情况。首先定义一个栈，并且将它初始化为空，然后不断增加i的值，并维护这个栈使它按照下面的顺序存储用于推算后面L值的元素：</p><ul><li>设在栈里的元素从上到下的值为<script type="math/tex">x_i</script>，则<script type="math/tex">x_i > x_{i+1}</script>且<script type="math/tex">h_{x_i} > h_{x_{i+1}}</script><br>也就是维护一个单调栈，维护一个单调栈的作用是，每次在计算L[i]时，我们实现看栈顶的元素j，如果j满足$h_j \ge h_i$，则不断取出栈顶元素（因为我们要找到第一个小于h[i]的index）；如果栈为空，说明找到头也没找到，那么L[i]=0，如果$h_j &lt; h_i$，则L[i]=j+1。然后把i压入栈中。</li></ul><p>由于栈的压入和弹出操作都是$O(n)$次，因此这个算法的复杂度就是$O(n)$，对于R[i]也可以用同样的方法计算。题解代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">100010</span>], R[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!= EOF &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">cin</span>&gt;&gt;h[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">while</span>(!left.empty() &amp;&amp; h[left.top()]&gt;=h[i]) left.pop();</span><br><span class="line">           L[i] = left.empty()? <span class="number">0</span> : (left.top() + <span class="number">1</span>);</span><br><span class="line">           left.push(i);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; right;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">while</span>(!right.empty() &amp;&amp; h[right.top()]&gt;=h[i]) right.pop();</span><br><span class="line">           R[i] = right.empty()? n : (right.top());</span><br><span class="line">           right.push(i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           res = max(res,(<span class="keyword">long</span> <span class="keyword">long</span>)(R[i] - L[i])*h[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener">接雨水</a></p><blockquote><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<br>输入: [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出: 6</p></blockquote><p><img src="//fadedcosine.github.io/2019/07/03/The-Usage-of-Stack-Code-Challenging/rainwatertrap.png" alt></p><p>因为要积水，来自于不少于两个柱子之间的高度关系。我们在遍历数组时维护一个栈。如果当前的柱子的高度小于或等于栈顶的柱子，我们将柱子的索引入栈，意思是当前这个柱子被栈中的前一个柱子界定。如果我们发现一个柱子的高度大于栈顶的柱子，我们可以确定栈顶的柱子被当前柱子和栈顶的前一个柱子界定，因此我们可以弹出栈顶元素，并且累加由当前柱子和栈顶的前一个柱子贡献出来的积水（当前柱子和栈顶柱子的高度差乘以当前柱子和栈顶的前一个柱子的宽度）到 ans ，直到栈为空或栈顶柱子不低于当前柱子，随后把当前柱子的索引入栈。</p><p>这样的做法与上述的POJ2559题目的想法有异曲同工之妙。同样是维护了一个单调栈，栈中元素上到下，对应的高度递增，像一个金字塔形。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; right;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!right.empty() &amp;&amp; height[right.top()]&lt;height[i]) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> top = height[right.top()];</span><br><span class="line">                right.pop();</span><br><span class="line">                <span class="keyword">if</span>(right.empty())<span class="keyword">break</span>;</span><br><span class="line">                ans += ((min(height[right.top()],height[i])-top) * (i-right.top()<span class="number">-1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            right.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><a href="https://leetcode-cn.com/problems/container-with-most-water" target="_blank" rel="noopener">盛水最多的容器</a></p><blockquote><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p></blockquote><p><img src="//fadedcosine.github.io/2019/07/03/The-Usage-of-Stack-Code-Challenging/question_11.jpg" alt></p><p>因为与上两题比较类似，我把这道题列在这儿。</p><p>要想围住的面积最大，需要尽量保证</p><ul><li>底边长比较大（两数在数组中的距离较远）</li><li>两数的最小值比较大<br>为了达到这两个目标，我们从底边长较大开始，定义两个变量 i，j 来记录两数的位置，并将其初始值置为 0 和 size-1。虽然此时底边长度最大，但由于这两条边可能都比较短，此时的面积很可能不是最大面积。现在的任务便是如何缩小底边的同时尽量获得最大的边长。</li></ul><p>不妨设此时两边边长不等，倘若将长的那一边移进，显然新的面积恒小于当前面积（因为限制当前面积的不是这条长的边，新的面积的底边长缩小，竖直边长不大于原边长）；因此要想获得更大的面积，只能移进那条较短的边。</p><p>按照这个思路，不断移进短的边，直到 i 和 j 相等，在移进的过程中记录最大边长即可。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator head=height.begin();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator tail=height.end()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxVoil = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=tail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> area = (tail - head) * ((*head&lt;*tail)? *head:*tail);</span><br><span class="line">            maxVoil = maxVoil&gt;area?maxVoil:area;</span><br><span class="line">            <span class="keyword">if</span>(*head &lt; *tail) head++;</span><br><span class="line">            <span class="keyword">else</span> tail--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxVoil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2559&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ 2559: Largest Rectangle in a Histogram&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定从左到右n个矩形，已知这此矩形的宽度都为1，长度不完全相等，为$h_1,h_2, \cdots, h_n$。这些矩形相连排成一排，求在这些矩形包括的范围内能得到的面积最大的矩形，打印出该面积。所求矩形可以横跨多个矩形，但不能超出原有矩形所确定的范围。&lt;br&gt;$1\le n \le 100000$&lt;br&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;br&gt;7 2 1 4 5 1 3 3&lt;br&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;br&gt;8&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="栈" scheme="https://fadedcosine.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>网络流解决问题——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/07/01/%E7%BD%91%E7%BB%9C%E6%B5%81%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/07/01/网络流解决问题——《挑战程序设计竞赛》/</id>
    <published>2019-07-01T08:40:05.000Z</published>
    <updated>2019-07-02T14:57:07.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-5-1-最大流"><a href="#3-5-1-最大流" class="headerlink" title="3.5.1 最大流"></a>3.5.1 最大流</h3><p>求解最大流的Ford-Fulkerson算法的邻接表实现的例子如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_V 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解最大流问题的基础代码</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to, cap, rev;&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V]; <span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">bool</span> used[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span>&#123;</span><br><span class="line">    <span class="comment">//第三个参数反向边是在G[to]中来自from边（反向边）的index。</span></span><br><span class="line">    G[from].push_back((edge)&#123;to,cap,G[to&#125;.size()&#125;);</span><br><span class="line">    <span class="comment">//因为刚刚from的邻接表中加了一个元素，所以要得到正确的反向边的index，就要减一</span></span><br><span class="line">    G[to].push_back((edge)&#123;from,<span class="number">0</span>,G[from&#125;.size()<span class="number">-1</span>&#125;) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v == t)<span class="keyword">return</span> f;</span><br><span class="line">    used[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge &amp;e = G[v][i];</span><br><span class="line">        <span class="keyword">if</span>(!used[e.to] &amp;&amp; e.cap &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> d = dfs(e.to, t, min(f.e.cap));</span><br><span class="line">            G[e.to][e.rev].cap += d;</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">int</span> f = dfs(s, t, INF);</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line">        flow += f;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>记最大流的流量为F，那么该算法最多进行F次深度优先搜索，所以其复杂度为$O(F|E|)$。不过，这是一个很松的上界，达到这种最坏复杂度的情况几乎不存在。</p><a id="more"></a><h3 id="3-5-7-应用问题"><a href="#3-5-7-应用问题" class="headerlink" title="3.5.7 应用问题"></a>3.5.7 应用问题</h3><p>（其中的应用多转化为二分图的最大匹配问题）</p><p><a href="http://poj.org/problem?id=3041" target="_blank" rel="noopener">Asteroids</a></p><blockquote><p>有一个N*N的网格,该网格有K个小行星.你有一把武器,每次你使用武器发射光束可以攻击该网格特定行或列，从而清除行或列上的所有小行星.问你最少需要使用多少次武器能清除网格的所有小行星?</p></blockquote><p>要破坏某个小行星，只能通过对应水平方向或者竖直方向的光束的攻击。利用攻击方法只有两种这一点，我们可以将问题按如下方法转换为图。</p><p>把光束当作图的顶点，而把小行星当作连接对应光束的边。这样转换之后，光束的攻击方案即对应一个顶点集合S，而要求攻击方案能够摧毁所有小行星，也就是图中的每条边都至少有一个属于S的端点，这样，这个问题就转化为了最小顶点覆盖问题。因为攻击方法只有两种，水平方向光束和竖直方向光束，那么这是一个二分图。最小覆盖问题通常是NP困难的，不过在二分图中等价于最大匹配问题，因而可以通过最大流算法高效地求解。</p><p>求解二分图的最大匹配问题可以看成是最大流问题的一种特殊情况。不妨对原图作如下变形：将原图中的所有无向边e改成有向边，方向从U到V（U和V是二分图中二分的顶点集），容量为1。增加源点s和汇点t，从s向所有顶点$u\in U$连一条容量为1的边，从所有的顶点$v\in V$向t连一条容量为1的边。</p><p>这样变形得到新图$G\prime$中的最大s-t流的流量就是原二分图G中最大匹配的匹配数，而U-V之间流量为正的边集合就是最大匹配。该算法的复杂度为$O(|V||E|)$。代码就是直接变形连线之后调用max_flow函数。下面给出基于匈牙利算法的二分图最大匹配数求解代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_V 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> V; <span class="comment">//顶点数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> match[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> used[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G[u].push_back(v);</span><br><span class="line">    G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    used[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = G[v][i], w = match[u];</span><br><span class="line">        <span class="keyword">if</span>(w&lt;<span class="number">0</span> || !used[w] &amp;&amp; dfs(w))</span><br><span class="line">        &#123;</span><br><span class="line">            match[v] = u;</span><br><span class="line">            match[u] = v;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bipartite_matching</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(match, <span class="number">-1</span>, <span class="keyword">sizeof</span>(match));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;V;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(match[v]&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">            <span class="keyword">if</span>(dfs(v))</span><br><span class="line">            &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, K;</span><br><span class="line">    <span class="keyword">int</span> R[<span class="number">10010</span>], C[<span class="number">10010</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;N&gt;&gt;K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;R[i]&gt;&gt;C[i];</span><br><span class="line">    &#125;</span><br><span class="line">    V = N*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        add_edge(R[i]<span class="number">-1</span>, N+C[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;bipartite_matching();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;3-5-1-最大流&quot;&gt;&lt;a href=&quot;#3-5-1-最大流&quot; class=&quot;headerlink&quot; title=&quot;3.5.1 最大流&quot;&gt;&lt;/a&gt;3.5.1 最大流&lt;/h3&gt;&lt;p&gt;求解最大流的Ford-Fulkerson算法的邻接表实现的例子如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAX_V 10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; INF 0x3f3f3f3f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//求解最大流问题的基础代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;edge&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to, cap, rev;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;edge&amp;gt; G[MAX_V]; &lt;span class=&quot;comment&quot;&gt;//邻接表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; used[MAX_V];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//第三个参数反向边是在G[to]中来自from边（反向边）的index。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    G[from].push_back((edge)&amp;#123;to,cap,G[to&amp;#125;.size()&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//因为刚刚from的邻接表中加了一个元素，所以要得到正确的反向边的index，就要减一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    G[to].push_back((edge)&amp;#123;from,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,G[from&amp;#125;.size()&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; f)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(v == t)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    used[v] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;G[v].size();i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edge &amp;amp;e = G[v][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!used[e.to] &amp;amp;&amp;amp; e.cap &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = dfs(e.to, t, min(f.e.cap));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            G[e.to][e.rev].cap += d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max_flow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flow = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(used, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(used));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; f = dfs(s, t, INF);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(f == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; flow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flow += f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;记最大流的流量为F，那么该算法最多进行F次深度优先搜索，所以其复杂度为$O(F|E|)$。不过，这是一个很松的上界，达到这种最坏复杂度的情况几乎不存在。&lt;/p&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="网络流" scheme="https://fadedcosine.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>熟练掌握动态规划——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/28/%E7%86%9F%E7%BB%83%E6%8E%8C%E6%8F%A1%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/28/熟练掌握动态规划——《挑战程序设计竞赛》/</id>
    <published>2019-06-28T11:59:16.000Z</published>
    <updated>2019-07-02T14:52:45.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-4-1-状态压缩DP"><a href="#3-4-1-状态压缩DP" class="headerlink" title="3.4.1 状态压缩DP"></a>3.4.1 状态压缩DP</h3><p>可能在一些DP的递推关系式中，下表不是普通的整数，但是我们可以把它编码成一个整数，或者给它们定义一个全序关系并用二叉搜索树存储，从而可以记忆化搜索来求解。</p><blockquote><p><strong>旅行商问题：</strong><br>给定一个n个顶点组成的带权有向图的距离矩阵d(I,j)（INF表示没有边）。要求从顶点0出发，经过每个顶点恰好一次后再回到顶点0。问所经过的边的总权值的最小值是多少？<br>$2\le n \le 15$<br>$0\le d(i,j) \le 1000$</p></blockquote><a id="more"></a><p>所有可能的路线共有(n-1)!种，就算此题的n很小也不能列举。</p><p>假设现在已经访问过的顶点的集合（起点0当作还未访问过的顶点）为S，当前所在的顶点为v，用dp[s][v]表示从v出发访问剩余所有顶点最终返回顶点0这一段路径的权值总和的最小值，则有如下的递推关系式：</p><script type="math/tex; mode=display">dp[V][0] = 0 \\dp[S][v] = \min\{dp[S\cup\{u\}][u]+d(v,u)|u\notin S\}</script><p>这个递归式中，S是一个集合而不是普通的整数，对于集合我们可以把每一个元素的选取与否对应到一个二进制位里，从而把状态压缩到一个整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;MAX_N][MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> S,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[S][v] &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[S][v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(S==(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span> &amp;&amp; v==<span class="number">0</span>)<span class="comment">//已经访问过所有节点并回到0号点，所以剩余的权值为0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[S][v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(S&gt;&gt;u &amp; <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">res = min(res,rec(S|<span class="number">1</span>&lt;&lt;u,u)+d[v][u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[S][v] = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rec(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外可以不用递归而从全序排列字典序倒叙来循环求解。而像这样针对集合的DP我们一般叫状态压缩DP。</p><hr><blockquote><p><strong>铺砖问题</strong><br>给定$n\times m$的格子，每个格子被染成了黑色或者白色。现在要用$1\times 2$的砖块覆盖这些格子，要求块与块之间不互相重叠，且覆盖了所有白色的格子，但不覆盖任意一个黑色格子。求一共有多少种覆盖方法，输出方案数对M取余后的结果。</p></blockquote><p>这道题的想法有点难理解昂。</p><p>索性不强行理解了，咱们根据代码来理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> M[<span class="number">17</span>][<span class="number">17</span>]; <span class="comment">//存初始化格子的颜色</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dp[used]:=(这个used是第二个参数，m个格子的枚举)从起始位置到当前的m个格子，都被覆盖的所有可能性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">1</span>&lt;&lt;<span class="number">15</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,mod;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m &amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;mod;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123; <span class="comment">//从0开始后面会好操作一点 </span></span><br><span class="line"><span class="keyword">char</span> input; <span class="built_in">cin</span>&gt;&gt;input;</span><br><span class="line"><span class="keyword">if</span>(input==<span class="string">'.'</span>) M[i][j]=<span class="number">0</span>; <span class="comment">//0:白 1：黑，将0全变为1 </span></span><br><span class="line"><span class="keyword">else</span> M[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *now=dp[<span class="number">0</span>],*nex=dp[<span class="number">1</span>];</span><br><span class="line">now[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">//从n-1 开始会方便二进制表示状态，我也不知道为什么就方便起来了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> used=<span class="number">0</span>;used&lt; (<span class="number">1</span>&lt;&lt;m) ;used++)&#123; <span class="comment">//遍历状态,这里反过来表示  </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为什么要遍历呢？看下面竖着放的代码有一个： res+=now[used|1&lt;&lt;j];</span></span><br><span class="line"><span class="comment">横着放也是一样，是从当前used的状态中新置1一个比特，因此需要！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(used&gt;&gt;j &amp; <span class="number">1</span> || M[i][j])&#123; <span class="comment">//假如这个位置被用了或者是1 不用填 就是不需要被覆盖呢，那么下一个处理的格子的可能性就等于这一个格子的可能性，这个格子的可能性也就对于这个格子没被覆盖的可能性，毕竟要递推过来的嘛。</span></span><br><span class="line">nex[used]=now[used &amp; ~(<span class="number">1</span>&lt;&lt;j)];  <span class="comment">//把第j这个位置上的比特置为0，也就是这个格子没被覆盖的意思</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于一个白色格子，那么覆盖它的可能性就等于横放的可能性（右边和它一起被覆盖）+竖放可能性（下边和它一起被覆盖）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>&lt;m &amp;&amp; !(used&gt;&gt;(j+<span class="number">1</span>)&amp;<span class="number">1</span>) &amp;&amp; !M[i][j+<span class="number">1</span>])&#123; <span class="comment">//横着放 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">j+1的原因是上面for循环是j--，   &lt;- 这个方向遍历的；</span></span><br><span class="line"><span class="comment">这个if的!(used&gt;&gt;(j+1)&amp;1) 条件是说j+1这个位置，也就是右边这个格子，在当前枚举的这种状态下没有被覆盖，因为只有右边这个格子没被覆盖，这下横着放，占了右边格子和当前格子才行，那为什么不能是j-1呢？因为j-1还没处理到，我的理解是不能影响后面还未处理的格子。那么这种可能性就等于右边和它一起被覆盖的可能性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">res+=now[used|<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>&lt;n &amp;&amp; !M[i+<span class="number">1</span>][j] )&#123; <span class="comment">//竖着放， 同理了，那么这种可能性就等于下边的格子和它一起被覆盖的可能性。</span></span><br><span class="line">res+=now[used|<span class="number">1</span>&lt;&lt;j];</span><br><span class="line">&#125;</span><br><span class="line">nex[used]=res%mod;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">swap(now,nex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now[<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3 100</span></span><br><span class="line"><span class="comment">. . .</span></span><br><span class="line"><span class="comment">. X .</span></span><br><span class="line"><span class="comment">. . .</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;3-4-1-状态压缩DP&quot;&gt;&lt;a href=&quot;#3-4-1-状态压缩DP&quot; class=&quot;headerlink&quot; title=&quot;3.4.1 状态压缩DP&quot;&gt;&lt;/a&gt;3.4.1 状态压缩DP&lt;/h3&gt;&lt;p&gt;可能在一些DP的递推关系式中，下表不是普通的整数，但是我们可以把它编码成一个整数，或者给它们定义一个全序关系并用二叉搜索树存储，从而可以记忆化搜索来求解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;旅行商问题：&lt;/strong&gt;&lt;br&gt;给定一个n个顶点组成的带权有向图的距离矩阵d(I,j)（INF表示没有边）。要求从顶点0出发，经过每个顶点恰好一次后再回到顶点0。问所经过的边的总权值的最小值是多少？&lt;br&gt;$2\le n \le 15$&lt;br&gt;$0\le d(i,j) \le 1000$&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="DP" scheme="https://fadedcosine.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>树状数组——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/28/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/28/树状数组——《挑战程序设计竞赛》/</id>
    <published>2019-06-28T03:46:32.000Z</published>
    <updated>2019-07-03T08:07:36.446Z</updated>
    
    <content type="html"><![CDATA[<p>树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。给一个初始值全为0的数列，$a_1, a_2, \cdots, a_n$，树状数组可以进行如下操作：</p><ul><li>给定i，计算$a_1+a_2+\cdots+a_i$</li><li>给定i和x，执行$a_i+=x$ </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。给一个初始值全为0的数列，$a_1, a_2, \cdots, a_n$，树状数组可以进行如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定
      
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="树状数组" scheme="https://fadedcosine.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>线段树——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/27/%E7%BA%BF%E6%AE%B5%E6%A0%91%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/27/线段树——《挑战程序设计竞赛》/</id>
    <published>2019-06-27T14:07:52.000Z</published>
    <updated>2019-07-02T14:55:10.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-3-1-线段树"><a href="#3-3-1-线段树" class="headerlink" title="3.3.1 线段树"></a>3.3.1 线段树</h3><p>线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点（并非完全二叉树！！！）。实际应用时一般还要开4N的数组以免越界。</p><p>线段树的构造代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxind = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> segTree[maxind * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[maxind]; </span><br><span class="line"><span class="comment">/* 构造函数，得到线段树 */</span></span><br><span class="line"><span class="comment">//区间为[begin, end]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (begin == end)  </span><br><span class="line">        segTree[node] = <span class="built_in">array</span>[begin]; <span class="comment">/* 只有一个元素,节点记录该单元素 */</span></span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;   </span><br><span class="line">    <span class="comment">/* 递归构造左右子树 */</span> </span><br><span class="line">        build(<span class="number">2</span>*node, begin, (begin+end)/<span class="number">2</span>);  </span><br><span class="line">        build(<span class="number">2</span>*node+<span class="number">1</span>, (begin+end)/<span class="number">2</span>+<span class="number">1</span>, end); </span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 回溯时得到当前node节点的线段信息，保存最小值 */</span>  </span><br><span class="line">    <span class="keyword">if</span> (segTree[<span class="number">2</span> * node] &lt;= segTree[<span class="number">2</span> * node + <span class="number">1</span>])  </span><br><span class="line">        segTree[node] = segTree[<span class="number">2</span> * node];  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        segTree[node] = segTree[<span class="number">2</span> * node + <span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = <span class="number">1</span>, <span class="built_in">array</span>[<span class="number">1</span>] = <span class="number">2</span>,<span class="built_in">array</span>[<span class="number">2</span>] = <span class="number">2</span>, <span class="built_in">array</span>[<span class="number">3</span>] = <span class="number">4</span>, <span class="built_in">array</span>[<span class="number">4</span>] = <span class="number">1</span>, <span class="built_in">array</span>[<span class="number">5</span>] = <span class="number">3</span>;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>线段树的主要操作包括区间查询（查询给定区间的最小值）和给定节点的更新。</p><p><strong>区间查询</strong> int query(int node, int begin, int end, int left, int right);<br>时间复杂度$O(\log n)$。<br>（其中node为当前查询节点，begin,end为当前节点存储的区间，left,right为此次query所要查询的区间，实际上我们只想要查询[left, right)的最小值其他的参数是为了计算方便传入的）<br>线段树区间查询的主要思想是把所要查询的区间[a,b]划分为线段树上的节点，然后将这些节点代表的区间合并起来得到所需信息：（对于节点存储对应区间最小值的线段树来说）</p><ul><li>如果所查询区间和当前节点对应的区间完全没有交集，那么就返回一个不影响答案的值</li><li>如果所查询的区间包含了当前节点对应的区间，那么就返回当前节点的值</li><li>以上两种情况都不满足的话，就对两个儿子递归处理，返回两个结果中的较小值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> p1, p2;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  查询区间和要求的区间没有交集  */</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt; end || right &lt; begin)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  if the current interval is included in  */</span>  </span><br><span class="line">    <span class="comment">/*  the query interval return segTree[node]  */</span></span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right)  </span><br><span class="line">        <span class="keyword">return</span> segTree[node];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  compute the minimum position in the  */</span></span><br><span class="line">    <span class="comment">/*  left and right part of the interval  */</span> </span><br><span class="line">    p1 = query(<span class="number">2</span> * node, begin, (begin + end) / <span class="number">2</span>, left, right); </span><br><span class="line">    p2 = query(<span class="number">2</span> * node + <span class="number">1</span>, (begin + end) / <span class="number">2</span> + <span class="number">1</span>, end, left, right);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  return the expect value  */</span> </span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="number">-1</span>)  </span><br><span class="line">        <span class="keyword">return</span> p2;  </span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="number">-1</span>)  </span><br><span class="line">        <span class="keyword">return</span> p1;  </span><br><span class="line">    <span class="keyword">if</span> (p1 &lt;= p2)  </span><br><span class="line">        <span class="keyword">return</span>  p1;  </span><br><span class="line">    <span class="keyword">return</span>  p2;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>单节点更新</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Updata</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> ind, <span class="keyword">int</span> add)</span><span class="comment">/*单节点更新*/</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>( begin == end )  </span><br><span class="line">    &#123;  </span><br><span class="line">        segTree[node] += add;  </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> m = ( left + right ) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(ind &lt;= m)  </span><br><span class="line">        Updata(node * <span class="number">2</span>,left, m, ind, add);  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        Updata(node * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, right, ind, add);  </span><br><span class="line">    <span class="comment">/*回溯更新父节点*/</span>  </span><br><span class="line">    segTree[node] = min(segTree[node * <span class="number">2</span>], segTree[node * <span class="number">2</span> + <span class="number">1</span>]);   </span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><a href="http://poj.org/problem?id=2991" target="_blank" rel="noopener">Crane</a></p><blockquote><p>有n根长度不尽相同的棍子，初始时它们首尾垂直相连，标号为1—n，第一根棍子的下端坐标为(0,0),上端坐标为(0,len[1]),其余棍子依次类推。接下来执行C此旋转，每次输入一个编号num和角度rad，使得第num根棍子和第num+1跟棍子间的逆时针角度变为rad度，求每次旋转后第n根棍子端点的坐标。</p></blockquote><p>解题思路源于[<a href="https://www.cnblogs.com/staginner/archive/2012/04/07/2436436.html" target="_blank" rel="noopener">https://www.cnblogs.com/staginner/archive/2012/04/07/2436436.html</a>]</p><p>如果我们将其中某一个线段旋转β角，那么这个线段上方的所有线段都会旋转β角，这就很类似线段树中的对区间加上一个常数的问题了，于是不妨向着线段树的思路去想。</p><p>接下来一个问题就是β角是相对于谁的，换句话说我们所谓的每个线段都会旋转β角，那么是绕谁旋转的？实际上，如果我们局限于把线段的旋转就会看成是绕某个定点的，这个点就是我们旋转的线段和它下面那个不动的线段的交点，再这样想下去我们就没法处理了，因为每个旋转操作所绕的定点不是唯一的，我们没办法把所有的旋转操作都统一到一起，那么我们就没办法把旋转操作叠加，这样就没法使用线段树了。</p><p>但如果换个思路的话，实际上β角还等于这个线段旋转后所在的直线和未旋转前所在的直线的夹角，而直线的夹角是可以用向量的夹角表示的，如果我们把线段看成一个向量的话那么β角就是这个向量旋转的角度。如果这么看的话，所有的旋转操作就可以统一到一起了，也可以叠加了，因为这样不会局限于绕哪个定点，只需要把向量自身旋转一下就OK。</p><p>那么我们维护下面两个值：</p><ul><li>把对应线段集合转到垂直方向（也就是整体旋转，让第一条线段垂直之后，注意并不是单独旋转第一条线段），从第一条线段的起点指向最后一条线段的终点的向量。</li><li>（如果该节点有儿子节点）两个儿子节点对应的部分连接之后，右儿子需要转动的角度（因为s和s+1的角度改变，如果s在左儿子中，那么在全局坐标系内，右儿子也会相应的需要旋转改变坐标）</li></ul><p>也就是说，如果节点i表示的向量是$vx_i, vy_i$，角度是$ang_i$，两个儿子节点是chl和chr，那么就有：</p><script type="math/tex; mode=display">vx_i = vx_{chl}+(\cos(ang_i)\times vx_{chr} - \sin(ang_i)\times vy_{chr}) \\vy_i = vy_{chl}+(\sin(ang_i)\times vx_{chr} + \cos(ang_i)\times vy_{chr})</script><p>对向量旋转的解释可参照[<a href="https://www.2cto.com/kf/201610/556382.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201610/556382.html</a>]</p><p><img src="//fadedcosine.github.io/2019/06/27/线段树——《挑战程序设计竞赛》/rotation.png" alt></p><p>这样每次更新可在$O(\log n)$的时间内完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxind = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[maxind];</span><br><span class="line"><span class="keyword">int</span> S[maxind], A[maxind];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> vx[maxind * <span class="number">4</span> + <span class="number">10</span>], vy[maxind * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> ang[maxind * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> prv[maxind];</span><br><span class="line"><span class="comment">/* 构造函数，得到线段树 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">ang[node] = vx[node] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (begin == end)  </span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;vy[node];</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;   </span><br><span class="line">    <span class="comment">/* 递归构造左右子树 */</span> </span><br><span class="line">        build(<span class="number">2</span>*node, begin, (begin+end)/<span class="number">2</span>);  </span><br><span class="line">        build(<span class="number">2</span>*node+<span class="number">1</span>, (begin+end)/<span class="number">2</span>+<span class="number">1</span>, end); </span><br><span class="line"><span class="comment">/* 回溯时得到当前node节点的线段信息，保存最小值 */</span>  </span><br><span class="line">    vy[node] = vy[<span class="number">2</span>*node] + vy[<span class="number">2</span>*node+<span class="number">1</span>];</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">double</span> a, <span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s&lt;begin) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(begin == s &amp;&amp; begin == end) <span class="comment">//区间只用一个棍子的情况</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s &lt; end)&#123; </span><br><span class="line"><span class="keyword">int</span> chl = node*<span class="number">2</span>, chr = node*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (begin+end)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">change(s,a,chl,begin,mid);</span><br><span class="line">change(s,a,chr,mid+<span class="number">1</span>,end);</span><br><span class="line"><span class="keyword">if</span>(s&lt;=mid) ang[node]+=a; <span class="comment">//(1, pi/2, 1, 1, 2) 这时mid就为1，s也为1，是最细粒度的情况，需要给ang赋值 </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        s&lt;=m，s在左儿子中，那么右边的线段也会因为s和s+1的角度改变而全局的坐标发生改变，当前这个节点node左右儿子之间的角度也会发生变化（变化a），所以是if(s&lt;=mid) ang[node]+=a，之后根据变化后的角度，改变当前node维护的vx和vy</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">double</span> sine = <span class="built_in">sin</span>(ang[node]), cosine = <span class="built_in">cos</span>(ang[node]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;"sine is "&lt;&lt;sine&lt;&lt;", cosine is "&lt;&lt;cosine&lt;&lt;endl;</span></span><br><span class="line">vx[node] = vx[chl] + (cosine * vx[chr] - sine * vy[chr]);</span><br><span class="line">vy[node] = vy[chl] + (sine * vx[chr] + cosine * vy[chr]); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N, C;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;C) == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;C;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;S[i]&gt;&gt;A[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++) prv[i] = PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;C;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = S[i];</span><br><span class="line"><span class="keyword">double</span> a = A[i] / <span class="number">180.0</span> *PI;</span><br><span class="line"></span><br><span class="line">change(s,a-prv[s], <span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">prv[s] = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f %.2f\n"</span>, vx[<span class="number">1</span>], vy[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>线段树区间更新</strong><br><a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">A Simple Problem with Integers</a></p><blockquote><p>给N个数$A_1, A_2, … , A_n$. 你需要处理两种操作，一种操作是在一个区间上每个数都增加一个数，别一种操作是查询一个区间所有数的和</p></blockquote><p>以目前仅有的单节点更新很难高效滴实现对一个区间同时加一个值，所以我们改进线段树，对每个节点我们维护一下两个数据：</p><ul><li>a. 给这个节点对应的区间内的所有元素共同加上的值</li><li>b. 在这个节点对应的区间中除去a（a就是上面那个a）之外所有其他值的和<br>如果对于父节点同时加上了一个值，那么这个值就不会在儿子节点被重复考虑，而是在递归计算和的时候再把这一部分的值加到结果中。这样无论是同时加一个值还是查询一段的和复杂度都是$O(\log n)$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL sum[maxn&lt;&lt;<span class="number">2</span>], add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[root] = sum[root&lt;&lt;<span class="number">1</span>] + sum[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">add[root] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;sum[root]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Build(l,m,root&lt;&lt;<span class="number">1</span>);</span><br><span class="line">Build(m+<span class="number">1</span>,r,root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(add[root])</span><br><span class="line">    &#123;</span><br><span class="line">        add[root&lt;&lt;<span class="number">1</span>]+=add[root];</span><br><span class="line">        add[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[root];</span><br><span class="line">        sum[root&lt;&lt;<span class="number">1</span>]+=(m-(m&gt;&gt;<span class="number">1</span>))*add[root];</span><br><span class="line">        sum[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=(m&gt;&gt;<span class="number">1</span>)*add[root];</span><br><span class="line">        add[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c,<span class="keyword">int</span> l,<span class="keyword">int</span> r, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        add[root]+=c;</span><br><span class="line">        sum[root]+=(LL)c*(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(root,r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=m)</span><br><span class="line">        Update(L,R,c,l,m,root&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;m)</span><br><span class="line">        Update(L,R,c,m+<span class="number">1</span>,r,root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class="line"><span class="keyword">return</span> sum[root];</span><br><span class="line">PushDown(root,r-l+<span class="number">1</span>); <span class="comment">//在查询和的时候在调用PushDown，把保存在add数组中的值加到sum数组的结果之中。</span></span><br><span class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=m) res += Query(L,R,l,m,root&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R&gt;m) res += Query(L,R,m+<span class="number">1</span>,r,root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    Build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,Query(a,b,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            Update(a,b,c,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-分桶法和平方分割"><a href="#3-3-3-分桶法和平方分割" class="headerlink" title="3.3.3 分桶法和平方分割"></a>3.3.3 分桶法和平方分割</h3><p>分桶法是把一排物品或者平面分成桶，每个桶分别维护自己内部的信息，以达到高效计算的目的。</p><p>其中平方分割是把排成一排的n个元素每个$\sqrt{n}$个分在一个桶内进行维护的方法的统称。这样的分割方法可以使区间的操作的复杂度降至$O(\sqrt{n})$。</p><p>水平分割法相比于线段树实现上要简单，单多数情况下线段树会比水平分割快。</p><p><a href="http://poj.org/problem?id=2104" target="_blank" rel="noopener">K-th Number</a></p><blockquote><p>给出一个长度为n的序列a，给出m次查询，每次查询区间[l,r]中第k大的数是什么</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;3-3-1-线段树&quot;&gt;&lt;a href=&quot;#3-3-1-线段树&quot; class=&quot;headerlink&quot; title=&quot;3.3.1 线段树&quot;&gt;&lt;/a&gt;3.3.1 线段树&lt;/h3&gt;&lt;p&gt;线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点（并非完全二叉树！！！）。实际应用时一般还要开4N的数组以免越界。&lt;/p&gt;
&lt;p&gt;线段树的构造代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxind = &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; segTree[maxind * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[maxind]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 构造函数，得到线段树 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//区间为[begin, end]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; node, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; begin, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; end)&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (begin == end)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        segTree[node] = &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[begin]; &lt;span class=&quot;comment&quot;&gt;/* 只有一个元素,节点记录该单元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;/* 递归构造左右子树 */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        build(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*node, begin, (begin+end)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        build(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*node+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, (begin+end)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, end); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/* 回溯时得到当前node节点的线段信息，保存最小值 */&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (segTree[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * node] &amp;lt;= segTree[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * node + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        segTree[node] = segTree[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * node];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        segTree[node] = segTree[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * node + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	build(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="线段树" scheme="https://fadedcosine.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>常用技巧精选(一)——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/27/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E7%B2%BE%E9%80%89%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/27/常用技巧精选——《挑战程序设计竞赛》/</id>
    <published>2019-06-27T03:31:23.000Z</published>
    <updated>2019-07-02T14:54:28.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-常用技巧精选（一）"><a href="#3-2-常用技巧精选（一）" class="headerlink" title="3.2 常用技巧精选（一）"></a>3.2 常用技巧精选（一）</h2><h3 id="3-2-1-尺取法"><a href="#3-2-1-尺取法" class="headerlink" title="3.2.1 尺取法"></a>3.2.1 尺取法</h3><p><a href="http://poj.org/problem?id=3061" target="_blank" rel="noopener">Subsequence</a></p><blockquote><p>给出N个数字：<script type="math/tex">a_0, a_1, \cdots, a_{n-1}</script>，每个数字不大于10000，给出一个整数S，在N个数字中挑选出连续子序列，使这个子序列和大于或等于S。请问这个连续的子序列长度的最小值。</p></blockquote><p>我们设以<script type="math/tex">a_s</script>开始总和最初大于S时的连续子序列为<script type="math/tex">a_s+\cdots+a_{t-1}</script>，这时</p><script type="math/tex; mode=display">a_{s+1}+\cdots+a_{t-2} < a_s+\cdots+a_{t-2} < S</script><p>所以从$a_{s+1}$开始总和最初超过S的连续子序列如果是$a_{s+1}+\cdots+a_{t\prime-1}$的话，必然有$t\le t\prime$。利用这一性质便可以设计如下算法：<br>(1) 以s=t=sum=0初始化。<br>(2) 只要依然有sum&lt;S，就不断将sum增加$a_t$，并将t增加1.<br>(3) 如果(2)中无法满足sum$\ge$S则终止。否则的话，更新res=min(res,t-s)。<br>(4) 将sum减去$a_s$，s增加1然后回到(2)。</p><p>对于这个算法，因为t最多变化n次，因此只需O(n)的复杂度就可以求解这个问题了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,S;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;S;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, t = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(t&lt;n &amp;&amp; sum&lt;S)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += a[t++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; S) <span class="keyword">break</span>;</span><br><span class="line">            res = min(res,t-s);</span><br><span class="line">            sum -= a[s++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res &gt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="3-2-2-反转（开关问题）"><a href="#3-2-2-反转（开关问题）" class="headerlink" title="3.2.2 反转（开关问题）"></a>3.2.2 反转（开关问题）</h3><p><a href="http://poj.org/problem?id=3276" target="_blank" rel="noopener">Face The Right Way</a></p><blockquote><p>N头牛排成一列，头要么朝前要么朝后，现在要求确定一个连续反转牛头的连续区间，区间长度为K，要使得所有牛都朝前，且反转次数M尽可能小。求出最小的操作数M和对应的最小的K。</p></blockquote><p>首先，交换区间反转顺序的先后对结果毫无影响。此外，可以知道对同一个区间进行两次以上的反转是多余的，由此，问题就转化成了求需要被反转的区间的集合。于是我们先考虑一下最左端的牛。包含这头牛的区间只有一个，因此如果这头牛面朝前方，我们就能知道这个区间不需要反转。反之，如果这头牛面朝后方，对应的区间就必须进行反转了。而且在此之后这个最左的区间就再也不需要考虑了。这样一来，通过首先考虑最左端的牛，问题的规模就缩小了1。不断的重复下去，就可以无需搜索求出最少所需的反转次数了。</p><p>然而，我们需要遍历K，对于每个K我们都要从最左端开始考虑N头牛的情况，最坏情况需要进行N-K+1次的反转操作，而每次操作又要反转K头牛，所以总的复杂度是$O(N^3)$。</p><p>对于区间反转部分进行优化：优化的方法是计算第i头牛是否要翻转的时候，只需要知道第i-k+1头到第i头之间的翻转次数，那么维护这个次数即可。</p><script type="math/tex; mode=display">f[i]:=区间[i,i+K-1]进行了反转的话则为1，否则为0</script><p>这样，在考虑第i头年时，如果$\sum_{j=i-K+1}^{i-1}f[j]$为奇数的话，则这头牛的方向与起始方向是相反的，否则方向不变。依据如下公式</p><script type="math/tex; mode=display">\sum_{j=(i+1)-K+1}^{i}f[j] = \sum_{j=i-K+1}^{i-1}f[j]+f[i]-f[i-K+1]</script><p>使用尺取法，每次向右移动一格，需要看看左边出去的那格（第i-k格）是翻转了没有，维护好f数组即可。这样扫一遍的复杂度是$O(n)$，那么总复杂度就是$O(n^2)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dir[M];</span><br><span class="line"><span class="keyword">int</span> f[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//当前维护的f的和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+K&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((dir[i]+sum) % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line"><span class="comment">//最前端的牛面朝后方</span></span><br><span class="line">&#123;</span><br><span class="line">res++;</span><br><span class="line">f[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += f[i];</span><br><span class="line"><span class="keyword">if</span>(i-K+<span class="number">1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum -= f[i-K+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查剩下的牛，从n-K+1开始，是否有面朝后方的情况</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-K+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((dir[i]+sum)%<span class="number">2</span>!=<span class="number">0</span>) <span class="comment">//无解 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i-K+<span class="number">1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">sum-=f[i-K+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">dir[i]=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dir[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="http://poj.org/problem?id=3279" target="_blank" rel="noopener">Fliptile</a></p><blockquote><p>有一个m*n的棋盘，每个格子上是0或1，每次可以对一个格子做一次翻转操作，将被操作的格子和上下左右4个格子的0/1翻转。问做少做多少次翻转可以将所有格子翻转成0，输出翻转方案。没有方案时输出“IMPOSSIBLE”。<br>$1\le m, n \le 15$</p></blockquote><p>回顾一下前情，在之前POJ3276问题中，让最左边的牛反转的方法只有1种，可以直接判断当前的方案是否可行。然而，同样的方法在此题中不能行得通。不妨看最左上角的格子，这里除了翻转(1,1)之外，翻转(1,2)和(2,1)都可以把这个格子翻转，所以之前的直接确定的方法在此行不通。</p><p>值得注意的一点是这题中的m，n特别小，简直就是在明示可以有某种枚举的方法。因为本题格子间的状态都是互相影响的，只能通过枚举第一行，逐行往下搜，如何搜索：如果从上到下搜索，<strong>当前行是否需要反转取决于上一行的状态，通过翻转当前行使上一行为0，而不是通过上一行翻转为0后，看当前行的状态判断自己是否需要翻转，否则还会继续影响上一行。</strong>意思就是不是在当前行中的翻转操作不是为了让当前行中的所有格子都为0，而是要让上一行的所有格子都为0。所以我们可以通过枚举第一行所有的状态，从第二行开始确定翻转状态，直到最后一行结束，如果可以保证最后一行都是0，那么方案可行，否则重新定义第一行的状态，继续搜索，找出使反转次数最少的方案。</p><h3 id="3-2-4-折半枚举（双向搜索）"><a href="#3-2-4-折半枚举（双向搜索）" class="headerlink" title="3.2.4 折半枚举（双向搜索）"></a>3.2.4 折半枚举（双向搜索）</h3><blockquote><p><strong>超大背包问题</strong><br>有重量和价值分别为$w_i, v_i$的n个物品，从这些物品中挑选总重量不超过W的物品，求所有挑选方案中价值总和的最大值<br>限制条件：$1 \le n \le 40, 1\le w_i, v_i \le 10^{15}, 1 \le W \le 10^{15} $</p></blockquote><p>所谓超大背包问题，W的最大值是$10^15$，使用DP来求解背包问题的复杂度是$O(nW)$，因此不能解决这里的问题。但是n比较小，依此寻求枚举解法。</p><p>从所有物品里挑选的全排列的数量为$2^n$中，在这里虽然n很小，但是$2^40$依然顶不住，所以我们想到折半枚举，把物品拆成两半再枚举。我们把前半部分中枚举出的重量和价值总和记为$w_1、 v_1$。这样在后半部分寻找总重$w_2\le W-w_1$时使$v_2$最大的选取方法就好了。</p><p>接着我们考虑从枚举得到的$(w_2,v_2)$的集合中高效寻找$max{v_2|w_2 \le W\prime}$的方法。在代码中当然使用pair这个数据结构来维护重量和价值对，那么我们根据重量排序之后可以排除所有$w_2[i] \le w_2[j]$并且$v_2[i] \ge v_2[j]$的j。接下来只要寻找$w_2[i] \le W\prime$的最大的i就可以了。使用二分搜索完成，剩余元素的个数为M（$M\le 2^{(n/2)}$）的话，一次搜素需要$O(\log M)$，所以这个算法的总复杂度是$O(2^{(n/2)}n)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll w[MAX_N], v[MAX_N];</span><br><span class="line">ll W;</span><br><span class="line"></span><br><span class="line">pair&lt;ll,ll&gt; ps[<span class="number">1</span> &lt;&lt; (MAX_N / <span class="number">2</span>)]; <span class="comment">// (重量，价值)对</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//枚举前半部分</span></span><br><span class="line"><span class="keyword">int</span> n2 = n / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;n2;i++)</span><br><span class="line">&#123;</span><br><span class="line">ll sw = <span class="number">0</span>, sv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;&gt;j &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sw += w[j];</span><br><span class="line">sv += v[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps[i] = make_pair(sw,sv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去除多余元素</span></span><br><span class="line">sort(ps, ps+(<span class="number">1</span>&lt;&lt;n2));</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1</span>&lt;&lt;n2;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ps[m<span class="number">-1</span>].second &lt; ps[i].second)</span><br><span class="line">&#123;</span><br><span class="line">ps[m++] = ps[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举后半部分并求解</span></span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;(n-n2);i++)</span><br><span class="line">&#123;</span><br><span class="line">ll sw = <span class="number">0</span>, sv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-n2;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;&gt;j &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sw += w[n2+j];</span><br><span class="line">sv += v[n2+j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sw &lt;= W)</span><br><span class="line">&#123;</span><br><span class="line">ll tv = (lower_bound(ps,ps+m,make_pair(W-sw,INF))<span class="number">-1</span>)-&gt;second;</span><br><span class="line">res = max(res, sv + tv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-坐标离散化"><a href="#3-2-5-坐标离散化" class="headerlink" title="3.2.5 坐标离散化"></a>3.2.5 坐标离散化</h3><blockquote><p>w*h的格子上画了n条垂直或水平的宽度为1的直线。求出这些线将格子划分成了多少个区域。<br>1&lt;=w,h&lt;=1000000.     1&lt;=n&lt;=500<br>样例：<br>w = 10, h = 10, n = 5<br>x1 = {1, 1, 4, 9, 10}<br>x2 = {6, 10, 4, 9, 10}<br>y1 = {4, 8, 1, 1, 6}<br>y2 ={4, 8, 10, 5, 10}</p></blockquote><p>理解了半天这个样例，意思是( (x1, y1), (x2, y2) )是一条直线。一般求解被分割出的区域的个数使用图的遍历如DFS和BFS算法，需要$w\times h$，但是这个问题中w和h最大为1000000，所以没办法创建出$w\times h$的数组，所以需要使用坐标离散化技巧。</p><p>数组里只需要存储有直线的行列以及前后的行列就足够了，这样的话大小最多$6n \times 6n$就足够了（x1的自己、前后，3个，x2的自己、前后，3个，因此则有 $6n \times 6n$）。创建出数组并利用搜索求出区域的个数。<strong>（区域可能很大，所以用递归函数实现的话可能会栈溢出，所以在下列代码实现中不用DFS而用BFS）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">int</span> W, H, N</span><br><span class="line"><span class="keyword">int</span> X1[MAX_N], X2[MAX_N], Y1[MAX_N], Y2[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> fld[MAX_N*<span class="number">6</span>][MAX_N*<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;, dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compress</span><span class="params">(<span class="keyword">int</span> *x1, <span class="keyword">int</span> *x2; <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xs;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">-1</span>;d&lt;=<span class="number">1</span>;d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tx1 = x1[i] + d, tx2 = x2[i] + d;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>&lt;=tx1 &amp;&amp; tx1&lt;=w) xs.push_back(tx1);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>&lt;=tx2 &amp;&amp; tx2&lt;=w) xs.push_back(tx2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(xs.begin(),xs,end());</span><br><span class="line">xs.erase(unique(x.begin(),xs.end()),xs.end()); <span class="comment">//去重</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) <span class="comment">//重新建立x1, x2的值</span></span><br><span class="line">&#123;</span><br><span class="line">x1[i] = find(xs.begin(),xs.end(),x1[i]) - xs.begin();</span><br><span class="line">x2[i] = find(xs.begin(),xs.end(),x2[i]) - xs.begin();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xs.size(); <span class="comment">//因为有去重，所以不慌</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">W = compress(X1,X2,W);</span><br><span class="line">H = compress(Y1,Y2,H);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(fld, <span class="number">0</span>, <span class="keyword">sizeof</span>(fld));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=Y1[i];y&lt;=Y2[i];y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=X1[i];x&lt;=X2[i];x++)</span><br><span class="line">&#123;</span><br><span class="line">fld[y][x] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;H;y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;W;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fld[y][x]) <span class="keyword">continue</span>;</span><br><span class="line">ans++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; que;</span><br><span class="line">que.push(make_pair(x,y));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sx = que.front().first(), sy = que.front().second();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tx = sx + dx[i], ty = sy + dy[i];</span><br><span class="line">que.push(make_pair(tx,ty));</span><br><span class="line">fld[ty][tx] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3-2-常用技巧精选（一）&quot;&gt;&lt;a href=&quot;#3-2-常用技巧精选（一）&quot; class=&quot;headerlink&quot; title=&quot;3.2 常用技巧精选（一）&quot;&gt;&lt;/a&gt;3.2 常用技巧精选（一）&lt;/h2&gt;&lt;h3 id=&quot;3-2-1-尺取法&quot;&gt;&lt;a href=&quot;#3-2-1-尺取法&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 尺取法&quot;&gt;&lt;/a&gt;3.2.1 尺取法&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3061&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Subsequence&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给出N个数字：&lt;script type=&quot;math/tex&quot;&gt;a_0, a_1, \cdots, a_{n-1}&lt;/script&gt;，每个数字不大于10000，给出一个整数S，在N个数字中挑选出连续子序列，使这个子序列和大于或等于S。请问这个连续的子序列长度的最小值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们设以&lt;script type=&quot;math/tex&quot;&gt;a_s&lt;/script&gt;开始总和最初大于S时的连续子序列为&lt;script type=&quot;math/tex&quot;&gt;a_s+\cdots+a_{t-1}&lt;/script&gt;，这时&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
a_{s+1}+\cdots+a_{t-2} &lt; a_s+\cdots+a_{t-2} &lt; S&lt;/script&gt;&lt;p&gt;所以从$a_{s+1}$开始总和最初超过S的连续子序列如果是$a_{s+1}+\cdots+a_{t\prime-1}$的话，必然有$t\le t\prime$。利用这一性质便可以设计如下算法：&lt;br&gt;(1) 以s=t=sum=0初始化。&lt;br&gt;(2) 只要依然有sum&amp;lt;S，就不断将sum增加$a_t$，并将t增加1.&lt;br&gt;(3) 如果(2)中无法满足sum$\ge$S则终止。否则的话，更新res=min(res,t-s)。&lt;br&gt;(4) 将sum减去$a_s$，s增加1然后回到(2)。&lt;/p&gt;
&lt;p&gt;对于这个算法，因为t最多变化n次，因此只需O(n)的复杂度就可以求解这个问题了。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;100010&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(t--&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,S;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;n&amp;gt;&amp;gt;S;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, t = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(t&amp;lt;n &amp;amp;&amp;amp; sum&amp;lt;S)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += a[t++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum &amp;lt; S) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res = min(res,t-s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum -= a[s++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res &amp;gt; n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;res&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="尺取法" scheme="https://fadedcosine.github.io/tags/%E5%B0%BA%E5%8F%96%E6%B3%95/"/>
    
      <category term="开关问题" scheme="https://fadedcosine.github.io/tags/%E5%BC%80%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    
      <category term="坐标离散化" scheme="https://fadedcosine.github.io/tags/%E5%9D%90%E6%A0%87%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数学问题的解题窍门——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/26/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E9%A2%98%E7%AA%8D%E9%97%A8%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/26/数学问题的解题窍门——《挑战程序设计竞赛》/</id>
    <published>2019-06-26T02:48:19.000Z</published>
    <updated>2019-07-02T14:55:43.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-6-2-有关素数的基础算法"><a href="#2-6-2-有关素数的基础算法" class="headerlink" title="2.6.2 有关素数的基础算法"></a>2.6.2 有关素数的基础算法</h3><p>埃氏筛法</p><blockquote><p>素数的个数：<br>给定整数n，请问n以内有多少个素数？</p></blockquote><p>首先将2到n范围内的所有整数写下来，其中最小的数字2是素数，将表中所有2的倍数都划去，表中剩余的最小数字是3，它不能被更小的数整除，所以是素数，再将所有3的倍数划去。以此类推：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[MAX_N]; <span class="comment">//第i个素数</span></span><br><span class="line"><span class="keyword">bool</span> is_prime[MAX_N + <span class="number">1</span>];</span><br><span class="line"><span class="comment">//返回n以内素数的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)is_prime[i]=<span class="literal">true</span>;</span><br><span class="line">is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_prime[i])</span><br><span class="line">&#123;</span><br><span class="line">prime[p++] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;=n;j+=i) is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>埃氏筛法的复杂度仅有$O(n\log\log n)$。</p><a id="more"></a><h3 id="2-6-4快速幂运算"><a href="#2-6-4快速幂运算" class="headerlink" title="2.6.4快速幂运算"></a>2.6.4快速幂运算</h3><p>[<a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=947" target="_blank" rel="noopener">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=947</a>]:     “Carmicheal Numbers”</p><blockquote><p>我们把对任意的1&lt;x&lt;n都有$x^n\equiv x(mod n)$成立的合数n称为Carmichael Numbers。对于给定的整数n，判断它是不是Carmichael Number。</p></blockquote><p>考虑加速幂运算的方法，如果$n=x^k$，可以将其表示为</p><script type="math/tex; mode=display">x^n = ((x^2)^2) \cdots</script><p>只要做k次平方运算就可以轻松求得。因此我们可以先将n表示成2的幂次的和：</p><script type="math/tex; mode=display">n = 2^{k_1} + 2^{k_2} + 2^{k_2} + \cdots</script><p>就有：</p><script type="math/tex; mode=display">x^n = x^{2^{k_1}}x^{2^{k_2}}x^{2^{k_3}}\cdots</script><p>只要依此求$x^{2^{k_i}}$，最终可以得到$O(\log n)$的计算幂运算的复杂度。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x, ll n, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) res = res * x % mod;</span><br><span class="line">x = x * x % mod;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在遍历n，即可得解，复杂度为$O(n\log n)$。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-6-2-有关素数的基础算法&quot;&gt;&lt;a href=&quot;#2-6-2-有关素数的基础算法&quot; class=&quot;headerlink&quot; title=&quot;2.6.2 有关素数的基础算法&quot;&gt;&lt;/a&gt;2.6.2 有关素数的基础算法&lt;/h3&gt;&lt;p&gt;埃氏筛法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;素数的个数：&lt;br&gt;给定整数n，请问n以内有多少个素数？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先将2到n范围内的所有整数写下来，其中最小的数字2是素数，将表中所有2的倍数都划去，表中剩余的最小数字是3，它不能被更小的数整除，所以是素数，再将所有3的倍数划去。以此类推：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; prime[MAX_N]; &lt;span class=&quot;comment&quot;&gt;//第i个素数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; is_prime[MAX_N + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回n以内素数的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;=n;i++)is_prime[i]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	is_prime[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = is_prime[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(is_prime[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			prime[p++] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i;j&amp;lt;=n;j+=i) is_prime[j] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;埃氏筛法的复杂度仅有$O(n\log\log n)$。&lt;/p&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="素数相关" scheme="https://fadedcosine.github.io/tags/%E7%B4%A0%E6%95%B0%E7%9B%B8%E5%85%B3/"/>
    
      <category term="快速幂" scheme="https://fadedcosine.github.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>图算法——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/25/%E5%9B%BE%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/25/图算法——《挑战程序设计竞赛》/</id>
    <published>2019-06-25T08:37:59.000Z</published>
    <updated>2019-07-02T14:56:25.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-5-2-图的表示"><a href="#2-5-2-图的表示" class="headerlink" title="2.5.2 图的表示"></a>2.5.2 图的表示</h3><p>邻接表可以直接用如下代码表示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; graph[MAX_V] 来表示邻接表 </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">边上有属性的情况：</span></span><br><span class="line"><span class="comment">struct edge &#123;int to, cost;&#125;</span></span><br><span class="line"><span class="comment">vector&lt;edge&gt; G[MAX_V];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-5-4-最短路问题"><a href="#2-5-4-最短路问题" class="headerlink" title="2.5.4 最短路问题"></a>2.5.4 最短路问题</h3><h4 id="1-单源最短路问题"><a href="#1-单源最短路问题" class="headerlink" title="1. 单源最短路问题"></a>1. 单源最短路问题</h4><p><strong>Bellman-Ford算法</strong><br>记从起点s出发到顶点i的最短距离为d[i]，则下述等式成立：</p><script type="math/tex; mode=display">d[i] = \min\{d[j]+(从j到i的边的权值| e=(j,i)\in E\}</script><p>设初值d[s]=0, d[i]=INF，再不断使用这条递推关系式更新d的值。<strong>只要图中不存在负圈，这样的更新操作就是有限的。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span><span class="keyword">int</span> from, to, cost&#125;;</span><br><span class="line">edge es[MAX_E]; <span class="comment">//边</span></span><br><span class="line"><span class="keyword">int</span> d[MAX_V];</span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shortest_path</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++) d[i] = INF;</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> update = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)</span><br><span class="line">&#123;</span><br><span class="line">edge e = es[i];</span><br><span class="line"><span class="keyword">if</span>(d[e.from]!=INF &amp;&amp; d[e.to]&gt;d[e.from]+e.cost)</span><br><span class="line">&#123;</span><br><span class="line">d[e.to] = d[e.from] + e.cost;</span><br><span class="line">update = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!update) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果图中不存在负圈，最短路径不会经过同一个顶点两次，while(true)最多执行|V|-1次（|V|个顶点，|V|-1条边），因此复杂度为 $O(|V|\times|E|)$。反之如果存在负圈，那么第|V|次循环种也会更新d的值，因此可以通过判断第V次是否仍更新了判断是否存在负圈。</p><p><strong>Dijkstra算法</strong><br>在没有负边的情况下，上述Bellman-Ford算法复杂度高很大一部分原因是，如果d[i]还不是最短距离即使进行d[j]=d[i]+(从i到j的边的权值)的更新，d[j]也不会是最短距离，而且即使d[i]没有变化，每一次循坏也要检查一遍从i出发的所有边，很浪费时间。因此可以对算法做出如下修改：</p><ul><li>找到最短距离已经确定的顶点，从它出发更新相邻顶点的最短距离</li><li>此后不用再关心1中的“最短距离已经确定的顶点”</li></ul><p>下面是使用STL的priority_queue的实现。在每次更新时往堆里插入当前最短距离和顶点的值对，当取出的最小值不是最短距离时，就丢弃这个值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to, cost;&#125;;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> d[MAX_V];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</span><br><span class="line">fill(d,d+V,INF);</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line">que.push(P(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line">P p = que.top(); que.pop();</span><br><span class="line"><span class="keyword">int</span> v = p.second;</span><br><span class="line"><span class="keyword">if</span>(d[v] &lt; p.first) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(d[e.to] &gt; d[v]+e.cost)</span><br><span class="line">&#123;</span><br><span class="line">d[e.to] = d[v]+e.cost;</span><br><span class="line">que.push(P(d[e.to],e.to));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-6-图算法的应用"><a href="#2-5-6-图算法的应用" class="headerlink" title="2.5.6 图算法的应用"></a>2.5.6 图算法的应用</h3><blockquote><p>一共有n头牛，按编号顺序排成一排，有ml个关系好的牛的信息，有md个关系不好的牛的信息，对应输入的第一行的三个元素，接下来ml行，每行三个元素A,B,D，表示A牛和B牛相距不希望超过D，接下来md行，每行三个元素A,B,D表示A牛和B牛的相距至少要有D才行。求1号牛和n号牛的最大距离，如果距离无限大输出-2，如果无解输出-1。</p></blockquote><p>记第i头牛的位置是d[i]。首先，牛是按照编号顺序排列的，所以有$d[i] \le d[i+1]$。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-5-2-图的表示&quot;&gt;&lt;a href=&quot;#2-5-2-图的表示&quot; class=&quot;headerlink&quot; title=&quot;2.5.2 图的表示&quot;&gt;&lt;/a&gt;2.5.2 图的表示&lt;/h3&gt;&lt;p&gt;邻接表可以直接用如下代码表示：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; graph[MAX_V] 来表示邻接表 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;边上有属性的情况：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	struct edge &amp;#123;int to, cost;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	vector&amp;lt;edge&amp;gt; G[MAX_V];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="图算法" scheme="https://fadedcosine.github.io/tags/%E5%9B%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>加工并存储数据的数据结构——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/25/%E5%8A%A0%E5%B7%A5%E5%B9%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/25/加工并存储数据的数据结构——《挑战程序设计竞赛》/</id>
    <published>2019-06-25T03:16:33.000Z</published>
    <updated>2019-07-02T14:56:43.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-4-4-并查集"><a href="#2-4-4-并查集" class="headerlink" title="2.4.4 并查集"></a>2.4.4 并查集</h3><p>并查集的实现（交大《数据结构》教材中的实现）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> disjoint[<span class="number">500000</span>]; <span class="comment">//使用时别忘了先全部初始化为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(disjoint[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> disjoint[x] = find(disjoint[x]); <span class="comment">//路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root1 == root2) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(disjoint[root1] &gt; disjoint[root2])<span class="comment">// disjoint[root2]为负值，其绝对值为并查集的大小</span></span><br><span class="line">&#123;</span><br><span class="line">disjoint[root2] += disjoint[root1];</span><br><span class="line">disjoint[root1] =root2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">disjoint[root1] += disjoint[root2];</span><br><span class="line">disjoint[root2] =root1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>并查集中根节点所存储的数据都为负值，其绝对值为当前根节点这一组中节点的个数。对于n个元素的并查集进行一次操作的复杂度（均摊复杂度）是$O(\alpha(n))$。在这里，$\alpha(n)$是阿克曼(Ackermann)函数的反函数，比$O(\log(n))$还要快。</p><blockquote><p>动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。 现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。<br>有人用两种说法对这N个动物所构成的食物链关系进行描述：<br>“1 X Y”，表示X和Y是同类。<br>“2 X Y”，表示X吃Y。<br>此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。<br>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。<br>你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。</p></blockquote><p>起初并不知道每只动物的种类，我想直到所有信息输入完全也很难推断出每只动物是啥种类，所以不妨对每只i创建3个元素i-A, i-B, i-C, 并用这$3\times N$个元素建立并查集，这个并查集维护如下信息：</p><ul><li>i-x表示“i属于种类x”。</li><li>并查集里的每一个组表示组内所有元素代表的情况都同时发生或不发生。</li></ul><p>对于每一条信息，只需按照下面进行操作：</p><ul><li>第一种，x和y属于同一种类：合并x-A和y-A、x-B和y-B、x-C和y-C。</li><li>第二种，x吃y：                       合并x-A和y-B、x-B和y-C、x-C和y-A。</li></ul><p>在合并之前判断这次合并是否会产生矛盾。例如在第一种信息的情况下，需要检查x-A和y-B或者y-C是否在同一组。代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略了并查集的实现代码</span></span><br><span class="line"><span class="keyword">int</span> N, K; <span class="comment">//N种动物，K条信息</span></span><br><span class="line"><span class="keyword">int</span> T[MAX_K], X[MAX_K], Y[MAX_K]; <span class="comment">//T表示信息的类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = T[i];</span><br><span class="line"><span class="keyword">int</span> x = X[i] - <span class="number">1</span>, y = Y[i] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span> || N&lt;=x || y&lt;<span class="number">0</span> || N&lt;= y)</span><br><span class="line">&#123;</span><br><span class="line">ans++；</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//x-A和y-B或者y-C是否在同一组，说明已经相信了全面一组信息说，x与y不同类</span></span><br><span class="line"><span class="keyword">if</span>(find(x) == find(y+N) || find(x) == find(y+<span class="number">2</span>*N) ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Union(x,y);</span><br><span class="line">Union(x+N,y+N);</span><br><span class="line">Union(x+<span class="number">2</span>*N,y+<span class="number">2</span>*N);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(x) == find(y) || find(x) == find(y+<span class="number">2</span>*N) ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Union(x,y+N);</span><br><span class="line">Union(x+N,y+<span class="number">2</span>*N);</span><br><span class="line">Union(x+<span class="number">2</span>*N,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-4-4-并查集&quot;&gt;&lt;a href=&quot;#2-4-4-并查集&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 并查集&quot;&gt;&lt;/a&gt;2.4.4 并查集&lt;/h3&gt;&lt;p&gt;并查集的实现（交大《数据结构》教材中的实现）：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; disjoint[&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//使用时别忘了先全部初始化为-1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(disjoint[x] &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; disjoint[x] = find(disjoint[x]); &lt;span class=&quot;comment&quot;&gt;//路径压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; root1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; root2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root1 == root2) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(disjoint[root1] &amp;gt; disjoint[root2])&lt;span class=&quot;comment&quot;&gt;// disjoint[root2]为负值，其绝对值为并查集的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root2] += disjoint[root1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root1] =root2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root1] += disjoint[root2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root2] =root1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="并查集" scheme="https://fadedcosine.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>记录结果再利用的动态规划——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/24/%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E5%86%8D%E5%88%A9%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/24/记录结果再利用的动态规划——《挑战程序设计竞赛》/</id>
    <published>2019-06-24T04:00:51.000Z</published>
    <updated>2020-01-16T10:13:00.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-3-1-记忆化搜索与动态规划"><a href="#2-3-1-记忆化搜索与动态规划" class="headerlink" title="2.3.1 记忆化搜索与动态规划"></a>2.3.1 记忆化搜索与动态规划</h3><blockquote><p><strong>01 背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。</p></blockquote><p>循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> w[MAX_N], v[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//从index为i的物品开始挑选总重小于j的部分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rec(<span class="number">0</span>,W));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_N+<span class="number">1</span>][MAX_N+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j]&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j] = res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">//-1表示尚未被计算过，初始化整个数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rec(<span class="number">0</span>,W));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中直观地实现了我们记录第一次计算结果的想法，这就是记忆化搜索，也就是dp的萌芽。rec函数参数的组合最大nW种，所以时间复杂度为O(nW)。</p><blockquote><p>memset进行初始化是按照1字节为单位对内存进行填充的，因为-1的二进制表示每一个比特位都是1，所以可以用memset初始化为-1，0也可以用memset初始化，但是不能初始化从1之类的数值，因为1的二进制表示为00000001，memset不能细粒度到每个比特。</p></blockquote><p>但这并不是正经的DP格式，DP需给出递推关系，如下：</p><p>定义dp[i+1][j]:=从0到i这i+1个物品中选出总重量不超过j的物品时总价值的最大值,则有</p><script type="math/tex; mode=display">\begin{equation}  dp[0][j]=0 \\dp[i+1][j] = \left\{               \begin{array}{**lr**}               dp[i][j], & (j<w[i]) \\               max(dp[i][j],dp[i][j-w[i]]+v[i]) & (其他)                \end{array}  \right.  \end{equation}</script><p>基此，因为dp为两维数值，两层循环的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i]) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line"><span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = max(dp[i][j],dp[i][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-2-进一步探索递推关系"><a href="#2-3-2-进一步探索递推关系" class="headerlink" title="2.3.2 进一步探索递推关系"></a>2.3.2 进一步探索递推关系</h3><blockquote><p><strong>完全背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值，在这里，每种物品可以挑选任意多件</p></blockquote><p>给出递推关系，很容易得到：<br>dp[0][j] = 0<br>dp[i+1][j] = max{dp[i][j-k$\times$w[i]]+k$\times$v[i] | 0 $\le$ k}<br>这个递推关系中出现了一个新变量k，故如果按照这个递推关系来写代码的话，在dp二维数组的两层循环下还需加一层k的循环，k$\times$w[i] $\le$ j。三层循环的复杂度为$O(NW^2)$。</p><p>然而，在dp[i+1][j]的计算中选择k(k$\ge$1)个的情况，与在dp[i+1][j-w[i]]的计算中选择k-1个的情况是相同的，所以dp[i+1][j]的递推中k$\ge$1部分的计算已经在dp[i+1][j-w[i]]的计算中完成了。那么可按照如下方式进行变形</p><script type="math/tex; mode=display">\begin{align}& \max\{ dp[i][j-k\times w[i]+k\times v[i]|0 \le k]\}\\& =\max(\{ dp[i][j],\max\{dp[i][j-k\times w[i]]+k\times v[i]|1 \le k\})\\& =\max(\{ dp[i][j],\max\{dp[i][(j-w[i])-k\times w[i]]+v[i]+k\times v[i]|0 \le k\})\\& = \max(dp[i][j], dp[i+1][j-w[i]]+v[i]) \\\end{align}</script><p>基此，完全背包问题的代码如下，时间复杂度为$O(bW)$，这给我的区分是，递推关系中多出一个未知数的求最值或者是求和的，大都可<strong>变换形式消除未知数</strong>，从而降维，减少时间复杂度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;w[i]) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">            <span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = max(dp[i][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>01背包问题和完全背包问题都可以重复利用数组来节省内存空间，因为01背包问题的dp[i+1]计算时只需要dp[i]，可以改进代码如下：<br><strong>01背包问题</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_W+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=W;j&gt;=w[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>完全背包问题</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_W+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=w[i];j&lt;=W;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两者的差异只有第二层循环的方向，这样写极易留下bug，需要格外小心。</p><p>01背包问题，换限制，若W很大，如 $1\le W \le 10^9$，这样原先的$O(nW)$便不能通过测试，而相较重量而言，此时价值的范围比较小，所以可以试着改变DP的对象，之前的方法中对于不同的重量限制计算最大的价值，这次不妨针对不同的价值计算最小的重量。</p><p>定义dp[i+1][j]:=从0到i这i+1个物品中选出价值总和为j时的物品总重量的最小值,则有</p><blockquote><p>dp[0][0] = 0<br>dp[0][j] = INF </p></blockquote><p>便可顺理成章地得到递推关系式：</p><script type="math/tex; mode=display">dp[i+1][j] = \min(dp[i][j],dp[i][j-v[i]]+w[i])</script><p>利用这一推式可得最终的答案就是令$dp[n][j] \le W$的最大的j。此时，这种DP方式的复杂度即为$O(b\sum_i v_i)$。</p><p>此类的改变DP对象，改变DP递推关系式的方法在DP问题中十分常见。再如</p><p><strong>多重部分和问题：</strong></p><blockquote><p>有n种不同大小的数字$a_i$，每种各$m_i$个，判断是否可以从这些数字之中选出若干使它们的和恰好为K。</p></blockquote><p>朴素的想法是定义 dp[i+1][j]:=用从0到i这i+1种数能否能加和成j。递推关系如下：</p><script type="math/tex; mode=display">dp[i+1][j] = (0\le k\le m_i,且k\times a_i \le j时，存在使dp[i][j-k\times a_i]为真的k)</script><p>代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">int</span> n, k, a[MAX_N], m[MAX_N];</span><br><span class="line"><span class="keyword">bool</span> dp[MAX_N+<span class="number">1</span>][MAX_K+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=K;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=m[i]&amp;&amp;k*a[i]&lt;=j;k++)</span><br><span class="line">dp[i+<span class="number">1</span>]][j] |= dp[i][j-k*a[i]]</span><br><span class="line"><span class="keyword">return</span> dp[n][K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法的复杂度是$O(K\sum_i m_i)$，这样不够好。一般用DP求取bool结果的话会有很大的浪费，相反如果我们在此问题中用dp数组存储$a_i$这个数还剩下多少：<br>dp[i+1][j]:=用从0到i这i+1种数加和得到j时，i种数最多能剩余多少个( 不能加得j时为-1)</p><script type="math/tex; mode=display">\begin{equation}  dp[i+1][j] = \left\{               \begin{array}{**lr**}               m_i, & (dp[i][j]\ge 0) \\               -1, & (j< a_i 或者 dp[i+1][j-a_i] \le 0) \\              dp[i+1][j-a_i]-1 & (其他)                \end{array}  \right.  \end{equation}</script><p>这样，只要看最终是否满足$dp[n][K] \ge 0$就知道答案了。这个递推式可以在O(nK)时间内计算出结果，再利用数组重复利用，可以得到以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_K+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j]&gt;=<span class="number">0</span>) dp[j]=m[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&lt;a[i]|| dp[j-a[i]] &lt;= <span class="number">0</span>) dp[j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[j] = dp[j-a[i]] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[K]&gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://noi.openjudge.cn/ch0206/2985/" target="_blank" rel="noopener"><strong>单纯部分和问题（也许是叫这个名字）</strong></a></p><blockquote><p>有n个正整数，找出其中和为t(t也是正整数)的可能的组合方式。如：<br>n=5,5个数分别为1,2,3,4,5，t=5；<br>那么可能的组合有5=1+4和5=2+3和5=5三种组合方式。<br>输入的第一行是两个正整数n和t，用空格隔开，其中1&lt;=n&lt;=20,表示正整数的个数，t为要求的和(1&lt;=t&lt;=1000)<br>接下来的一行是n个正整数，用空格隔开。<br>输出和为t的不同的组合方式的数目。<br><strong>样例输入</strong><br>5 5<br>1 2 3 4 5<br><strong>样例输出</strong><br>3</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>], n, m, sum, b[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt; m) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (k == m)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (b[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[i] = <span class="number">1</span>;</span><br><span class="line">dfs(k + a[i], i);</span><br><span class="line">b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solved_with_dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solved_with_dp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= a[i]; j--)</span><br><span class="line">dp[j] += dp[j - a[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用dfs来解决的方法本质上就是搜索了，司空见惯了。说一下dp的做法。在dp的做法种，数组dp[i]表示组合成和为i的方式数量。那么就有代码中的转移方程：</p><script type="math/tex; mode=display">dp[j] += dp[j - a[i]];</script><p>注意对于j的遍历必须是从m递减到a[i]，因为每一个输入的数a[i]只能在组合和时，只能使用一次。</p><hr><p><strong>多重背包问题</strong></p><blockquote><p>有n种物品，它们的重量和价值分别是$w_i$和$v_i$。现在要从中选出一些物品使得总重量不超过W，并且价值的和最大。第i种物品最多取$m_i$个。</p></blockquote><p>对于01背包和完全背包问题，我们都能在$O(nW)$的时间内求解，如果用同样的方法求解本题，则状态转移方程为：<br>&emsp; <script type="math/tex">dp[i][j]:=到第i个物品为止总重量不超过j的所有选法中最大可能的价值</script><br>&emsp; <script type="math/tex">dp[i+1][j]:=\max \{ dp[i][j-k\times w[i]]+k\times v[i] | 0 \le k \le m_i 且 j-k\times w[i] \ge 0\}</script><br>如果使用这个转移方程，复杂度就是O(nmW)，无法在规定时间内求出解。</p><p>先看一个例子：取m[i] = 2, v[i] = v, w[i] = w, W &gt; 9 * v，<br>并假设 f(j) = dp[i - 1][j]，观察状态转移方程右边要求最大值的几项：</p><p>&emsp; j = 6$\times$ w:   f(6$\times$w)、f(5$\times$w)+v、f(4$\times$w)+2$\times$v 这三个中的最大值<br>&emsp; j = 5$\times$w:   f(5$\times$w)、f(4$\times$w)+v、f(3$\times$w)+2$\times$v 这三个中的最大值<br>&emsp; j = 4$\times$w:   f(4$\times$w)、f(3$\times$w)+v、f(2$\times$w)+2$\times$v 这三个中的最大值</p><p>显然，状态转移方程右边求最大值的几项随j值改变而改变。但如果将j = 6$\times$w时，每项减去6$\times$v，j=5$\times$w时，每项减去5$\times$v，j=4$\times$w时，每项减去4$\times$v（这个减去k$\times$v没有实际意义，只是举例说明存在很大重复项，可以使用双端队列降低计算复杂度，后在代码中有体现这个思想），就得到：</p><p>&emsp; j = 6$\times$ w:   f(6$\times$w)-6$\times$v、f(5$\times$w)-5$\times$v、f(4$\times$w)-4$\times$v 这三个中的最大值<br>&emsp; j = 5$\times$w:   f(5$\times$w)-5$\times$v、f(4$\times$w)-4$\times$v、f(3$\times$w)-3$\times$v 这三个中的最大值<br>&emsp; j = 4$\times$w:   f(4$\times$w)-4$\times$v、f(3$\times$w)-3$\times$v、f(2$\times$w)-2$\times$v 这三个中的最大值</p><p>很明显，要求最大值的那些项，有很多重复。根据这个思路，可以对原来的公式进行如下调整：假设d = w[i]，a = j / d，b = j % d，即 j = a * d + b，代入状态转移方程，并用k替换a - k得：</p><script type="math/tex; mode=display">dp[i][j] = \max { dp[i - 1][b + k \times d] - k \times v[i] } + a \times v[i]   (a – m[i] \le k \le a)</script><p>意思就是求j前面的$m[i]+1$ 个 数对应的 <script type="math/tex">dp[i - 1][b + k \times d] - k \times v[i]</script>的最大值，然后加上 $a\times v[i]$就是<script type="math/tex">dp[i][j]</script>。这个求最大值的过程便可以使用双端队列求解。这样算法的复杂度即降到$O(nW)$，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">int</span> w[MAX_N], v[MAX_N], m[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[MAX_W + <span class="number">1</span>]; <span class="comment">//DP数组（循环使用）</span></span><br><span class="line"><span class="keyword">int</span> deq[MAX_W + <span class="number">1</span>]; <span class="comment">//双端队列（保存数组下标）</span></span><br><span class="line"><span class="keyword">int</span> deqv[MAX_W + <span class="number">1</span>]; <span class="comment">//双端队列（保存值）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;w[i];a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>, t=<span class="number">0</span>; <span class="comment">//双端队列的头部和尾部</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j*w[i]+a&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> val = dp[j*w[i]+a] - j*v[i];<span class="comment">//这里就是上面那个举例的思想，减去k*v[i],之后保存到双端队列中重复利用</span></span><br><span class="line"><span class="keyword">while</span>(s&lt;t &amp;&amp; deqv[t<span class="number">-1</span>]&lt;=val) t--;</span><br><span class="line">deq[t] = j;</span><br><span class="line">deqv[t++] = val;</span><br><span class="line">dp[j*w[i]+a] = deqv[s] + j*v[i]; <span class="comment">//加回来</span></span><br><span class="line"><span class="keyword">if</span>(deq[s] == j - m[i])</span><br><span class="line">&#123;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-3-区间DP"><a href="#2-3-3-区间DP" class="headerlink" title="2.3.3 区间DP"></a>2.3.3 区间DP</h3><p><a href="https://code.google.com/codejam/contest/189252/dashboard#s=p2" target="_blank" rel="noopener">Bribe the Prisoners</a></p><blockquote><p>有t 组测试数据，每组数据中有n个人在监狱，想要放出m个人，每放出一个人，他周围的人（两边连续的直到碰到空的监狱或者尽头）都要贿赂1块钱，没放出一个人就对应地空出一个空监狱。问最少的总花费。</p></blockquote><p>考虑释放在囚犯A[i]到囚犯A[j]（不包括两端的囚犯）的囚犯时，所需的金币是释放其中$(A[i],A[j])$中一人A[k]所需的$A[j]-A[i]-2$，加上释放$(A[i],A[k])$和$(A[k],A[j])$中想要放出的囚犯所需的金币，要最小化总花费也就是要最小化释放(A[0],A[n+1])中想要释放的囚犯所需的金币。用DP来解决问题，定义</p><script type="math/tex; mode=display">dp[i][j]:=释放在囚犯A[i]到囚犯A[j]（不包括两端的囚犯）中想要释放的囚犯时，所需的最小金币总数。</script><p>则有状态转移递推关系如下（因为不包括两端的囚犯所以是减2）：</p><script type="math/tex; mode=display">dp[i][j] = \min(dp[i][k]+dp[k][j]| 1<k<j) + A[j]-A[i]-2</script><p>为了方便，我们把两端也加入，这样变为A[0]=0, A[m+1]=n+1。初始化最小的区间即$dp[i][i+1] = 0$。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m ;</span><br><span class="line"><span class="comment">//区间动态规划</span></span><br><span class="line"><span class="comment">//bribe the prisoner</span></span><br><span class="line"><span class="comment">//定义一个二维数组。依次用来填充最小的花费。</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">109</span>][<span class="number">109</span>];<span class="comment">//表示从第i个填充到j个时的最小花费。</span></span><br><span class="line"><span class="comment">//同时定义一个存放罪犯的数组。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">109</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    a[m+<span class="number">1</span>]=n+<span class="number">1</span>;<span class="comment">//为了解决边界问题。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i++)</span><br><span class="line">        dp[i][i+<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//初始化，因为所有的从i到i+1的花费除去边界都是0；</span></span><br><span class="line">    <span class="comment">//循环求解。定义w表示区间的范围，w=2表示跨度为2的情况，也就是该区间里面只有一个要释放的犯人</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">2</span>; w&lt;=m+<span class="number">1</span>; w++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每次选的范围都是w，从i到j 的范围内的最小值等于从i到K加从第k到j的最小值。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+w&lt;=m+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此处用到的k恰是其中的中值。</span></span><br><span class="line">            <span class="keyword">int</span> j=i+w,tmp=INT_MAX;<span class="comment">//tmp用来保存当前区间的当前最好情况的花费金币数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;j; k++)</span><br><span class="line">                tmp=min(tmp,dp[i][k]+dp[k][j]);</span><br><span class="line">            dp[i][j]=tmp+a[j]-a[i]<span class="number">-2</span>;<span class="comment">//此处就是当前区间最小值。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">0</span>][m+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>最大连续子序列</strong></p><p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">Bribe the Prisoners</a>:     </p><blockquote><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p></blockquote><p>这是一个用于求解最大连续子序列和问题的最优算法。对于一个长度为n的数组A而言，从A[0] 到 A[j] 是一个子数组（j<n），那么以a[j]结尾的子数组（包括a[j]）之最大和，要么是 a[j]， 要么是 max(a[i]~a[j-1])+a[j] ，其中0 ≤ i j-1。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it  = nums.begin();</span><br><span class="line">        <span class="keyword">int</span> maxSum = *it;</span><br><span class="line">        <span class="keyword">int</span> theSum = *it;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(it = it+<span class="number">1</span> ; it != nums.end(); it++)&#123;</span><br><span class="line">            theSum = max(theSum + *it, *it);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(theSum &gt; maxSum)</span><br><span class="line">                maxSum = theSum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></n），那么以a[j]结尾的子数组（包括a[j]）之最大和，要么是></p><p>该法的复杂度是O(n)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-3-1-记忆化搜索与动态规划&quot;&gt;&lt;a href=&quot;#2-3-1-记忆化搜索与动态规划&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 记忆化搜索与动态规划&quot;&gt;&lt;/a&gt;2.3.1 记忆化搜索与动态规划&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;01 背包问题&lt;/strong&gt;&lt;br&gt;有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX_N = &lt;span class=&quot;number&quot;&gt;10010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; w[MAX_N], v[MAX_N];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从index为i的物品开始挑选总重小于j的部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==n) &lt;span class=&quot;comment&quot;&gt;//没有剩余的物品了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(w[i]&amp;gt;j)&lt;span class=&quot;comment&quot;&gt;//index为i的物品重量大于剩余总重&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = max(rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j),rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j-w[i]) + v[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, rec(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,W));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="DP" scheme="https://fadedcosine.github.io/tags/DP/"/>
    
      <category term="背包问题" scheme="https://fadedcosine.github.io/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>最基础的穷竭搜索——《挑战程序设计竞赛》</title>
    <link href="https://fadedcosine.github.io/2019/06/23/%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>https://fadedcosine.github.io/2019/06/23/最基础的穷竭搜索——《挑战程序设计竞赛》/</id>
    <published>2019-06-23T04:03:18.000Z</published>
    <updated>2019-07-02T14:56:07.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-4-深度优先搜索"><a href="#2-1-4-深度优先搜索" class="headerlink" title="2.1.4 深度优先搜索"></a>2.1.4 深度优先搜索</h3><p> [<a href="http://poj.org/problem?id=2386" target="_blank" rel="noopener">http://poj.org/problem?id=2386</a>]:     “Lake Counting”</p><blockquote><p>有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)<br>www<br>w.w<br>www</p></blockquote><p>从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。<br>使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。</p><a id="more"></a><h3 id="2-1-6-特殊状态的枚举"><a href="#2-1-6-特殊状态的枚举" class="headerlink" title="2.1.6 特殊状态的枚举"></a>2.1.6 特殊状态的枚举</h3><p>C++的algorithm库中提供了next_permutation这一函数，可以把n给元素共n!种不同的排列生成出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> used[MAX_N];</span><br><span class="line"><span class="keyword">int</span> perm[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成&#123;0, 1, 2, 3,..., n-1&#125;的n!种排列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation1</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos == n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;perm[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//针对perm的index为pos的位置，究竟使用0~n-1种的哪一个进行循环 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">perm[pos] = i;</span><br><span class="line">used[i] = <span class="literal">true</span>;</span><br><span class="line">permutation1(pos + <span class="number">1</span>, n);</span><br><span class="line">used[i] = <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">permutation1(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用函数时，主调函数所拥有的局部变量等信息需要存储在特定的内存区域，这个区域叫做栈内存区；另一方面，利用new或者malloc进行分配的内存区域叫做堆内存。<br>栈内存在程序启动时被统一分配，此后不能再扩大，由于这一区域有上限，所以函数的递归深度也有上限。<br>显式初始化全局变量被保存在数据段种，未显式初始化的全局变量保持在BSS段中。使用全局变量可以减小栈溢出的危险。</p></blockquote><hr><h2 id="2-2-贪心法"><a href="#2-2-贪心法" class="headerlink" title="2.2 贪心法"></a>2.2 贪心法</h2><ol><li>[<a href="http://poj.org/problem?id=3617" target="_blank" rel="noopener">http://poj.org/problem?id=3617</a>]:     “Best Cow Line”</li></ol><blockquote><p>已知一段长度为N的字符串S，构造一个字典序最小的字符串T。起初T为空串，随后反复进行下列任意操作。<br>-从S的头部删除一个字符，加到T的尾部<br>-从S的尾部删除一个字符，加到T的尾部</p></blockquote><p>贪心算法很容易想到：不断取S的开头和末尾中较小的一个字符放到T的末尾。如果两个字符相等，那么就不断比较下一个内部字符的大小。</p><ol><li>[<a href="http://poj.org/problem?id=3253" target="_blank" rel="noopener">http://poj.org/problem?id=3253</a>]:     “Fence Repair”<blockquote><p>有一位农夫要把一个木板(长度为 N 块木板长度之和)使用 (N-1) 次锯成 N 块给定长度的小木板，每次锯都要收取一定费用，这个费用就是当前锯的这个木板的长度，给定各个要求的小木板的长度，及小木板的个数  N，求最小的费用。</p></blockquote></li></ol><p>切割的方法可以参见如下的二叉树：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     15</span><br><span class="line">    /  \</span><br><span class="line">  7      8</span><br><span class="line"> / \    / \</span><br><span class="line">3   4  5   3</span><br><span class="line">          / \</span><br><span class="line">         1   2</span><br></pre></td></tr></table></figure></p><p>一个叶子就相当于一个小木板，那么开销的合计即为：</p><script type="math/tex; mode=display">\sum 小木板的长度 \times 小木板节点的深度</script><p>此时最佳的切割方式为：<strong>最短的板与次短的板的节点应当是兄弟节点</strong></p><p>不妨将$L_i$按大小顺序排列，那么最短的板$L_1$与次短的板$L_2$应当为兄弟节点，因为切割是自由的不妨当作$L_1$和$L_2$是最后切开的，那么这次切割之前就有：</p><script type="math/tex; mode=display">(L_1+L_2), L_3, L_4, ... ,L_N</script><p>这样的N-1块木板存在。之后递归第将这N-1块木板的问题求解，每次加上最短的板与次短的板的长度之和即得解。时间复杂度为$O(N^2)$。事实上最佳的复杂度为$O(NlogN)$，之后将会学到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;L[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(N&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mii1 = <span class="number">0</span>, mii2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L[mii1]&gt;L[mii2])swap(mii1,mii2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L[i]&lt;L[mii1])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = mii1;</span><br><span class="line">mii1 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]&lt;L[mii2])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = L[mii1] + L[mii2];</span><br><span class="line">ans += t;</span><br><span class="line"><span class="keyword">if</span>(mii1==N<span class="number">-1</span>)swap(mii1,mii2);</span><br><span class="line">L[mii1] = t;</span><br><span class="line">L[mii2] = L[N<span class="number">-1</span>];</span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-1-4-深度优先搜索&quot;&gt;&lt;a href=&quot;#2-1-4-深度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;2.1.4 深度优先搜索&quot;&gt;&lt;/a&gt;2.1.4 深度优先搜索&lt;/h3&gt;&lt;p&gt; [&lt;a href=&quot;http://poj.org/problem?id=2386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=2386&lt;/a&gt;]:     “Lake Counting”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)&lt;br&gt;www&lt;br&gt;w.w&lt;br&gt;www&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。&lt;br&gt;使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。&lt;/p&gt;
    
    </summary>
    
      <category term="三更有梦书为枕" scheme="https://fadedcosine.github.io/categories/%E4%B8%89%E6%9B%B4%E6%9C%89%E6%A2%A6%E4%B9%A6%E4%B8%BA%E6%9E%95/"/>
    
    
      <category term="Algorithm" scheme="https://fadedcosine.github.io/tags/Algorithm/"/>
    
      <category term="贪心" scheme="https://fadedcosine.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
</feed>
