<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhixian Yang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-24T04:11:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhixian Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录结果再利用的动态规划——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/24/%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E5%86%8D%E5%88%A9%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/24/记录结果再利用的动态规划——《挑战程序设计竞赛》/</id>
    <published>2019-06-24T04:00:51.000Z</published>
    <updated>2019-06-24T04:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-3-1-记忆化搜索与动态规划"><a href="#2-3-1-记忆化搜索与动态规划" class="headerlink" title="2.3.1 记忆化搜索与动态规划"></a>2.3.1 记忆化搜索与动态规划</h3><blockquote><p><strong>01 背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。</p></blockquote><p>循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> w[MAX_N], v[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//从index为i的物品开始挑选总重小于j的部分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-3-1-记忆化搜索与动态规划&quot;&gt;&lt;a href=&quot;#2-3-1-记忆化搜索与动态规划&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 记忆化搜索与动态规划&quot;&gt;&lt;/a&gt;2.3.1 记忆化搜索与动态规划&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>最基础的穷竭搜索——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/23/%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/23/最基础的穷竭搜索——《挑战程序设计竞赛》/</id>
    <published>2019-06-23T04:03:18.000Z</published>
    <updated>2019-06-23T10:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-4-深度优先搜索"><a href="#2-1-4-深度优先搜索" class="headerlink" title="2.1.4 深度优先搜索"></a>2.1.4 深度优先搜索</h3><p> [<a href="http://poj.org/problem?id=2386]" target="_blank" rel="noopener">http://poj.org/problem?id=2386]</a>:     “Lake Counting”</p><blockquote><p>有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)<br>www<br>w.w<br>www</p></blockquote><p>从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。<br>使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。</p><a id="more"></a><h3 id="2-1-6-特殊状态的枚举"><a href="#2-1-6-特殊状态的枚举" class="headerlink" title="2.1.6 特殊状态的枚举"></a>2.1.6 特殊状态的枚举</h3><p>C++的algorithm库中提供了next_permutation这一函数，可以把n给元素共n!种不同的排列生成出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> used[MAX_N];</span><br><span class="line"><span class="keyword">int</span> perm[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成&#123;0, 1, 2, 3,..., n-1&#125;的n!种排列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation1</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos == n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;perm[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//针对perm的index为pos的位置，究竟使用0~n-1种的哪一个进行循环 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">perm[pos] = i;</span><br><span class="line">used[i] = <span class="literal">true</span>;</span><br><span class="line">permutation1(pos + <span class="number">1</span>, n);</span><br><span class="line">used[i] = <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">permutation1(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用函数时，主调函数所拥有的局部变量等信息需要存储在特定的内存区域，这个区域叫做栈内存区；另一方面，利用new或者malloc进行分配的内存区域叫做堆内存。<br>栈内存在程序启动时被统一分配，此后不能再扩大，由于这一区域有上限，所以函数的递归深度也有上限。<br>显式初始化全局变量被保存在数据段种，未显式初始化的全局变量保持在BSS段中。使用全局变量可以减小栈溢出的危险。</p></blockquote><hr><h2 id="2-2-贪心法"><a href="#2-2-贪心法" class="headerlink" title="2.2 贪心法"></a>2.2 贪心法</h2><ol><li>[<a href="http://poj.org/problem?id=3617]" target="_blank" rel="noopener">http://poj.org/problem?id=3617]</a>:     “Best Cow Line”</li></ol><blockquote><p>已知一段长度为N的字符串S，构造一个字典序最小的字符串T。起初T为空串，随后反复进行下列任意操作。<br>-从S的头部删除一个字符，加到T的尾部<br>-从S的尾部删除一个字符，加到T的尾部</p></blockquote><p>贪心算法很容易想到：不断取S的开头和末尾中较小的一个字符放到T的末尾。如果两个字符相等，那么就不断比较下一个内部字符的大小。</p><ol start="2"><li>[<a href="http://poj.org/problem?id=3253]" target="_blank" rel="noopener">http://poj.org/problem?id=3253]</a>:     “Fence Repair”<blockquote><p>有一位农夫要把一个木板(长度为 N 块木板长度之和)使用 (N-1) 次锯成 N 块给定长度的小木板，每次锯都要收取一定费用，这个费用就是当前锯的这个木板的长度，给定各个要求的小木板的长度，及小木板的个数  N，求最小的费用。</p></blockquote></li></ol><p>切割的方法可以参见如下的二叉树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     15</span><br><span class="line">    /  \</span><br><span class="line">  7      8</span><br><span class="line"> / \    / \</span><br><span class="line">3   4  5   3</span><br><span class="line">          / \</span><br><span class="line">         1   2</span><br></pre></td></tr></table></figure><p>一个叶子就相当于一个小木板，那么开销的合计即为：</p><p>$$ \sum 小木板的长度 \times 小木板节点的深度 $$</p><p>此时最佳的切割方式为：<strong>最短的板与次短的板的节点应当是兄弟节点</strong></p><p>不妨将$L_i$按大小顺序排列，那么最短的板$L_1$与次短的板$L_2$应当为兄弟节点，因为切割是自由的不妨当作$L_1$和$L_2$是最后切开的，那么这次切割之前就有：</p><p>$$ (L_1+L_2), L_3, L_4, … ,L_N$$</p><p>这样的N-1块木板存在。之后递归第将这N-1块木板的问题求解，每次加上最短的板与次短的板的长度之和即得解。时间复杂度为$O(N^2)$。事实上最佳的复杂度为$O(NlogN)$，之后将会学到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;L[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(N&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mii1 = <span class="number">0</span>, mii2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L[mii1]&gt;L[mii2])swap(mii1,mii2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L[i]&lt;L[mii1])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = mii1;</span><br><span class="line">mii1 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]&lt;L[mii2])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = L[mii1] + L[mii2];</span><br><span class="line">ans += t;</span><br><span class="line"><span class="keyword">if</span>(mii1==N<span class="number">-1</span>)swap(mii1,mii2);</span><br><span class="line">L[mii1] = t;</span><br><span class="line">L[mii2] = L[N<span class="number">-1</span>];</span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-1-4-深度优先搜索&quot;&gt;&lt;a href=&quot;#2-1-4-深度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;2.1.4 深度优先搜索&quot;&gt;&lt;/a&gt;2.1.4 深度优先搜索&lt;/h3&gt;&lt;p&gt; [&lt;a href=&quot;http://poj.org/problem?id=2386]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=2386]&lt;/a&gt;:     “Lake Counting”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)&lt;br&gt;www&lt;br&gt;w.w&lt;br&gt;www&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。&lt;br&gt;使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
</feed>
