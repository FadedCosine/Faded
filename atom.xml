<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhixian Yang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-25T03:53:43.948Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhixian Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加工并存储数据的数据结构——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/25/%E5%8A%A0%E5%B7%A5%E5%B9%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/25/加工并存储数据的数据结构——《挑战程序设计竞赛》/</id>
    <published>2019-06-25T03:16:33.000Z</published>
    <updated>2019-06-25T03:53:43.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-4-4-并查集"><a href="#2-4-4-并查集" class="headerlink" title="2.4.4 并查集"></a>2.4.4 并查集</h3><p>并查集的实现（交大《数据结构》教材中的实现）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> disjoint[<span class="number">500000</span>]; <span class="comment">//使用时别忘了先全部初始化为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(disjoint[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> disjoint[x] = find(disjoint[x]); <span class="comment">//路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root1 == root2) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(disjoint[root1] &gt; disjoint[root2])<span class="comment">// disjoint[root2]为负值，其绝对值为并查集的大小</span></span><br><span class="line">&#123;</span><br><span class="line">disjoint[root2] += disjoint[root1];</span><br><span class="line">disjoint[root1] =root2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">disjoint[root1] += disjoint[root2];</span><br><span class="line">disjoint[root2] =root1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并查集中根节点所存储的数据都为负值，其绝对值为当前根节点这一组中节点的个数。对于n个元素的并查集进行一次操作的复杂度（均摊复杂度）是$O(\alpha(n))$。在这里，$\alpha(n)$是阿克曼(Ackermann)函数的反函数，比$O(\log(n))$还要快。</p><blockquote><p>动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。 现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。<br>有人用两种说法对这N个动物所构成的食物链关系进行描述：<br>“1 X Y”，表示X和Y是同类。<br>“2 X Y”，表示X吃Y。<br>此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。<br>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。<br>你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。</p></blockquote><p>起初并不知道每只动物的种类，我想直到所有信息输入完全也很难推断出每只动物是啥种类，所以不妨对每只i创建3个元素i-A, i-B, i-C, 并用这$3\times N$个元素建立并查集，这个并查集维护如下信息：</p><ul><li>i-x表示“i属于种类x”。</li><li>并查集里的每一个组表示组内所有元素代表的情况都同时发生或不发生。</li></ul><p>对于每一条信息，只需按照下面进行操作：</p><ul><li>第一种，x和y属于同一种类：合并x-A和y-A、x-B和y-B、x-C和y-C。</li><li>第二种，x吃y：                       合并x-A和y-B、x-B和y-C、x-C和y-A。</li></ul><p>在合并之前判断这次合并是否会产生矛盾。例如在第一种信息的情况下，需要检查x-A和y-B或者y-C是否在同一组。代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略了并查集的实现代码</span></span><br><span class="line"><span class="keyword">int</span> N, K; <span class="comment">//N种动物，K条信息</span></span><br><span class="line"><span class="keyword">int</span> T[MAX_K], X[MAX_K], Y[MAX_K]; <span class="comment">//T表示信息的类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = T[i];</span><br><span class="line"><span class="keyword">int</span> x = X[i] - <span class="number">1</span>, y = Y[i] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span> || N&lt;=x || y&lt;<span class="number">0</span> || N&lt;= y)</span><br><span class="line">&#123;</span><br><span class="line">ans++；</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//x-A和y-B或者y-C是否在同一组，说明已经相信了全面一组信息说，x与y不同类</span></span><br><span class="line"><span class="keyword">if</span>(find(x) == find(y+N) || find(x) == find(y+<span class="number">2</span>*N) ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Union(x,y);</span><br><span class="line">Union(x+N,y+N);</span><br><span class="line">Union(x+<span class="number">2</span>*N,y+<span class="number">2</span>*N);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(x) == find(y) || find(x) == find(y+<span class="number">2</span>*N) ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Union(x,y+N);</span><br><span class="line">Union(x+N,y+<span class="number">2</span>*N);</span><br><span class="line">Union(x+<span class="number">2</span>*N,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-4-4-并查集&quot;&gt;&lt;a href=&quot;#2-4-4-并查集&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 并查集&quot;&gt;&lt;/a&gt;2.4.4 并查集&lt;/h3&gt;&lt;p&gt;并查集的实现（交大《数据结构》教材中的实现）：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>记录结果再利用的动态规划——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/24/%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E5%86%8D%E5%88%A9%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/24/记录结果再利用的动态规划——《挑战程序设计竞赛》/</id>
    <published>2019-06-24T04:00:51.000Z</published>
    <updated>2019-06-24T15:04:36.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-3-1-记忆化搜索与动态规划"><a href="#2-3-1-记忆化搜索与动态规划" class="headerlink" title="2.3.1 记忆化搜索与动态规划"></a>2.3.1 记忆化搜索与动态规划</h3><blockquote><p><strong>01 背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。</p></blockquote><p>循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> w[MAX_N], v[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//从index为i的物品开始挑选总重小于j的部分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rec(<span class="number">0</span>,W));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_N+<span class="number">1</span>][MAX_N+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j]&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j] = res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">//-1表示尚未被计算过，初始化整个数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rec(<span class="number">0</span>,W));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中直观地实现了我们记录第一次计算结果的想法，这就是记忆化搜索，也就是dp的萌芽。rec函数参数的组合最大nW种，所以时间复杂度为O(nW)。</p><blockquote><p>memset进行初始化是按照1字节为单位对内存进行填充的，因为-1的二进制表示每一个比特位都是1，所以可以用memset初始化为-1，0也可以用memset初始化，但是不能初始化从1之类的数值，因为1的二进制表示为00000001，memset不能细粒度到每个比特。</p></blockquote><p>但这并不是正经的DP格式，DP需给出递推关系，如下：</p><p>定义dp[i+1][j]:=从0到i这i+1个物品中选出总重量不超过j的物品时总价值的最大值,则有</p><script type="math/tex; mode=display">\begin{equation}  dp[0][j]=0 \\dp[i+1][j] = \left\{               \begin{array}{**lr**}               dp[i][j], & (j<w[i]) \\               max(dp[i][j],dp[i][j-w[i]]+v[i]) & (其他)                \end{array}  \right.  \end{equation}</script><p>基此，因为dp为两维数值，两层循环的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i]) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line"><span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = max(dp[i][j],dp[i][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-2-进一步探索递推关系"><a href="#2-3-2-进一步探索递推关系" class="headerlink" title="2.3.2 进一步探索递推关系"></a>2.3.2 进一步探索递推关系</h3><blockquote><p><strong>完全背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值，在这里，每种物品可以挑选任意多件</p></blockquote><p>给出递推关系，很容易得到：<br>dp[0][j] = 0<br>dp[i+1][j] = max{dp[i][j-k$\times$w[i]]+k$\times$v[i] | 0 $\le$ k}<br>这个递推关系中出现了一个新变量k，故如果按照这个递推关系来写代码的话，在dp二维数组的两层循环下还需加一层k的循环，k$\times$w[i] $\le$ j。三层循环的复杂度为$O(NW^2)$。</p><p>然而，在dp[i+1][j]的计算中选择k(k$\ge$1)个的情况，与在dp[i+1][j-w[i]]的计算中选择k-1个的情况是相同的，所以dp[i+1][j]的递推中k$\ge$1部分的计算已经在dp[i+1][j-w[i]]的计算中完成了。那么可按照如下方式进行变形</p><script type="math/tex; mode=display">\begin{align}& \max\{ dp[i][j-k\times w[i]+k\times v[i]|0 \le k]\}\\& =\max(\{ dp[i][j],\max\{dp[i][j-k\times w[i]]+k\times v[i]|1 \le k\})\\& =\max(\{ dp[i][j],\max\{dp[i][(j-w[i])-k\times w[i]]+v[i]+k\times v[i]|0 \le k\})\\& = \max(dp[i][j], dp[i+1][j-w[i]]+v[i]) \\\end{align}</script><p>基此，完全背包问题的代码如下，时间复杂度为$O(bW)$，这给我的区分是，递推关系中多出一个未知数的求最值或者是求和的，大都可<strong>变换形式消除未知数</strong>，从而降维，减少时间复杂度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;W;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;w[i]) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">            <span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = max(dp[i][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>01背包问题和完全背包问题都可以重复利用数组来节省内存空间，因为01背包问题的dp[i+1]计算时只需要dp[i]，可以改进代码如下：<br><strong>01背包问题</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_W+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=W;j&gt;=w[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>完全背包问题</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_W+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=w[i];j&lt;=W;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两者的差异只有第二层循环的方向，这样写极易留下bug，需要格外小心。</p><p>01背包问题，换限制，若W很大，如 $1\le W \le 10^9$，这样原先的$O(nW)$便不能通过测试，而相较重量而言，此时价值的范围比较小，所以可以试着改变DP的对象，之前的方法中对于不同的重量限制计算最大的价值，这次不妨针对不同的价值计算最小的重量。</p><p>定义dp[i+1][j]:=从0到i这i+1个物品中选出价值总和为j时的物品总重量的最小值,则有</p><blockquote><p>dp[0][0] = 0<br>dp[0][j] = INF </p></blockquote><p>便可顺理成章地得到递推关系式：</p><script type="math/tex; mode=display">dp[i+1][j] = \min(dp[i][j],dp[i][j-v[i]]+w[i])</script><p>利用这一推式可得最终的答案就是令$dp[n][j] \le W$的最大的j。此时，这种DP方式的复杂度即为$O(b\sum_i v_i)$。</p><p>此类的改变DP对象，改变DP递推关系式的方法在DP问题中十分常见。再如</p><p><strong>多重部分和问题：</strong></p><blockquote><p>有n种不同大小的数字$a_i$，每种各$m_i$个，判断是否可以从这些数字之中选出若干使它们的和恰好为K。</p></blockquote><p>朴素的想法是定义 dp[i+1][j]:=用从0到i这i+1种数能否能加和成j。递推关系如下：</p><script type="math/tex; mode=display">dp[i+1][j] = (0\le k\le m_i,且k\times a_i \le j时，存在使dp[i][j-k\times a_i]为真的k)</script><p>代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">int</span> n, k, a[MAX_N], m[MAX_N];</span><br><span class="line"><span class="keyword">bool</span> dp[MAX_N+<span class="number">1</span>][MAX_K+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=K;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=m[i]&amp;&amp;k*a[i]&lt;=j;k++)</span><br><span class="line">dp[i+<span class="number">1</span>]][j] |= dp[i][j-k*a[i]]</span><br><span class="line"><span class="keyword">return</span> dp[n][K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法的复杂度是$O(K\sum_i m_i)$，这样不够好。一般用DP求取bool结果的话会有很大的浪费，相反如果我们在此问题中用dp数组存储$a_i$这个数还剩下多少：<br>dp[i+1][j]:=用从0到i这i+1种数加和得到j时，i种数最多能剩余多少个( 不能加得j时为-1)</p><script type="math/tex; mode=display">\begin{equation}  dp[i+1][j] = \left\{               \begin{array}{**lr**}               m_i, & (dp[i][j]\ge 0) \\               -1, & (j< a_i 或者 dp[i+1][j-a_i] \le 0) \\              dp[i+1][j-a_i]-1 & (其他)                \end{array}  \right.  \end{equation}</script><p>这样，只要看最终是否满足$dp[n][K] \ge 0$就知道答案了。这个递推式可以在O(nK)时间内计算出结果，再利用数组重复利用，可以得到以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_K+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j]&gt;=<span class="number">0</span>) dp[j]=m[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&lt;a[i]|| dp[j-a[i]] &lt;= <span class="number">0</span>) dp[j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[j] = dp[j-a[i]] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[K]&gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-3-1-记忆化搜索与动态规划&quot;&gt;&lt;a href=&quot;#2-3-1-记忆化搜索与动态规划&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 记忆化搜索与动态规划&quot;&gt;&lt;/a&gt;2.3.1 记忆化搜索与动态规划&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;01 背包问题&lt;/strong&gt;&lt;br&gt;有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX_N = &lt;span class=&quot;number&quot;&gt;10010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; w[MAX_N], v[MAX_N];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从index为i的物品开始挑选总重小于j的部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==n) &lt;span class=&quot;comment&quot;&gt;//没有剩余的物品了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(w[i]&amp;gt;j)&lt;span class=&quot;comment&quot;&gt;//index为i的物品重量大于剩余总重&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = max(rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j),rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j-w[i]) + v[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, rec(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,W));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。&lt;br&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>最基础的穷竭搜索——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/23/%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/23/最基础的穷竭搜索——《挑战程序设计竞赛》/</id>
    <published>2019-06-23T04:03:18.000Z</published>
    <updated>2019-06-24T04:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-4-深度优先搜索"><a href="#2-1-4-深度优先搜索" class="headerlink" title="2.1.4 深度优先搜索"></a>2.1.4 深度优先搜索</h3><p> [<a href="http://poj.org/problem?id=2386" target="_blank" rel="noopener">http://poj.org/problem?id=2386</a>]:     “Lake Counting”</p><blockquote><p>有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)<br>www<br>w.w<br>www</p></blockquote><p>从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。<br>使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。</p><a id="more"></a><h3 id="2-1-6-特殊状态的枚举"><a href="#2-1-6-特殊状态的枚举" class="headerlink" title="2.1.6 特殊状态的枚举"></a>2.1.6 特殊状态的枚举</h3><p>C++的algorithm库中提供了next_permutation这一函数，可以把n给元素共n!种不同的排列生成出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> used[MAX_N];</span><br><span class="line"><span class="keyword">int</span> perm[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成&#123;0, 1, 2, 3,..., n-1&#125;的n!种排列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation1</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos == n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;perm[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//针对perm的index为pos的位置，究竟使用0~n-1种的哪一个进行循环 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">perm[pos] = i;</span><br><span class="line">used[i] = <span class="literal">true</span>;</span><br><span class="line">permutation1(pos + <span class="number">1</span>, n);</span><br><span class="line">used[i] = <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">permutation1(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用函数时，主调函数所拥有的局部变量等信息需要存储在特定的内存区域，这个区域叫做栈内存区；另一方面，利用new或者malloc进行分配的内存区域叫做堆内存。<br>栈内存在程序启动时被统一分配，此后不能再扩大，由于这一区域有上限，所以函数的递归深度也有上限。<br>显式初始化全局变量被保存在数据段种，未显式初始化的全局变量保持在BSS段中。使用全局变量可以减小栈溢出的危险。</p></blockquote><hr><h2 id="2-2-贪心法"><a href="#2-2-贪心法" class="headerlink" title="2.2 贪心法"></a>2.2 贪心法</h2><ol><li>[<a href="http://poj.org/problem?id=3617" target="_blank" rel="noopener">http://poj.org/problem?id=3617</a>]:     “Best Cow Line”</li></ol><blockquote><p>已知一段长度为N的字符串S，构造一个字典序最小的字符串T。起初T为空串，随后反复进行下列任意操作。<br>-从S的头部删除一个字符，加到T的尾部<br>-从S的尾部删除一个字符，加到T的尾部</p></blockquote><p>贪心算法很容易想到：不断取S的开头和末尾中较小的一个字符放到T的末尾。如果两个字符相等，那么就不断比较下一个内部字符的大小。</p><ol><li>[<a href="http://poj.org/problem?id=3253" target="_blank" rel="noopener">http://poj.org/problem?id=3253</a>]:     “Fence Repair”<blockquote><p>有一位农夫要把一个木板(长度为 N 块木板长度之和)使用 (N-1) 次锯成 N 块给定长度的小木板，每次锯都要收取一定费用，这个费用就是当前锯的这个木板的长度，给定各个要求的小木板的长度，及小木板的个数  N，求最小的费用。</p></blockquote></li></ol><p>切割的方法可以参见如下的二叉树：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     15</span><br><span class="line">    /  \</span><br><span class="line">  7      8</span><br><span class="line"> / \    / \</span><br><span class="line">3   4  5   3</span><br><span class="line">          / \</span><br><span class="line">         1   2</span><br></pre></td></tr></table></figure></p><p>一个叶子就相当于一个小木板，那么开销的合计即为：</p><script type="math/tex; mode=display">\sum 小木板的长度 \times 小木板节点的深度</script><p>此时最佳的切割方式为：<strong>最短的板与次短的板的节点应当是兄弟节点</strong></p><p>不妨将$L_i$按大小顺序排列，那么最短的板$L_1$与次短的板$L_2$应当为兄弟节点，因为切割是自由的不妨当作$L_1$和$L_2$是最后切开的，那么这次切割之前就有：</p><script type="math/tex; mode=display">(L_1+L_2), L_3, L_4, ... ,L_N</script><p>这样的N-1块木板存在。之后递归第将这N-1块木板的问题求解，每次加上最短的板与次短的板的长度之和即得解。时间复杂度为$O(N^2)$。事实上最佳的复杂度为$O(NlogN)$，之后将会学到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;L[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(N&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mii1 = <span class="number">0</span>, mii2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L[mii1]&gt;L[mii2])swap(mii1,mii2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L[i]&lt;L[mii1])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = mii1;</span><br><span class="line">mii1 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]&lt;L[mii2])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = L[mii1] + L[mii2];</span><br><span class="line">ans += t;</span><br><span class="line"><span class="keyword">if</span>(mii1==N<span class="number">-1</span>)swap(mii1,mii2);</span><br><span class="line">L[mii1] = t;</span><br><span class="line">L[mii2] = L[N<span class="number">-1</span>];</span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-1-4-深度优先搜索&quot;&gt;&lt;a href=&quot;#2-1-4-深度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;2.1.4 深度优先搜索&quot;&gt;&lt;/a&gt;2.1.4 深度优先搜索&lt;/h3&gt;&lt;p&gt; [&lt;a href=&quot;http://poj.org/problem?id=2386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=2386&lt;/a&gt;]:     “Lake Counting”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)&lt;br&gt;www&lt;br&gt;w.w&lt;br&gt;www&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。&lt;br&gt;使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
</feed>
