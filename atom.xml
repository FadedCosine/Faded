<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhixian Yang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-28T04:23:38.286Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhixian Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分桶法和平方分割——《挑战程序设计竞》</title>
    <link href="http://yoursite.com/2019/06/28/%E5%88%86%E6%A1%B6%E6%B3%95%E5%92%8C%E5%B9%B3%E6%96%B9%E5%88%86%E5%89%B2%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/28/分桶法和平方分割——《挑战程序设计竞》/</id>
    <published>2019-06-28T04:23:38.000Z</published>
    <updated>2019-06-28T04:23:38.286Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>树状数组——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/28/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/28/树状数组——《挑战程序设计竞赛》/</id>
    <published>2019-06-28T03:46:32.000Z</published>
    <updated>2019-06-28T04:25:19.571Z</updated>
    
    <content type="html"><![CDATA[<p>树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。给一个初始值全为0的数列，$a_1, a_2, \cdots, a_n$，树状数组可以进行如下操作：</p><ul><li>给定i，计算$a_1+a_2+\cdots+a_i$</li><li>给定i和x，执行$a_i+=x$ </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。给一个初始值全为0的数列，$a_1, a_2, \cdots, a_n$，树状数组可以进行如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>线段树——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/27/%E7%BA%BF%E6%AE%B5%E6%A0%91%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/27/线段树——《挑战程序设计竞赛》/</id>
    <published>2019-06-27T14:07:52.000Z</published>
    <updated>2019-06-28T04:25:21.632Z</updated>
    
    <content type="html"><![CDATA[<p>线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点（并非完全二叉树！！！）。实际应用时一般还要开4N的数组以免越界。</p><p>线段树的构造代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxind = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> segTree[maxind * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[maxind]; </span><br><span class="line"><span class="comment">/* 构造函数，得到线段树 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (begin == end)  </span><br><span class="line">        segTree[node] = <span class="built_in">array</span>[begin]; <span class="comment">/* 只有一个元素,节点记录该单元素 */</span></span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;   </span><br><span class="line">    <span class="comment">/* 递归构造左右子树 */</span> </span><br><span class="line">        build(<span class="number">2</span>*node, begin, (begin+end)/<span class="number">2</span>);  </span><br><span class="line">        build(<span class="number">2</span>*node+<span class="number">1</span>, (begin+end)/<span class="number">2</span>+<span class="number">1</span>, end); </span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 回溯时得到当前node节点的线段信息，保存最小值 */</span>  </span><br><span class="line">    <span class="keyword">if</span> (segTree[<span class="number">2</span> * node] &lt;= segTree[<span class="number">2</span> * node + <span class="number">1</span>])  </span><br><span class="line">        segTree[node] = segTree[<span class="number">2</span> * node];  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        segTree[node] = segTree[<span class="number">2</span> * node + <span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = <span class="number">1</span>, <span class="built_in">array</span>[<span class="number">1</span>] = <span class="number">2</span>,<span class="built_in">array</span>[<span class="number">2</span>] = <span class="number">2</span>, <span class="built_in">array</span>[<span class="number">3</span>] = <span class="number">4</span>, <span class="built_in">array</span>[<span class="number">4</span>] = <span class="number">1</span>, <span class="built_in">array</span>[<span class="number">5</span>] = <span class="number">3</span>;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线段树的主要操作包括区间查询（查询给定区间的最小值）和给定节点的更新。</p><p><strong>区间查询</strong> int query(int node, int begin, int end, int left, int right);<br>时间复杂度$O(\log n)$。<br>（其中node为当前查询节点，begin,end为当前节点存储的区间，left,right为此次query所要查询的区间，实际上我们只想要查询[left, right)的最小值其他的参数是为了计算方便传入的）<br>线段树区间查询的主要思想是把所要查询的区间[a,b]划分为线段树上的节点，然后将这些节点代表的区间合并起来得到所需信息：（对于节点存储对应区间最小值的线段树来说）</p><ul><li>如果所查询区间和当前节点对应的区间完全没有交集，那么就返回一个不影响答案的值</li><li>如果所查询的区间包含了当前节点对应的区间，那么就返回当前节点的值</li><li>以上两种情况都不满足的话，就对两个儿子递归处理，返回两个结果中的较小值<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span>  </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> p1, p2;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  查询区间和要求的区间没有交集  */</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt; end || right &lt; begin)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  if the current interval is included in  */</span>  </span><br><span class="line">    <span class="comment">/*  the query interval return segTree[node]  */</span></span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right)  </span><br><span class="line">        <span class="keyword">return</span> segTree[node];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  compute the minimum position in the  */</span></span><br><span class="line">    <span class="comment">/*  left and right part of the interval  */</span> </span><br><span class="line">    p1 = query(<span class="number">2</span> * node, begin, (begin + end) / <span class="number">2</span>, left, right); </span><br><span class="line">    p2 = query(<span class="number">2</span> * node + <span class="number">1</span>, (begin + end) / <span class="number">2</span> + <span class="number">1</span>, end, left, right);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/*  return the expect value  */</span> </span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="number">-1</span>)  </span><br><span class="line">        <span class="keyword">return</span> p2;  </span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="number">-1</span>)  </span><br><span class="line">        <span class="keyword">return</span> p1;  </span><br><span class="line">    <span class="keyword">if</span> (p1 &lt;= p2)  </span><br><span class="line">        <span class="keyword">return</span>  p1;  </span><br><span class="line">    <span class="keyword">return</span>  p2;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>单节点更新</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Updata</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> ind, <span class="keyword">int</span> add)</span><span class="comment">/*单节点更新*/</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>( begin == end )  </span><br><span class="line">    &#123;  </span><br><span class="line">        segTree[node] += add;  </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> m = ( left + right ) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(ind &lt;= m)  </span><br><span class="line">        Updata(node * <span class="number">2</span>,left, m, ind, add);  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        Updata(node * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, right, ind, add);  </span><br><span class="line">    <span class="comment">/*回溯更新父节点*/</span>  </span><br><span class="line">    segTree[node] = min(segTree[node * <span class="number">2</span>], segTree[node * <span class="number">2</span> + <span class="number">1</span>]);   </span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>有n根长度不尽相同的棍子，初始时它们首尾垂直相连，标号为1—n，第一根棍子的下端坐标为(0,0),上端坐标为(0,len[1]),其余棍子依次类推。接下来执行C此旋转，每次输入一个编号num和角度rad，使得第num根棍子和第num+1跟棍子间的逆时针角度变为rad度，求每次旋转后第n根棍子端点的坐标。</p></blockquote><p>解题思路源于[<a href="https://www.cnblogs.com/staginner/archive/2012/04/07/2436436.html" target="_blank" rel="noopener">https://www.cnblogs.com/staginner/archive/2012/04/07/2436436.html</a>]</p><p>如果我们将其中某一个线段旋转β角，那么这个线段上方的所有线段都会旋转β角，这就很类似线段树中的对区间加上一个常数的问题了，于是不妨向着线段树的思路去想。</p><p>接下来一个问题就是β角是相对于谁的，换句话说我们所谓的每个线段都会旋转β角，那么是绕谁旋转的？实际上，如果我们局限于把线段的旋转就会看成是绕某个定点的，这个点就是我们旋转的线段和它下面那个不动的线段的交点，再这样想下去我们就没法处理了，因为每个旋转操作所绕的定点不是唯一的，我们没办法把所有的旋转操作都统一到一起，那么我们就没办法把旋转操作叠加，这样就没法使用线段树了。</p><p>但如果换个思路的话，实际上β角还等于这个线段旋转后所在的直线和未旋转前所在的直线的夹角，而直线的夹角是可以用向量的夹角表示的，如果我们把线段看成一个向量的话那么β角就是这个向量旋转的角度。如果这么看的话，所有的旋转操作就可以统一到一起了，也可以叠加了，因为这样不会局限于绕哪个定点，只需要把向量自身旋转一下就OK。</p><p>那么我们维护下面两个值：</p><ul><li>把对应线段集合转到垂直方向（也就是整体旋转，让第一条线段垂直之后，注意并不是单独旋转第一条线段），从第一条线段的起点指向最后一条线段的终点的向量。</li><li>（如果该节点有儿子节点）两个儿子节点对应的部分连接之后，右儿子需要转动的角度（因为s和s+1的角度改变，如果s在左儿子中，那么在全局坐标系内，右儿子也会相应的需要旋转改变坐标）</li></ul><p>也就是说，如果节点i表示的向量是$vx_i, vy_i$，角度是$ang_i$，两个儿子节点是chl和chr，那么就有：</p><script type="math/tex; mode=display">vx_i = vx_{chl}+(\cos(ang_i)\times vx_{chr} - \sin(ang_i)\times vy_{chr})vy_i = vy_{chl}+(\sin(ang_i)\times vx_{chr} + \cos(ang_i)\times vy_{chr})</script><p><img src="/.com//复数向量旋转.png" alt="复数向量旋转"><br>这样每次更新可在$O(\log n)$的时间内完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点（并非完全二叉树！！！）。实际应用时一般还要开4N的数组以免越界。&lt;/p&gt;
&lt;p&gt;线段树的构造代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>常用技巧精选——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/27/%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E7%B2%BE%E9%80%89%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/27/常用技巧精选——《挑战程序设计竞赛》/</id>
    <published>2019-06-27T03:31:23.000Z</published>
    <updated>2019-06-27T14:08:57.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-常用技巧精选（一）"><a href="#3-2-常用技巧精选（一）" class="headerlink" title="3.2 常用技巧精选（一）"></a>3.2 常用技巧精选（一）</h2><h3 id="3-2-1-尺取法"><a href="#3-2-1-尺取法" class="headerlink" title="3.2.1 尺取法"></a>3.2.1 尺取法</h3><blockquote><p>给出N个数字：$a<em>0, a_1, \cdots, a</em>{n-1}$，每个数字不大于10000，给出一个整数S，在N个数字中挑选出连续子序列，使这个子序列和大于或等于S。请问这个连续的子序列长度的最小值。</p></blockquote><a id="more"></a><h3 id="3-2-2-反转（开关问题）"><a href="#3-2-2-反转（开关问题）" class="headerlink" title="3.2.2 反转（开关问题）"></a>3.2.2 反转（开关问题）</h3><p>[<a href="http://poj.org/problem?id=3276" target="_blank" rel="noopener">http://poj.org/problem?id=3276</a>]:     “Face The Right Way”</p><blockquote><p>N头牛排成一列，头要么朝前要么朝后，现在要求确定一个连续反转牛头的连续区间，区间长度为K，要使得所有牛都朝前，且反转次数M尽可能小。求出最小的操作数M和对应的最小的K。</p></blockquote><p>首先，交换区间反转顺序的先后对结果毫无影响。此外，可以知道对同一个区间进行两次以上的反转是多余的，由此，问题就转化成了求需要被反转的区间的集合。于是我们先考虑一下最左端的牛。包含这头牛的区间只有一个，因此如果这头牛面朝前方，我们就能知道这个区间不需要反转。反之，如果这头牛面朝后方，对应的区间就必须进行反转了。而且在此之后这个最左的区间就再也不需要考虑了。这样一来，通过首先考虑最左端的牛，问题的规模就缩小了1。不断的重复下去，就可以无需搜索求出最少所需的反转次数了。</p><p>然而，我们需要遍历K，对于每个K我们都要从最左端开始考虑N头牛的情况，最坏情况需要进行N-K+1次的反转操作，而每次操作又要反转K头牛，所以总的复杂度是$O(N^3)$。</p><p>对于区间反转部分进行优化：优化的方法是计算第i头牛是否要翻转的时候，只需要知道第i-k+1头到第i头之间的翻转次数，那么维护这个次数即可。</p><script type="math/tex; mode=display">f[i]:=区间[i,i+K-1]进行了反转的话则为1，否则为0</script><p>这样，在考虑第i头年时，如果$\sum_{j=i-K+1}^{i-1}f[j]$为奇数的话，则这头牛的方向与起始方向是相反的，否则方向不变。依据如下公式</p><script type="math/tex; mode=display">\sum_{j=(i+1)-K+1}^{i}f[j] = \sum_{j=i-K+1}^{i-1}f[j]+f[i]-f[i-K+1]</script><p>使用尺取法，每次向右移动一格，需要看看左边出去的那格（第i-k格）是翻转了没有，维护好f数组即可。这样扫一遍的复杂度是$O(n)$，那么总复杂度就是$O(n^2)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dir[M];</span><br><span class="line"><span class="keyword">int</span> f[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//当前维护的f的和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+K&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((dir[i]+sum) % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line"><span class="comment">//最前端的牛面朝后方</span></span><br><span class="line">&#123;</span><br><span class="line">res++;</span><br><span class="line">f[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += f[i];</span><br><span class="line"><span class="keyword">if</span>(i-K+<span class="number">1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum -= f[i-K+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查剩下的牛，从n-K+1开始，是否有面朝后方的情况</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-K+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((dir[i]+sum)%<span class="number">2</span>!=<span class="number">0</span>) <span class="comment">//无解 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i-K+<span class="number">1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">sum-=f[i-K+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">dir[i]=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dir[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>有一个m*n的棋盘，每个格子上是0或1，每次可以对一个格子做一次翻转操作，将被操作的格子和上下左右4个格子的0/1翻转。问做少做多少次翻转可以将所有格子翻转成0，输出翻转方案。没有方案时输出“IMPOSSIBLE”。<br>$1\le m, n \le 15$</p></blockquote><p>回顾一下前情，在之前POJ3276问题中，让最左边的牛反转的方法只有1种，可以直接判断当前的方案是否可行。然而，同样的方法在此题中不能行得通。不妨看最左上角的格子，这里除了翻转(1,1)之外，翻转(1,2)和(2,1)都可以把这个格子翻转，所以之前的直接确定的方法在此行不通。</p><p>值得注意的一点是这题中的m，n特别小，简直就是在明示可以有某种枚举的方法。因为本题格子间的状态都是互相影响的，只能通过枚举第一行，逐行往下搜，如何搜索：如果从上到下搜索，<strong>当前行是否需要反转取决于上一行的状态，通过翻转当前行使上一行为0，而不是通过上一行翻转为0后，看当前行的状态判断自己是否需要翻转，否则还会继续影响上一行。</strong>意思就是不是在当前行中的翻转操作不是为了让当前行中的所有格子都为0，而是要让上一行的所有格子都为0。所以我们可以通过枚举第一行所有的状态，从第二行开始确定翻转状态，直到最后一行结束，如果可以保证最后一行都是0，那么方案可行，否则重新定义第一行的状态，继续搜索，找出使反转次数最少的方案。</p><h3 id="3-2-4-折半枚举（双向搜索）"><a href="#3-2-4-折半枚举（双向搜索）" class="headerlink" title="3.2.4 折半枚举（双向搜索）"></a>3.2.4 折半枚举（双向搜索）</h3><blockquote><p><strong>超大背包问题</strong><br>有重量和价值分别为$w_i, v_i$的n个物品，从这些物品中挑选总重量不超过W的物品，求所有挑选方案中价值总和的最大值<br>限制条件：$1 \le n \le 40, 1\le w_i, v_i \le 10^15, 1 \le W \le 10^15 $</p></blockquote><p>所谓超大背包问题，W的最大值是$10^15$，使用DP来求解背包问题的复杂度是$O(nW)$，因此不能解决这里的问题。但是n比较小，依此寻求枚举解法。</p><h3 id="3-2-5-坐标离散化"><a href="#3-2-5-坐标离散化" class="headerlink" title="3.2.5 坐标离散化"></a>3.2.5 坐标离散化</h3><blockquote><p>w*h的格子上画了n条垂直或水平的宽度为1的直线。求出这些线将格子划分成了多少个区域。<br>1&lt;=w,h&lt;=1000000.     1&lt;=n&lt;=500<br>样例：<br>w = 10, h = 10, n = 5<br>x1 = {1, 1, 4, 9, 10}<br>x2 = {6, 10, 4, 9, 10}<br>y1 = {4, 8, 1, 1, 6}<br>y2 ={4, 8, 10, 5, 10}</p></blockquote><p>理解了半天这个样例，意思是( (x1, y1), (x2, y2) )是一条直线。一般求解被分割出的区域的个数使用图的遍历如DFS和BFS算法，需要$w\times h$，但是这个问题中w和h最大为1000000，所以没办法创建出$w\times h$的数组，所以需要使用坐标离散化技巧。</p><p>数组里只需要存储有直线的行列以及前后的行列就足够了，这样的话大小最多$6n \times 6n$就足够了（x1的自己、前后，3个，x2的自己、前后，3个，因此则有 $6n \times 6n$）。创建出数组并利用搜索求出区域的个数。<strong>（区域可能很大，所以用递归函数实现的话可能会栈溢出）</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3-2-常用技巧精选（一）&quot;&gt;&lt;a href=&quot;#3-2-常用技巧精选（一）&quot; class=&quot;headerlink&quot; title=&quot;3.2 常用技巧精选（一）&quot;&gt;&lt;/a&gt;3.2 常用技巧精选（一）&lt;/h2&gt;&lt;h3 id=&quot;3-2-1-尺取法&quot;&gt;&lt;a href=&quot;#3-2-1-尺取法&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 尺取法&quot;&gt;&lt;/a&gt;3.2.1 尺取法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给出N个数字：$a&lt;em&gt;0, a_1, \cdots, a&lt;/em&gt;{n-1}$，每个数字不大于10000，给出一个整数S，在N个数字中挑选出连续子序列，使这个子序列和大于或等于S。请问这个连续的子序列长度的最小值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>数学问题的解题窍门——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/26/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E9%A2%98%E7%AA%8D%E9%97%A8%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/26/数学问题的解题窍门——《挑战程序设计竞赛》/</id>
    <published>2019-06-26T02:48:19.000Z</published>
    <updated>2019-06-26T14:14:45.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-6-2-有关素数的基础算法"><a href="#2-6-2-有关素数的基础算法" class="headerlink" title="2.6.2 有关素数的基础算法"></a>2.6.2 有关素数的基础算法</h3><p>埃氏筛法</p><blockquote><p>素数的个数：<br>给定整数n，请问n以内有多少个素数？</p></blockquote><p>首先将2到n范围内的所有整数写下来，其中最小的数字2是素数，将表中所有2的倍数都划去，表中剩余的最小数字是3，它不能被更小的数整除，所以是素数，再将所有3的倍数划去。以此类推：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[MAX_N]; <span class="comment">//第i个素数</span></span><br><span class="line"><span class="keyword">bool</span> is_prime[MAX_N + <span class="number">1</span>];</span><br><span class="line"><span class="comment">//返回n以内素数的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)is_prime[i]=<span class="literal">true</span>;</span><br><span class="line">is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_prime[i])</span><br><span class="line">&#123;</span><br><span class="line">prime[p++] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;=n;j+=i) is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>埃氏筛法的复杂度仅有$O(n\log\log n)$。</p><a id="more"></a><h3 id="2-6-4快速幂运算"><a href="#2-6-4快速幂运算" class="headerlink" title="2.6.4快速幂运算"></a>2.6.4快速幂运算</h3><p>[<a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=947" target="_blank" rel="noopener">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=947</a>]:     “Carmicheal Numbers”</p><blockquote><p>我们把对任意的1&lt;x&lt;n都有$x^n\equiv x(mod n)$成立的合数n称为Carmichael Numbers。对于给定的整数n，判断它是不是Carmichael Number。</p></blockquote><p>考虑加速幂运算的方法，如果$n=x^k$，可以将其表示为</p><script type="math/tex; mode=display">x^n = ((x^2)^2) \cdots</script><p>只要做k次平方运算就可以轻松求得。因此我们可以先将n表示成2的幂次的和：</p><script type="math/tex; mode=display">n = 2^{k_1} + 2^{k_2} + 2^{k_2} + \cdots</script><p>就有：</p><script type="math/tex; mode=display">x^n = x^{2^{k_1}}x^{2^{k_2}}x^{2^{k_3}}\cdots</script><p>只要依此求$x^{2^{k_i}}$，最终可以得到$O(\log n)$的计算幂运算的复杂度。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x, ll n, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) res = res * x % mod;</span><br><span class="line">x = x * x % mod;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在遍历n，即可得解，复杂度为$O(n\log n)$。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-6-2-有关素数的基础算法&quot;&gt;&lt;a href=&quot;#2-6-2-有关素数的基础算法&quot; class=&quot;headerlink&quot; title=&quot;2.6.2 有关素数的基础算法&quot;&gt;&lt;/a&gt;2.6.2 有关素数的基础算法&lt;/h3&gt;&lt;p&gt;埃氏筛法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;素数的个数：&lt;br&gt;给定整数n，请问n以内有多少个素数？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先将2到n范围内的所有整数写下来，其中最小的数字2是素数，将表中所有2的倍数都划去，表中剩余的最小数字是3，它不能被更小的数整除，所以是素数，再将所有3的倍数划去。以此类推：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; prime[MAX_N]; &lt;span class=&quot;comment&quot;&gt;//第i个素数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; is_prime[MAX_N + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回n以内素数的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sieve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;=n;i++)is_prime[i]=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	is_prime[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = is_prime[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(is_prime[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			prime[p++] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*i;j&amp;lt;=n;j+=i) is_prime[j] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;埃氏筛法的复杂度仅有$O(n\log\log n)$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>图算法——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/25/%E5%9B%BE%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/25/图算法——《挑战程序设计竞赛》/</id>
    <published>2019-06-25T08:37:59.000Z</published>
    <updated>2019-06-25T14:44:50.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-5-2-图的表示"><a href="#2-5-2-图的表示" class="headerlink" title="2.5.2 图的表示"></a>2.5.2 图的表示</h3><p>邻接表可以直接用如下代码表示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; graph[MAX_V] 来表示邻接表 </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">边上有属性的情况：</span></span><br><span class="line"><span class="comment">struct edge &#123;int to, cost;&#125;</span></span><br><span class="line"><span class="comment">vector&lt;edge&gt; G[MAX_V];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-5-4-最短路问题"><a href="#2-5-4-最短路问题" class="headerlink" title="2.5.4 最短路问题"></a>2.5.4 最短路问题</h3><h4 id="1-单源最短路问题"><a href="#1-单源最短路问题" class="headerlink" title="1. 单源最短路问题"></a>1. 单源最短路问题</h4><p><strong>Bellman-Ford算法</strong><br>记从起点s出发到顶点i的最短距离为d[i]，则下述等式成立：</p><script type="math/tex; mode=display">d[i] = \min\{d[j]+(从j到i的边的权值| e=(j,i)\in E\}</script><p>设初值d[s]=0, d[i]=INF，再不断使用这条递推关系式更新d的值。<strong>只要图中不存在负圈，这样的更新操作就是有限的。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span><span class="keyword">int</span> from, to, cost&#125;;</span><br><span class="line">edge es[MAX_E]; <span class="comment">//边</span></span><br><span class="line"><span class="keyword">int</span> d[MAX_V];</span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shortest_path</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++) d[i] = INF;</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> update = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)</span><br><span class="line">&#123;</span><br><span class="line">edge e = es[i];</span><br><span class="line"><span class="keyword">if</span>(d[e.from]!=INF &amp;&amp; d[e.to]&gt;d[e.from]+e.cost)</span><br><span class="line">&#123;</span><br><span class="line">d[e.to] = d[e.from] + e.cost;</span><br><span class="line">update = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!update) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果图中不存在负圈，最短路径不会经过同一个顶点两次，while(true)最多执行|V|-1次（|V|个顶点，|V|-1条边），因此复杂度为 $O(|V|\times|E|)$。反之如果存在负圈，那么第|V|次循环种也会更新d的值，因此可以通过判断第V次是否仍更新了判断是否存在负圈。</p><p><strong>Dijkstra算法</strong><br>在没有负边的情况下，上述Bellman-Ford算法复杂度高很大一部分原因是，如果d[i]还不是最短距离即使进行d[j]=d[i]+(从i到j的边的权值)的更新，d[j]也不会是最短距离，而且即使d[i]没有变化，每一次循坏也要检查一遍从i出发的所有边，很浪费时间。因此可以对算法做出如下修改：</p><ul><li>找到最短距离已经确定的顶点，从它出发更新相邻顶点的最短距离</li><li>此后不用再关心1中的“最短距离已经确定的顶点”</li></ul><p>下面是使用STL的priority_queue的实现。在每次更新时往堆里插入当前最短距离和顶点的值对，当取出的最小值不是最短距离时，就丢弃这个值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to, cost;&#125;;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> d[MAX_V];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; que;</span><br><span class="line">fill(d,d+V,INF);</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line">que.push(P(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line">P p = que.top(); que.pop();</span><br><span class="line"><span class="keyword">int</span> v = p.second;</span><br><span class="line"><span class="keyword">if</span>(d[v] &lt; p.first) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(d[e.to] &gt; d[v]+e.cost)</span><br><span class="line">&#123;</span><br><span class="line">d[e.to] = d[v]+e.cost;</span><br><span class="line">que.push(P(d[e.to],e.to));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-6-图算法的应用"><a href="#2-5-6-图算法的应用" class="headerlink" title="2.5.6 图算法的应用"></a>2.5.6 图算法的应用</h3><blockquote><p>一共有n头牛，按编号顺序排成一排，有ml个关系好的牛的信息，有md个关系不好的牛的信息，对应输入的第一行的三个元素，接下来ml行，每行三个元素A,B,D，表示A牛和B牛相距不希望超过D，接下来md行，每行三个元素A,B,D表示A牛和B牛的相距至少要有D才行。求1号牛和n号牛的最大距离，如果距离无限大输出-2，如果无解输出-1。</p></blockquote><p>记第i头牛的位置是d[i]。首先，牛是按照编号顺序排列的，所以有$d[i] \le d[i+1]$。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-5-2-图的表示&quot;&gt;&lt;a href=&quot;#2-5-2-图的表示&quot; class=&quot;headerlink&quot; title=&quot;2.5.2 图的表示&quot;&gt;&lt;/a&gt;2.5.2 图的表示&lt;/h3&gt;&lt;p&gt;邻接表可以直接用如下代码表示：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; graph[MAX_V] 来表示邻接表 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;边上有属性的情况：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	struct edge &amp;#123;int to, cost;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	vector&amp;lt;edge&amp;gt; G[MAX_V];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>加工并存储数据的数据结构——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/25/%E5%8A%A0%E5%B7%A5%E5%B9%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/25/加工并存储数据的数据结构——《挑战程序设计竞赛》/</id>
    <published>2019-06-25T03:16:33.000Z</published>
    <updated>2019-06-25T03:58:33.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-4-4-并查集"><a href="#2-4-4-并查集" class="headerlink" title="2.4.4 并查集"></a>2.4.4 并查集</h3><p>并查集的实现（交大《数据结构》教材中的实现）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> disjoint[<span class="number">500000</span>]; <span class="comment">//使用时别忘了先全部初始化为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(disjoint[x] &lt; <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> disjoint[x] = find(disjoint[x]); <span class="comment">//路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root1 == root2) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(disjoint[root1] &gt; disjoint[root2])<span class="comment">// disjoint[root2]为负值，其绝对值为并查集的大小</span></span><br><span class="line">&#123;</span><br><span class="line">disjoint[root2] += disjoint[root1];</span><br><span class="line">disjoint[root1] =root2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">disjoint[root1] += disjoint[root2];</span><br><span class="line">disjoint[root2] =root1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>并查集中根节点所存储的数据都为负值，其绝对值为当前根节点这一组中节点的个数。对于n个元素的并查集进行一次操作的复杂度（均摊复杂度）是$O(\alpha(n))$。在这里，$\alpha(n)$是阿克曼(Ackermann)函数的反函数，比$O(\log(n))$还要快。</p><blockquote><p>动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。 现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。<br>有人用两种说法对这N个动物所构成的食物链关系进行描述：<br>“1 X Y”，表示X和Y是同类。<br>“2 X Y”，表示X吃Y。<br>此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。<br>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。<br>你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。</p></blockquote><p>起初并不知道每只动物的种类，我想直到所有信息输入完全也很难推断出每只动物是啥种类，所以不妨对每只i创建3个元素i-A, i-B, i-C, 并用这$3\times N$个元素建立并查集，这个并查集维护如下信息：</p><ul><li>i-x表示“i属于种类x”。</li><li>并查集里的每一个组表示组内所有元素代表的情况都同时发生或不发生。</li></ul><p>对于每一条信息，只需按照下面进行操作：</p><ul><li>第一种，x和y属于同一种类：合并x-A和y-A、x-B和y-B、x-C和y-C。</li><li>第二种，x吃y：                       合并x-A和y-B、x-B和y-C、x-C和y-A。</li></ul><p>在合并之前判断这次合并是否会产生矛盾。例如在第一种信息的情况下，需要检查x-A和y-B或者y-C是否在同一组。代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略了并查集的实现代码</span></span><br><span class="line"><span class="keyword">int</span> N, K; <span class="comment">//N种动物，K条信息</span></span><br><span class="line"><span class="keyword">int</span> T[MAX_K], X[MAX_K], Y[MAX_K]; <span class="comment">//T表示信息的类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = T[i];</span><br><span class="line"><span class="keyword">int</span> x = X[i] - <span class="number">1</span>, y = Y[i] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span> || N&lt;=x || y&lt;<span class="number">0</span> || N&lt;= y)</span><br><span class="line">&#123;</span><br><span class="line">ans++；</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//x-A和y-B或者y-C是否在同一组，说明已经相信了全面一组信息说，x与y不同类</span></span><br><span class="line"><span class="keyword">if</span>(find(x) == find(y+N) || find(x) == find(y+<span class="number">2</span>*N) ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Union(x,y);</span><br><span class="line">Union(x+N,y+N);</span><br><span class="line">Union(x+<span class="number">2</span>*N,y+<span class="number">2</span>*N);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(x) == find(y) || find(x) == find(y+<span class="number">2</span>*N) ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Union(x,y+N);</span><br><span class="line">Union(x+N,y+<span class="number">2</span>*N);</span><br><span class="line">Union(x+<span class="number">2</span>*N,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-4-4-并查集&quot;&gt;&lt;a href=&quot;#2-4-4-并查集&quot; class=&quot;headerlink&quot; title=&quot;2.4.4 并查集&quot;&gt;&lt;/a&gt;2.4.4 并查集&lt;/h3&gt;&lt;p&gt;并查集的实现（交大《数据结构》教材中的实现）：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; disjoint[&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//使用时别忘了先全部初始化为-1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(disjoint[x] &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; disjoint[x] = find(disjoint[x]); &lt;span class=&quot;comment&quot;&gt;//路径压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; root1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; root2)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root1 == root2) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(disjoint[root1] &amp;gt; disjoint[root2])&lt;span class=&quot;comment&quot;&gt;// disjoint[root2]为负值，其绝对值为并查集的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root2] += disjoint[root1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root1] =root2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root1] += disjoint[root2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		disjoint[root2] =root1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>记录结果再利用的动态规划——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/24/%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E5%86%8D%E5%88%A9%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/24/记录结果再利用的动态规划——《挑战程序设计竞赛》/</id>
    <published>2019-06-24T04:00:51.000Z</published>
    <updated>2019-06-26T14:45:01.835Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-3-1-记忆化搜索与动态规划"><a href="#2-3-1-记忆化搜索与动态规划" class="headerlink" title="2.3.1 记忆化搜索与动态规划"></a>2.3.1 记忆化搜索与动态规划</h3><blockquote><p><strong>01 背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。</p></blockquote><p>循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> w[MAX_N], v[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//从index为i的物品开始挑选总重小于j的部分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rec(<span class="number">0</span>,W));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_N+<span class="number">1</span>][MAX_N+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j]&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(i==n) <span class="comment">//没有剩余的物品了</span></span><br><span class="line">&#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(w[i]&gt;j)<span class="comment">//index为i的物品重量大于剩余总重</span></span><br><span class="line">&#123;</span><br><span class="line">res = rec(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">res = max(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i]) + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j] = res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));<span class="comment">//-1表示尚未被计算过，初始化整个数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rec(<span class="number">0</span>,W));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中直观地实现了我们记录第一次计算结果的想法，这就是记忆化搜索，也就是dp的萌芽。rec函数参数的组合最大nW种，所以时间复杂度为O(nW)。</p><blockquote><p>memset进行初始化是按照1字节为单位对内存进行填充的，因为-1的二进制表示每一个比特位都是1，所以可以用memset初始化为-1，0也可以用memset初始化，但是不能初始化从1之类的数值，因为1的二进制表示为00000001，memset不能细粒度到每个比特。</p></blockquote><p>但这并不是正经的DP格式，DP需给出递推关系，如下：</p><p>定义dp[i+1][j]:=从0到i这i+1个物品中选出总重量不超过j的物品时总价值的最大值,则有</p><script type="math/tex; mode=display">\begin{equation}  dp[0][j]=0 \\dp[i+1][j] = \left\{               \begin{array}{**lr**}               dp[i][j], & (j<w[i]) \\               max(dp[i][j],dp[i][j-w[i]]+v[i]) & (其他)                \end{array}  \right.  \end{equation}</script><p>基此，因为dp为两维数值，两层循环的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i]) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line"><span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = max(dp[i][j],dp[i][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-2-进一步探索递推关系"><a href="#2-3-2-进一步探索递推关系" class="headerlink" title="2.3.2 进一步探索递推关系"></a>2.3.2 进一步探索递推关系</h3><blockquote><p><strong>完全背包问题</strong><br>有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值，在这里，每种物品可以挑选任意多件</p></blockquote><p>给出递推关系，很容易得到：<br>dp[0][j] = 0<br>dp[i+1][j] = max{dp[i][j-k$\times$w[i]]+k$\times$v[i] | 0 $\le$ k}<br>这个递推关系中出现了一个新变量k，故如果按照这个递推关系来写代码的话，在dp二维数组的两层循环下还需加一层k的循环，k$\times$w[i] $\le$ j。三层循环的复杂度为$O(NW^2)$。</p><p>然而，在dp[i+1][j]的计算中选择k(k$\ge$1)个的情况，与在dp[i+1][j-w[i]]的计算中选择k-1个的情况是相同的，所以dp[i+1][j]的递推中k$\ge$1部分的计算已经在dp[i+1][j-w[i]]的计算中完成了。那么可按照如下方式进行变形</p><script type="math/tex; mode=display">\begin{align}& \max\{ dp[i][j-k\times w[i]+k\times v[i]|0 \le k]\}\\& =\max(\{ dp[i][j],\max\{dp[i][j-k\times w[i]]+k\times v[i]|1 \le k\})\\& =\max(\{ dp[i][j],\max\{dp[i][(j-w[i])-k\times w[i]]+v[i]+k\times v[i]|0 \le k\})\\& = \max(dp[i][j], dp[i+1][j-w[i]]+v[i]) \\\end{align}</script><p>基此，完全背包问题的代码如下，时间复杂度为$O(bW)$，这给我的区分是，递推关系中多出一个未知数的求最值或者是求和的，大都可<strong>变换形式消除未知数</strong>，从而降维，减少时间复杂度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;W;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;w[i]) dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">            <span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = max(dp[i][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>01背包问题和完全背包问题都可以重复利用数组来节省内存空间，因为01背包问题的dp[i+1]计算时只需要dp[i]，可以改进代码如下：<br><strong>01背包问题</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_W+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=W;j&gt;=w[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>完全背包问题</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_W+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=w[i];j&lt;=W;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        dp[j] = max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两者的差异只有第二层循环的方向，这样写极易留下bug，需要格外小心。</p><p>01背包问题，换限制，若W很大，如 $1\le W \le 10^9$，这样原先的$O(nW)$便不能通过测试，而相较重量而言，此时价值的范围比较小，所以可以试着改变DP的对象，之前的方法中对于不同的重量限制计算最大的价值，这次不妨针对不同的价值计算最小的重量。</p><p>定义dp[i+1][j]:=从0到i这i+1个物品中选出价值总和为j时的物品总重量的最小值,则有</p><blockquote><p>dp[0][0] = 0<br>dp[0][j] = INF </p></blockquote><p>便可顺理成章地得到递推关系式：</p><script type="math/tex; mode=display">dp[i+1][j] = \min(dp[i][j],dp[i][j-v[i]]+w[i])</script><p>利用这一推式可得最终的答案就是令$dp[n][j] \le W$的最大的j。此时，这种DP方式的复杂度即为$O(b\sum_i v_i)$。</p><p>此类的改变DP对象，改变DP递推关系式的方法在DP问题中十分常见。再如</p><p><strong>多重部分和问题：</strong></p><blockquote><p>有n种不同大小的数字$a_i$，每种各$m_i$个，判断是否可以从这些数字之中选出若干使它们的和恰好为K。</p></blockquote><p>朴素的想法是定义 dp[i+1][j]:=用从0到i这i+1种数能否能加和成j。递推关系如下：</p><script type="math/tex; mode=display">dp[i+1][j] = (0\le k\le m_i,且k\times a_i \le j时，存在使dp[i][j-k\times a_i]为真的k)</script><p>代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="keyword">int</span> n, k, a[MAX_N], m[MAX_N];</span><br><span class="line"><span class="keyword">bool</span> dp[MAX_N+<span class="number">1</span>][MAX_K+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=K;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=m[i]&amp;&amp;k*a[i]&lt;=j;k++)</span><br><span class="line">dp[i+<span class="number">1</span>]][j] |= dp[i][j-k*a[i]]</span><br><span class="line"><span class="keyword">return</span> dp[n][K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法的复杂度是$O(K\sum_i m_i)$，这样不够好。一般用DP求取bool结果的话会有很大的浪费，相反如果我们在此问题中用dp数组存储$a_i$这个数还剩下多少：<br>dp[i+1][j]:=用从0到i这i+1种数加和得到j时，i种数最多能剩余多少个( 不能加得j时为-1)</p><script type="math/tex; mode=display">\begin{equation}  dp[i+1][j] = \left\{               \begin{array}{**lr**}               m_i, & (dp[i][j]\ge 0) \\               -1, & (j< a_i 或者 dp[i+1][j-a_i] \le 0) \\              dp[i+1][j-a_i]-1 & (其他)                \end{array}  \right.  \end{equation}</script><p>这样，只要看最终是否满足$dp[n][K] \ge 0$就知道答案了。这个递推式可以在O(nK)时间内计算出结果，再利用数组重复利用，可以得到以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[MAX_K+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j]&gt;=<span class="number">0</span>) dp[j]=m[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&lt;a[i]|| dp[j-a[i]] &lt;= <span class="number">0</span>) dp[j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> dp[j] = dp[j-a[i]] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[K]&gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-区间DP"><a href="#2-3-3-区间DP" class="headerlink" title="2.3.3 区间DP"></a>2.3.3 区间DP</h3><p>[<a href="https://code.google.com/codejam/contest/189252/dashboard#s=p2" target="_blank" rel="noopener">https://code.google.com/codejam/contest/189252/dashboard#s=p2</a>]:     “Bribe the Prisoners”</p><blockquote><p>有t 组测试数据，每组数据中有n个人在监狱，想要放出m个人，每放出一个人，他周围的人（两边连续的直到碰到空的监狱或者尽头）都要贿赂1块钱，没放出一个人就对应地空出一个空监狱。问最少的总花费。</p></blockquote><p>考虑释放在囚犯A[i]到囚犯A[j]（不包括两端的囚犯）的囚犯时，所需的金币是释放其中$(A[i],A[j])$中一人A[k]所需的$A[j]-A[i]-2$，加上释放$(A[i],A[k])$和$(A[k],A[j])$中想要放出的囚犯所需的金币，要最小化总花费也就是要最小化释放(A[0],A[n+1])中想要释放的囚犯所需的金币。用DP来解决问题，定义</p><script type="math/tex; mode=display">dp[i][j]:=释放在囚犯A[i]到囚犯A[j]（不包括两端的囚犯）中想要释放的囚犯时，所需的最小金币总数。</script><p>则有状态转移递推关系如下（因为不包括两端的囚犯所以是减2）：</p><script type="math/tex; mode=display">dp[i][j] = \min(dp[i][k]+dp[k][j]| 1<k<j) + A[j]-A[i]-2</script><p>为了方便，我们把两端也加入，这样变为A[0]=0, A[m+1]=n+1。初始化最小的区间即$dp[i][i+1] = 0$。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m ;</span><br><span class="line"><span class="comment">//区间动态规划</span></span><br><span class="line"><span class="comment">//bribe the prisoner</span></span><br><span class="line"><span class="comment">//定义一个二维数组。依次用来填充最小的花费。</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">109</span>][<span class="number">109</span>];<span class="comment">//表示从第i个填充到j个时的最小花费。</span></span><br><span class="line"><span class="comment">//同时定义一个存放罪犯的数组。</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">109</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    a[m+<span class="number">1</span>]=n+<span class="number">1</span>;<span class="comment">//为了解决边界问题。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i++)</span><br><span class="line">        dp[i][i+<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//初始化，因为所有的从i到i+1的花费除去边界都是0；</span></span><br><span class="line">    <span class="comment">//循环求解。定义w表示区间的范围，w=2表示跨度为2的情况，也就是该区间里面只有一个要释放的犯人</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">2</span>; w&lt;=m+<span class="number">1</span>; w++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//每次选的范围都是w，从i到j 的范围内的最小值等于从i到K加从第k到j的最小值。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+w&lt;=m+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此处用到的k恰是其中的中值。</span></span><br><span class="line">            <span class="keyword">int</span> j=i+w,tmp=INT_MAX;<span class="comment">//tmp用来保存当前区间的当前最好情况的花费金币数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>; k&lt;j; k++)</span><br><span class="line">                tmp=min(tmp,dp[i][k]+dp[k][j]);</span><br><span class="line">            dp[i][j]=tmp+a[j]-a[i]<span class="number">-2</span>;<span class="comment">//此处就是当前区间最小值。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">0</span>][m+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-3-1-记忆化搜索与动态规划&quot;&gt;&lt;a href=&quot;#2-3-1-记忆化搜索与动态规划&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 记忆化搜索与动态规划&quot;&gt;&lt;/a&gt;2.3.1 记忆化搜索与动态规划&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;01 背包问题&lt;/strong&gt;&lt;br&gt;有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX_N = &lt;span class=&quot;number&quot;&gt;10010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; w[MAX_N], v[MAX_N];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从index为i的物品开始挑选总重小于j的部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==n) &lt;span class=&quot;comment&quot;&gt;//没有剩余的物品了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(w[i]&amp;gt;j)&lt;span class=&quot;comment&quot;&gt;//index为i的物品重量大于剩余总重&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		res = max(rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j),rec(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,j-w[i]) + v[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, rec(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,W));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>最基础的穷竭搜索——《挑战程序设计竞赛》</title>
    <link href="http://yoursite.com/2019/06/23/%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B/"/>
    <id>http://yoursite.com/2019/06/23/最基础的穷竭搜索——《挑战程序设计竞赛》/</id>
    <published>2019-06-23T04:03:18.000Z</published>
    <updated>2019-06-25T14:47:53.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1-4-深度优先搜索"><a href="#2-1-4-深度优先搜索" class="headerlink" title="2.1.4 深度优先搜索"></a>2.1.4 深度优先搜索</h3><p> [<a href="http://poj.org/problem?id=2386" target="_blank" rel="noopener">http://poj.org/problem?id=2386</a>]:     “Lake Counting”</p><blockquote><p>有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)<br>www<br>w.w<br>www</p></blockquote><p>从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。<br>使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。</p><a id="more"></a><h3 id="2-1-6-特殊状态的枚举"><a href="#2-1-6-特殊状态的枚举" class="headerlink" title="2.1.6 特殊状态的枚举"></a>2.1.6 特殊状态的枚举</h3><p>C++的algorithm库中提供了next_permutation这一函数，可以把n给元素共n!种不同的排列生成出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> used[MAX_N];</span><br><span class="line"><span class="keyword">int</span> perm[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成&#123;0, 1, 2, 3,..., n-1&#125;的n!种排列 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation1</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos == n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;perm[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//针对perm的index为pos的位置，究竟使用0~n-1种的哪一个进行循环 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">perm[pos] = i;</span><br><span class="line">used[i] = <span class="literal">true</span>;</span><br><span class="line">permutation1(pos + <span class="number">1</span>, n);</span><br><span class="line">used[i] = <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">permutation1(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用函数时，主调函数所拥有的局部变量等信息需要存储在特定的内存区域，这个区域叫做栈内存区；另一方面，利用new或者malloc进行分配的内存区域叫做堆内存。<br>栈内存在程序启动时被统一分配，此后不能再扩大，由于这一区域有上限，所以函数的递归深度也有上限。<br>显式初始化全局变量被保存在数据段种，未显式初始化的全局变量保持在BSS段中。使用全局变量可以减小栈溢出的危险。</p></blockquote><hr><h2 id="2-2-贪心法"><a href="#2-2-贪心法" class="headerlink" title="2.2 贪心法"></a>2.2 贪心法</h2><ol><li>[<a href="http://poj.org/problem?id=3617" target="_blank" rel="noopener">http://poj.org/problem?id=3617</a>]:     “Best Cow Line”</li></ol><blockquote><p>已知一段长度为N的字符串S，构造一个字典序最小的字符串T。起初T为空串，随后反复进行下列任意操作。<br>-从S的头部删除一个字符，加到T的尾部<br>-从S的尾部删除一个字符，加到T的尾部</p></blockquote><p>贪心算法很容易想到：不断取S的开头和末尾中较小的一个字符放到T的末尾。如果两个字符相等，那么就不断比较下一个内部字符的大小。</p><ol><li>[<a href="http://poj.org/problem?id=3253" target="_blank" rel="noopener">http://poj.org/problem?id=3253</a>]:     “Fence Repair”<blockquote><p>有一位农夫要把一个木板(长度为 N 块木板长度之和)使用 (N-1) 次锯成 N 块给定长度的小木板，每次锯都要收取一定费用，这个费用就是当前锯的这个木板的长度，给定各个要求的小木板的长度，及小木板的个数  N，求最小的费用。</p></blockquote></li></ol><p>切割的方法可以参见如下的二叉树：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     15</span><br><span class="line">    /  \</span><br><span class="line">  7      8</span><br><span class="line"> / \    / \</span><br><span class="line">3   4  5   3</span><br><span class="line">          / \</span><br><span class="line">         1   2</span><br></pre></td></tr></table></figure></p><p>一个叶子就相当于一个小木板，那么开销的合计即为：</p><script type="math/tex; mode=display">\sum 小木板的长度 \times 小木板节点的深度</script><p>此时最佳的切割方式为：<strong>最短的板与次短的板的节点应当是兄弟节点</strong></p><p>不妨将$L_i$按大小顺序排列，那么最短的板$L_1$与次短的板$L_2$应当为兄弟节点，因为切割是自由的不妨当作$L_1$和$L_2$是最后切开的，那么这次切割之前就有：</p><script type="math/tex; mode=display">(L_1+L_2), L_3, L_4, ... ,L_N</script><p>这样的N-1块木板存在。之后递归第将这N-1块木板的问题求解，每次加上最短的板与次短的板的长度之和即得解。时间复杂度为$O(N^2)$。事实上最佳的复杂度为$O(NlogN)$，之后将会学到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> L[<span class="number">50010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;L[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(N&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mii1 = <span class="number">0</span>, mii2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L[mii1]&gt;L[mii2])swap(mii1,mii2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L[i]&lt;L[mii1])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = mii1;</span><br><span class="line">mii1 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]&lt;L[mii2])</span><br><span class="line">&#123;</span><br><span class="line">mii2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = L[mii1] + L[mii2];</span><br><span class="line">ans += t;</span><br><span class="line"><span class="keyword">if</span>(mii1==N<span class="number">-1</span>)swap(mii1,mii2);</span><br><span class="line">L[mii1] = t;</span><br><span class="line">L[mii2] = L[N<span class="number">-1</span>];</span><br><span class="line">N--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-1-4-深度优先搜索&quot;&gt;&lt;a href=&quot;#2-1-4-深度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;2.1.4 深度优先搜索&quot;&gt;&lt;/a&gt;2.1.4 深度优先搜索&lt;/h3&gt;&lt;p&gt; [&lt;a href=&quot;http://poj.org/problem?id=2386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=2386&lt;/a&gt;]:     “Lake Counting”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)&lt;br&gt;www&lt;br&gt;w.w&lt;br&gt;www&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。&lt;br&gt;使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
</feed>
