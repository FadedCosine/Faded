<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[树状数组——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F28%2F%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。给一个初始值全为0的数列，$a_1, a_2, \cdots, a_n$，树状数组可以进行如下操作： 给定i，计算$a_1+a_2+\cdots+a_i$ 给定i和x，执行$a_i+=x$]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F27%2F%E7%BA%BF%E6%AE%B5%E6%A0%91%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[线段树是一种二叉搜索树，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点（并非完全二叉树！！！）。实际应用时一般还要开4N的数组以免越界。线段树的构造代码如下： 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std; const int maxind = 256;int segTree[maxind * 4 + 10];int array[maxind]; /* 构造函数，得到线段树 */void build(int node, int begin, int end) &#123; if (begin == end) segTree[node] = array[begin]; /* 只有一个元素,节点记录该单元素 */ else &#123; /* 递归构造左右子树 */ build(2*node, begin, (begin+end)/2); build(2*node+1, (begin+end)/2+1, end); /* 回溯时得到当前node节点的线段信息，保存最小值 */ if (segTree[2 * node] &lt;= segTree[2 * node + 1]) segTree[node] = segTree[2 * node]; else segTree[node] = segTree[2 * node + 1]; &#125; &#125; int main()&#123; array[0] = 1, array[1] = 2,array[2] = 2, array[3] = 4, array[4] = 1, array[5] = 3; build(1, 0, 5); return 0;&#125; 线段树的主要操作包括区间查询（查询给定区间的最小值）和给定节点的更新。 区间查询 int query(int node, int begin, int end, int left, int right);时间复杂度$O(\log n)$。（其中node为当前查询节点，begin,end为当前节点存储的区间，left,right为此次query所要查询的区间，实际上我们只想要查询[left, right)的最小值其他的参数是为了计算方便传入的）线段树区间查询的主要思想是把所要查询的区间[a,b]划分为线段树上的节点，然后将这些节点代表的区间合并起来得到所需信息：（对于节点存储对应区间最小值的线段树来说） 如果所查询区间和当前节点对应的区间完全没有交集，那么就返回一个不影响答案的值 如果所查询的区间包含了当前节点对应的区间，那么就返回当前节点的值 以上两种情况都不满足的话，就对两个儿子递归处理，返回两个结果中的较小值123456789101112131415161718192021222324252627int query(int node, int begin, int end, int left, int right) &#123; int p1, p2; /* 查询区间和要求的区间没有交集 */ if (left &gt; end || right &lt; begin) return -1; /* if the current interval is included in */ /* the query interval return segTree[node] */ if (begin &gt;= left &amp;&amp; end &lt;= right) return segTree[node]; /* compute the minimum position in the */ /* left and right part of the interval */ p1 = query(2 * node, begin, (begin + end) / 2, left, right); p2 = query(2 * node + 1, (begin + end) / 2 + 1, end, left, right); /* return the expect value */ if (p1 == -1) return p2; if (p2 == -1) return p1; if (p1 &lt;= p2) return p1; return p2; &#125; 单节点更新1234567891011121314151617void Updata(int node, int begin, int end, int ind, int add)/*单节点更新*/ &#123; if( begin == end ) &#123; segTree[node] += add; return ; &#125; int m = ( left + right ) &gt;&gt; 1; if(ind &lt;= m) Updata(node * 2,left, m, ind, add); else Updata(node * 2 + 1, m + 1, right, ind, add); /*回溯更新父节点*/ segTree[node] = min(segTree[node * 2], segTree[node * 2 + 1]); &#125; 有n根长度不尽相同的棍子，初始时它们首尾垂直相连，标号为1—n，第一根棍子的下端坐标为(0,0),上端坐标为(0,len[1]),其余棍子依次类推。接下来执行C此旋转，每次输入一个编号num和角度rad，使得第num根棍子和第num+1跟棍子间的逆时针角度变为rad度，求每次旋转后第n根棍子端点的坐标。 解题思路源于[https://www.cnblogs.com/staginner/archive/2012/04/07/2436436.html] 如果我们将其中某一个线段旋转β角，那么这个线段上方的所有线段都会旋转β角，这就很类似线段树中的对区间加上一个常数的问题了，于是不妨向着线段树的思路去想。 接下来一个问题就是β角是相对于谁的，换句话说我们所谓的每个线段都会旋转β角，那么是绕谁旋转的？实际上，如果我们局限于把线段的旋转就会看成是绕某个定点的，这个点就是我们旋转的线段和它下面那个不动的线段的交点，再这样想下去我们就没法处理了，因为每个旋转操作所绕的定点不是唯一的，我们没办法把所有的旋转操作都统一到一起，那么我们就没办法把旋转操作叠加，这样就没法使用线段树了。 但如果换个思路的话，实际上β角还等于这个线段旋转后所在的直线和未旋转前所在的直线的夹角，而直线的夹角是可以用向量的夹角表示的，如果我们把线段看成一个向量的话那么β角就是这个向量旋转的角度。如果这么看的话，所有的旋转操作就可以统一到一起了，也可以叠加了，因为这样不会局限于绕哪个定点，只需要把向量自身旋转一下就OK。 那么我们维护下面两个值： 把对应线段集合转到垂直方向（也就是整体旋转，让第一条线段垂直之后，注意并不是单独旋转第一条线段），从第一条线段的起点指向最后一条线段的终点的向量。 （如果该节点有儿子节点）两个儿子节点对应的部分连接之后，右儿子需要转动的角度（因为s和s+1的角度改变，如果s在左儿子中，那么在全局坐标系内，右儿子也会相应的需要旋转改变坐标） 也就是说，如果节点i表示的向量是$vx_i, vy_i$，角度是$ang_i$，两个儿子节点是chl和chr，那么就有： vx_i = vx_{chl}+(\cos(ang_i)\times vx_{chr} - \sin(ang_i)\times vy_{chr}) vy_i = vy_{chl}+(\sin(ang_i)\times vx_{chr} + \cos(ang_i)\times vy_{chr})对向量旋转的解释可参照[https://www.2cto.com/kf/201610/556382.html]这样每次更新可在$O(\log n)$的时间内完成。]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用技巧精选——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F27%2F%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E7%B2%BE%E9%80%89%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[3.2 常用技巧精选（一）3.2.1 尺取法 给出N个数字：$a0, a_1, \cdots, a{n-1}$，每个数字不大于10000，给出一个整数S，在N个数字中挑选出连续子序列，使这个子序列和大于或等于S。请问这个连续的子序列长度的最小值。 3.2.2 反转（开关问题）[http://poj.org/problem?id=3276]: “Face The Right Way” N头牛排成一列，头要么朝前要么朝后，现在要求确定一个连续反转牛头的连续区间，区间长度为K，要使得所有牛都朝前，且反转次数M尽可能小。求出最小的操作数M和对应的最小的K。 首先，交换区间反转顺序的先后对结果毫无影响。此外，可以知道对同一个区间进行两次以上的反转是多余的，由此，问题就转化成了求需要被反转的区间的集合。于是我们先考虑一下最左端的牛。包含这头牛的区间只有一个，因此如果这头牛面朝前方，我们就能知道这个区间不需要反转。反之，如果这头牛面朝后方，对应的区间就必须进行反转了。而且在此之后这个最左的区间就再也不需要考虑了。这样一来，通过首先考虑最左端的牛，问题的规模就缩小了1。不断的重复下去，就可以无需搜索求出最少所需的反转次数了。 然而，我们需要遍历K，对于每个K我们都要从最左端开始考虑N头牛的情况，最坏情况需要进行N-K+1次的反转操作，而每次操作又要反转K头牛，所以总的复杂度是$O(N^3)$。 对于区间反转部分进行优化：优化的方法是计算第i头牛是否要翻转的时候，只需要知道第i-k+1头到第i头之间的翻转次数，那么维护这个次数即可。 f[i]:=区间[i,i+K-1]进行了反转的话则为1，否则为0这样，在考虑第i头年时，如果$\sum_{j=i-K+1}^{i-1}f[j]$为奇数的话，则这头牛的方向与起始方向是相反的，否则方向不变。依据如下公式 \sum_{j=(i+1)-K+1}^{i}f[j] = \sum_{j=i-K+1}^{i-1}f[j]+f[i]-f[i-K+1]使用尺取法，每次向右移动一格，需要看看左边出去的那格（第i-k格）是翻转了没有，维护好f数组即可。这样扫一遍的复杂度是$O(n)$，那么总复杂度就是$O(n^2)$。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556const int M = 5100;int n;int dir[M];int f[M];int calc(int K)&#123; memset(f,0,sizeof(f)); int res = 0; int sum = 0; //当前维护的f的和 for(int i=0;i+K&lt;=n;i++) &#123; if((dir[i]+sum) % 2 != 0) //最前端的牛面朝后方 &#123; res++; f[i] = 1; &#125; sum += f[i]; if(i-K+1&gt;=0) &#123; sum -= f[i-K+1]; &#125; &#125; // 检查剩下的牛，从n-K+1开始，是否有面朝后方的情况 for(int i=n-K+1;i&lt;n;i++) &#123; if((dir[i]+sum)%2!=0) //无解 &#123; return -1; &#125; if(i-K+1&gt;=0) sum-=f[i-K+1]; &#125; return res;&#125;int main()&#123; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; char c; cin&gt;&gt;c; if(c=='B') &#123; dir[i]=1; &#125; else &#123; dir[i]=0; &#125; &#125; solve(); return 0; &#125; 有一个m*n的棋盘，每个格子上是0或1，每次可以对一个格子做一次翻转操作，将被操作的格子和上下左右4个格子的0/1翻转。问做少做多少次翻转可以将所有格子翻转成0，输出翻转方案。没有方案时输出“IMPOSSIBLE”。$1\le m, n \le 15$ 回顾一下前情，在之前POJ3276问题中，让最左边的牛反转的方法只有1种，可以直接判断当前的方案是否可行。然而，同样的方法在此题中不能行得通。不妨看最左上角的格子，这里除了翻转(1,1)之外，翻转(1,2)和(2,1)都可以把这个格子翻转，所以之前的直接确定的方法在此行不通。 值得注意的一点是这题中的m，n特别小，简直就是在明示可以有某种枚举的方法。因为本题格子间的状态都是互相影响的，只能通过枚举第一行，逐行往下搜，如何搜索：如果从上到下搜索，当前行是否需要反转取决于上一行的状态，通过翻转当前行使上一行为0，而不是通过上一行翻转为0后，看当前行的状态判断自己是否需要翻转，否则还会继续影响上一行。意思就是不是在当前行中的翻转操作不是为了让当前行中的所有格子都为0，而是要让上一行的所有格子都为0。所以我们可以通过枚举第一行所有的状态，从第二行开始确定翻转状态，直到最后一行结束，如果可以保证最后一行都是0，那么方案可行，否则重新定义第一行的状态，继续搜索，找出使反转次数最少的方案。 3.2.4 折半枚举（双向搜索） 超大背包问题有重量和价值分别为$w_i, v_i$的n个物品，从这些物品中挑选总重量不超过W的物品，求所有挑选方案中价值总和的最大值限制条件：$1 \le n \le 40, 1\le w_i, v_i \le 10^15, 1 \le W \le 10^15 $ 所谓超大背包问题，W的最大值是$10^15$，使用DP来求解背包问题的复杂度是$O(nW)$，因此不能解决这里的问题。但是n比较小，依此寻求枚举解法。 3.2.5 坐标离散化 w*h的格子上画了n条垂直或水平的宽度为1的直线。求出这些线将格子划分成了多少个区域。1&lt;=w,h&lt;=1000000. 1&lt;=n&lt;=500样例：w = 10, h = 10, n = 5x1 = {1, 1, 4, 9, 10}x2 = {6, 10, 4, 9, 10}y1 = {4, 8, 1, 1, 6}y2 ={4, 8, 10, 5, 10} 理解了半天这个样例，意思是( (x1, y1), (x2, y2) )是一条直线。一般求解被分割出的区域的个数使用图的遍历如DFS和BFS算法，需要$w\times h$，但是这个问题中w和h最大为1000000，所以没办法创建出$w\times h$的数组，所以需要使用坐标离散化技巧。 数组里只需要存储有直线的行列以及前后的行列就足够了，这样的话大小最多$6n \times 6n$就足够了（x1的自己、前后，3个，x2的自己、前后，3个，因此则有 $6n \times 6n$）。创建出数组并利用搜索求出区域的个数。（区域可能很大，所以用递归函数实现的话可能会栈溢出）]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学问题的解题窍门——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F26%2F%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E9%A2%98%E7%AA%8D%E9%97%A8%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[2.6.2 有关素数的基础算法埃氏筛法 素数的个数：给定整数n，请问n以内有多少个素数？ 首先将2到n范围内的所有整数写下来，其中最小的数字2是素数，将表中所有2的倍数都划去，表中剩余的最小数字是3，它不能被更小的数整除，所以是素数，再将所有3的倍数划去。以此类推：123456789101112131415161718int prime[MAX_N]; //第i个素数bool is_prime[MAX_N + 1];//返回n以内素数的个数int sieve(int n)&#123; int p = 0; for(int i=0;i&lt;=n;i++)is_prime[i]=true; is_prime[0] = is_prime[1] = false; for(int i=2;i&lt;=n;i++) &#123; if(is_prime[i]) &#123; prime[p++] = i; for(int j=2*i;j&lt;=n;j+=i) is_prime[j] = false; &#125; &#125; return p;&#125; 埃氏筛法的复杂度仅有$O(n\log\log n)$。 2.6.4快速幂运算[https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=947]: “Carmicheal Numbers” 我们把对任意的1&lt;x&lt;n都有$x^n\equiv x(mod n)$成立的合数n称为Carmichael Numbers。对于给定的整数n，判断它是不是Carmichael Number。 考虑加速幂运算的方法，如果$n=x^k$，可以将其表示为 x^n = ((x^2)^2) \cdots只要做k次平方运算就可以轻松求得。因此我们可以先将n表示成2的幂次的和： n = 2^{k_1} + 2^{k_2} + 2^{k_2} + \cdots就有： x^n = x^{2^{k_1}}x^{2^{k_2}}x^{2^{k_3}}\cdots只要依此求$x^{2^{k_i}}$，最终可以得到$O(\log n)$的计算幂运算的复杂度。123456789101112typedef long long ll;ll mod_pow(ll x, ll n, ll mod)&#123; ll res = 1; while(n&gt;0) &#123; if(n&amp;1) res = res * x % mod; x = x * x % mod; n &gt;&gt;= 1; &#125; return res;&#125; 在遍历n，即可得解，复杂度为$O(n\log n)$。]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图算法——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F25%2F%E5%9B%BE%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[2.5.2 图的表示邻接表可以直接用如下代码表示： 123456vector&lt;int&gt; graph[MAX_V] 来表示邻接表 /*边上有属性的情况： struct edge &#123;int to, cost;&#125; vector&lt;edge&gt; G[MAX_V];*/ 2.5.4 最短路问题1. 单源最短路问题Bellman-Ford算法记从起点s出发到顶点i的最短距离为d[i]，则下述等式成立： d[i] = \min\{d[j]+(从j到i的边的权值| e=(j,i)\in E\}设初值d[s]=0, d[i]=INF，再不断使用这条递推关系式更新d的值。只要图中不存在负圈，这样的更新操作就是有限的。 123456789101112131415161718192021222324struct edge &#123;int from, to, cost&#125;;edge es[MAX_E]; //边int d[MAX_V];int V, E;void shortest_path(int s)&#123; for(int i=0;i&lt;V;i++) d[i] = INF; d[s] = 0; while(true) &#123; bool update = false; for(int i=0;i&lt;E;i++) &#123; edge e = es[i]; if(d[e.from]!=INF &amp;&amp; d[e.to]&gt;d[e.from]+e.cost) &#123; d[e.to] = d[e.from] + e.cost; update = true; &#125; &#125; if(!update) break; &#125; &#125; 如果图中不存在负圈，最短路径不会经过同一个顶点两次，while(true)最多执行|V|-1次（|V|个顶点，|V|-1条边），因此复杂度为 $O(|V|\times|E|)$。反之如果存在负圈，那么第|V|次循环种也会更新d的值，因此可以通过判断第V次是否仍更新了判断是否存在负圈。 Dijkstra算法在没有负边的情况下，上述Bellman-Ford算法复杂度高很大一部分原因是，如果d[i]还不是最短距离即使进行d[j]=d[i]+(从i到j的边的权值)的更新，d[j]也不会是最短距离，而且即使d[i]没有变化，每一次循坏也要检查一遍从i出发的所有边，很浪费时间。因此可以对算法做出如下修改： 找到最短距离已经确定的顶点，从它出发更新相邻顶点的最短距离 此后不用再关心1中的“最短距离已经确定的顶点” 下面是使用STL的priority_queue的实现。在每次更新时往堆里插入当前最短距离和顶点的值对，当取出的最小值不是最短距离时，就丢弃这个值。123456789101112131415161718192021222324252627struct edge&#123;int to, cost;&#125;;typedef pair&lt;int, int&gt; P;int V;vector&lt;edge&gt; G[MAX_V];int d[MAX_V];void dijkstra(int s)&#123; priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que; fill(d,d+V,INF); d[s] = 0; que.push(P(0,s)); while(!que.empty()) &#123; P p = que.top(); que.pop(); int v = p.second; if(d[v] &lt; p.first) continue; for(int i=0;i&lt;G[v].size();i++) &#123; edge e = G[v][i]; if(d[e.to] &gt; d[v]+e.cost) &#123; d[e.to] = d[v]+e.cost; que.push(P(d[e.to],e.to)); &#125; &#125; &#125;&#125; 2.5.6 图算法的应用 一共有n头牛，按编号顺序排成一排，有ml个关系好的牛的信息，有md个关系不好的牛的信息，对应输入的第一行的三个元素，接下来ml行，每行三个元素A,B,D，表示A牛和B牛相距不希望超过D，接下来md行，每行三个元素A,B,D表示A牛和B牛的相距至少要有D才行。求1号牛和n号牛的最大距离，如果距离无限大输出-2，如果无解输出-1。 记第i头牛的位置是d[i]。首先，牛是按照编号顺序排列的，所以有$d[i] \le d[i+1]$。]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加工并存储数据的数据结构——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F25%2F%E5%8A%A0%E5%B7%A5%E5%B9%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[2.4.4 并查集并查集的实现（交大《数据结构》教材中的实现）： 123456789101112131415161718192021int disjoint[500000]; //使用时别忘了先全部初始化为-1 int find(int x)&#123; if(disjoint[x] &lt; 0) return x; return disjoint[x] = find(disjoint[x]); //路径压缩&#125;void Union(int root1, int root2)&#123; if(root1 == root2) return ; if(disjoint[root1] &gt; disjoint[root2])// disjoint[root2]为负值，其绝对值为并查集的大小 &#123; disjoint[root2] += disjoint[root1]; disjoint[root1] =root2; &#125; else &#123; disjoint[root1] += disjoint[root2]; disjoint[root2] =root1; &#125;&#125; 并查集中根节点所存储的数据都为负值，其绝对值为当前根节点这一组中节点的个数。对于n个元素的并查集进行一次操作的复杂度（均摊复杂度）是$O(\alpha(n))$。在这里，$\alpha(n)$是阿克曼(Ackermann)函数的反函数，比$O(\log(n))$还要快。 动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。 现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。有人用两种说法对这N个动物所构成的食物链关系进行描述：“1 X Y”，表示X和Y是同类。“2 X Y”，表示X吃Y。此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。1） 当前的话与前面的某些真的话冲突，就是假话；2） 当前的话中X或Y比N大，就是假话；3） 当前的话表示X吃X，就是假话。你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。 起初并不知道每只动物的种类，我想直到所有信息输入完全也很难推断出每只动物是啥种类，所以不妨对每只i创建3个元素i-A, i-B, i-C, 并用这$3\times N$个元素建立并查集，这个并查集维护如下信息： i-x表示“i属于种类x”。 并查集里的每一个组表示组内所有元素代表的情况都同时发生或不发生。 对于每一条信息，只需按照下面进行操作： 第一种，x和y属于同一种类：合并x-A和y-A、x-B和y-B、x-C和y-C。 第二种，x吃y： 合并x-A和y-B、x-B和y-C、x-C和y-A。 在合并之前判断这次合并是否会产生矛盾。例如在第一种信息的情况下，需要检查x-A和y-B或者y-C是否在同一组。代码如下123456789101112131415161718192021222324252627282930313233343536373839//省略了并查集的实现代码int N, K; //N种动物，K条信息int T[MAX_K], X[MAX_K], Y[MAX_K]; //T表示信息的类型int solve()&#123; int ans = 0; for(int i=0;i&lt;K;i++) &#123; int t = T[i]; int x = X[i] - 1, y = Y[i] - 1; if(x&lt;0 || N&lt;=x || y&lt;0 || N&lt;= y) &#123; ans++； continue; &#125; if(t==1) &#123; //x-A和y-B或者y-C是否在同一组，说明已经相信了全面一组信息说，x与y不同类 if(find(x) == find(y+N) || find(x) == find(y+2*N) ans++; else &#123; Union(x,y); Union(x+N,y+N); Union(x+2*N,y+2*N); &#125; &#125; else &#123; if(find(x) == find(y) || find(x) == find(y+2*N) ans++; else &#123; Union(x,y+N); Union(x+N,y+2*N); Union(x+2*N,y); &#125; &#125; &#125; return ans;&#125;]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录结果再利用的动态规划——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F24%2F%E8%AE%B0%E5%BD%95%E7%BB%93%E6%9E%9C%E5%86%8D%E5%88%A9%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[2.3.1 记忆化搜索与动态规划 01 背包问题有n个重量和价值分别为$w_i, v_i$的物品。从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。 循序渐进，先用最朴素的递归方法，针对每个物品是否放入背包进行搜索试试看。123456789101112131415161718192021222324252627int n, W;const int MAX_N = 10010;int w[MAX_N], v[MAX_N];//从index为i的物品开始挑选总重小于j的部分int rec(int i,int j)&#123; int res; if(i==n) //没有剩余的物品了 &#123; res = 0; &#125; else if(w[i]&gt;j)//index为i的物品重量大于剩余总重 &#123; res = rec(i+1,j); &#125; else &#123; res = max(rec(i+1,j),rec(i+1,j-w[i]) + v[i]); &#125; return res;&#125;void solve()&#123; printf("%d\n", rec(0,W));&#125; 这种方法搜索深度为n，如第19行所示，每一层都有两个分支，那么最坏的复杂度为$O(2^n)$。因为会有相同参数的rec的多次调用，重复计算，耗时费神。故记忆化搜索的想法是把第一次计算的结果记录下来，之后直接调用以防重复计算。1234567891011121314151617181920212223242526272829int dp[MAX_N+1][MAX_N+1];int rec(int i,int j)&#123; if(dp[i][j]&gt;=0) &#123; return dp[i][j]; &#125; int res; if(i==n) //没有剩余的物品了 &#123; res = 0; &#125; else if(w[i]&gt;j)//index为i的物品重量大于剩余总重 &#123; res = rec(i+1,j); &#125; else &#123; res = max(rec(i+1,j),rec(i+1,j-w[i]) + v[i]); &#125; dp[i][j] = res; return res;&#125;void solve()&#123; memset(dp,-1,sizeof(dp));//-1表示尚未被计算过，初始化整个数组 printf("%d\n", rec(0,W));&#125; 代码中直观地实现了我们记录第一次计算结果的想法，这就是记忆化搜索，也就是dp的萌芽。rec函数参数的组合最大nW种，所以时间复杂度为O(nW)。 memset进行初始化是按照1字节为单位对内存进行填充的，因为-1的二进制表示每一个比特位都是1，所以可以用memset初始化为-1，0也可以用memset初始化，但是不能初始化从1之类的数值，因为1的二进制表示为00000001，memset不能细粒度到每个比特。 但这并不是正经的DP格式，DP需给出递推关系，如下： 定义dp[i+1][j]:=从0到i这i+1个物品中选出总重量不超过j的物品时总价值的最大值,则有 \begin{equation} dp[0][j]=0 \\ dp[i+1][j] = \left\{ \begin{array}{**lr**} dp[i][j], & (j]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最基础的穷竭搜索——《挑战程序设计竞赛》]]></title>
    <url>%2F2019%2F06%2F23%2F%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E7%A9%B7%E7%AB%AD%E6%90%9C%E7%B4%A2%E2%80%94%E2%80%94%E3%80%8A%E6%8C%91%E6%88%98%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E3%80%8B%2F</url>
    <content type="text"><![CDATA[2.1.4 深度优先搜索 [http://poj.org/problem?id=2386]: “Lake Counting” 有一个大小为N*M的园子，雨后积了很多水。八连通的积水被认为是在一起的。请求出园子里共有多少个水洼？(八连通是指下图中相对.的8 部分)wwww.wwww 从任意的’W’开始，不停地把邻接的部分用’.’代替，一次DFS(深度优先遍历)遍历后，与初始的这个 W 所连接的所有 ‘W’ 都会被替换成 ‘.’，因此直到图中没有 ‘W’为止，总共进行 DFS 的次数即为积水的次数。使用深度优先搜索，从任意W开始，进入DFS，在DFS中把八联通的邻接部分都’.’代替，若八连通区域中又有一个”W”，进入下一层DFS，直到当前的连通分支不再有W，总共DFS的次数就是答案。八连通对应着8个方向的状态转移，每个格子至多调用一次DFS，所以复杂度是$O(8\times N \times M) = O(N \times M)$。 2.1.6 特殊状态的枚举C++的algorithm库中提供了next_permutation这一函数，可以把n给元素共n!种不同的排列生成出来。 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;using namespace std;const int MAX_N = 100;bool used[MAX_N];int perm[MAX_N];//生成&#123;0, 1, 2, 3,..., n-1&#125;的n!种排列 void permutation1(int pos, int n)&#123; if(pos == n)&#123; for(int i=0;i&lt;n;i++) cout&lt;&lt;perm[i]&lt;&lt;" "; cout&lt;&lt;endl; return; &#125; //针对perm的index为pos的位置，究竟使用0~n-1种的哪一个进行循环 for(int i = 0; i&lt; n; i++)&#123; if(!used[i])&#123; perm[pos] = i; used[i] = true; permutation1(pos + 1, n); used[i] = false; &#125; &#125; return;&#125;int main()&#123; permutation1(0,5); return 0;&#125; 调用函数时，主调函数所拥有的局部变量等信息需要存储在特定的内存区域，这个区域叫做栈内存区；另一方面，利用new或者malloc进行分配的内存区域叫做堆内存。栈内存在程序启动时被统一分配，此后不能再扩大，由于这一区域有上限，所以函数的递归深度也有上限。显式初始化全局变量被保存在数据段种，未显式初始化的全局变量保持在BSS段中。使用全局变量可以减小栈溢出的危险。 2.2 贪心法 [http://poj.org/problem?id=3617]: “Best Cow Line” 已知一段长度为N的字符串S，构造一个字典序最小的字符串T。起初T为空串，随后反复进行下列任意操作。-从S的头部删除一个字符，加到T的尾部-从S的尾部删除一个字符，加到T的尾部 贪心算法很容易想到：不断取S的开头和末尾中较小的一个字符放到T的末尾。如果两个字符相等，那么就不断比较下一个内部字符的大小。 [http://poj.org/problem?id=3253]: “Fence Repair” 有一位农夫要把一个木板(长度为 N 块木板长度之和)使用 (N-1) 次锯成 N 块给定长度的小木板，每次锯都要收取一定费用，这个费用就是当前锯的这个木板的长度，给定各个要求的小木板的长度，及小木板的个数 N，求最小的费用。 切割的方法可以参见如下的二叉树：1234567 15 / \ 7 8 / \ / \3 4 5 3 / \ 1 2 一个叶子就相当于一个小木板，那么开销的合计即为： \sum 小木板的长度 \times 小木板节点的深度此时最佳的切割方式为：最短的板与次短的板的节点应当是兄弟节点 不妨将$L_i$按大小顺序排列，那么最短的板$L_1$与次短的板$L_2$应当为兄弟节点，因为切割是自由的不妨当作$L_1$和$L_2$是最后切开的，那么这次切割之前就有： (L_1+L_2), L_3, L_4, ... ,L_N这样的N-1块木板存在。之后递归第将这N-1块木板的问题求解，每次加上最短的板与次短的板的长度之和即得解。时间复杂度为$O(N^2)$。事实上最佳的复杂度为$O(NlogN)$，之后将会学到。 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;using namespace std;int N;int L[50010];int main()&#123; cin&gt;&gt;N; for(int i=0;i&lt;N;i++) &#123; cin&gt;&gt;L[i]; &#125; long long ans = 0; while(N&gt;1) &#123; int mii1 = 0, mii2 = 1; if(L[mii1]&gt;L[mii2])swap(mii1,mii2); for(int i=2;i&lt;N;i++) &#123; if(L[i]&lt;L[mii1]) &#123; mii2 = mii1; mii1 = i; &#125; else if(L[i]&lt;L[mii2]) &#123; mii2 = i; &#125; &#125; int t = L[mii1] + L[mii2]; ans += t; if(mii1==N-1)swap(mii1,mii2); L[mii1] = t; L[mii2] = L[N-1]; N--; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
